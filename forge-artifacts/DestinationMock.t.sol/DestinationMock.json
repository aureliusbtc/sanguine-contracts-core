{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "notaryIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "sigIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "attPayload",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "agentRoot",
          "type": "bytes32"
        },
        {
          "internalType": "ChainGas[]",
          "name": "snapGas",
          "type": "uint128[]"
        }
      ],
      "name": "acceptAttestation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "wasAccepted",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agentManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "agentStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum AgentFlag",
              "name": "flag",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            }
          ],
          "internalType": "struct AgentStatus",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attestationsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteMockReturnValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destStatus",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "snapRootTime",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "agentRootTime",
          "type": "uint40"
        },
        {
          "internalType": "uint32",
          "name": "notaryIndex",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "msgPayload",
          "type": "bytes"
        },
        {
          "internalType": "bytes32[]",
          "name": "originProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "snapProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "stateIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "gasLimit",
          "type": "uint64"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum AgentFlag",
              "name": "flag",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            }
          ],
          "internalType": "struct AgentStatus",
          "name": "status",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getAttestation",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "attPayload",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "attSignature",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "getAttestationNonce",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "attNonce",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        }
      ],
      "name": "getGasData",
      "outputs": [
        {
          "internalType": "GasData",
          "name": "gasData",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "dataMaturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReturnValueAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReturnValueBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReturnValueBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReturnValueUint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReturnValueUint32",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "isValidReceipt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "messageReceipt",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "messageStatus",
      "outputs": [
        {
          "internalType": "enum MessageStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextAgentRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "guardIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "notaryIndex",
          "type": "uint32"
        }
      ],
      "name": "openDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "passAgentRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "rootPassed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "rootPending",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "slashedIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "rivalIndex",
          "type": "uint32"
        }
      ],
      "name": "resolveDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMockReturnValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "setMockReturnValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "value",
          "type": "bytes"
        }
      ],
      "name": "setMockReturnValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testAgentSecuredMock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testBaseMock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testDestinationMock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testExecutionHubMock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b50610f68806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063611692181161010f578063b81442e0116100a2578063e2f006f711610071578063e2f006f71461042e578063e60f5f6a14610441578063f05b335114610454578063fb0e722b146103ad57600080fd5b8063b81442e0146103d8578063c897f01d146101ea578063d0dd0675146103e0578063daa74a9e1461041a57600080fd5b8063a2155c34116100de578063a2155c3414610388578063a554d1e3146103bc578063b26406a0146101ea578063b78973d4146103d057600080fd5b80636116921814610388578063714141de1461039a5780637622f78d146103ad57806376fae198146103b457600080fd5b80633cf7b120116101875780634f127567116101565780634f12756714610343578063504730ab1461036b57806355252dd1146102f35780635980330d1461037357600080fd5b80633cf7b120146102f357806340989152146103045780634289cf75146103235780634a4a26a2146101ea57600080fd5b80632de5aaf7116101c35780632de5aaf71461025557806332ff14d21461029257806339fe2736146102a95780633c6cf473146102d257600080fd5b806306454f74146101ea57806328f3fac9146101ec57806329be4db214610231575b600080fd5b005b61021b6101fa3660046108ab565b50604080516060810182526000808252602082018190529181019190915290565b604051610228919061091a565b60405180910390f35b61024761023f366004610928565b606080915091565b604051610228929190610987565b610284610263366004610928565b60408051606081018252600080825260208201819052918101829052915091565b6040516102289291906109b5565b6101ea6102a0366004610ad5565b50505050505050565b6102c26102b7366004610b9f565b600095945050505050565b6040519015158152602001610228565b6102e66102e0366004610928565b50600090565b6040516102289190610cb4565b60005b604051908152602001610228565b6040805160008082526020820181905291810191909152606001610228565b61032b610469565b6040516001600160a01b039091168152602001610228565b610356610351366004610928565b610521565b60405163ffffffff9091168152602001610228565b6102f6610531565b61037b6105e4565b6040516102289190610cce565b6101ea610396366004610ce1565b5050565b6101ea6103a8366004610928565b610676565b600061032b565b6102c26106a0565b604080516000808252602082015201610228565b610356610753565b6101ea610806565b6103f66103ee366004610d1a565b600080915091565b604080516bffffffffffffffffffffffff9093168352602083019190915201610228565b61037b610428366004610928565b50606090565b6102c261043c366004610d37565b610811565b6101ea61044f3660046108ab565b61081b565b6101ea610462366004610d37565b610834565b565b600080805461047790610d74565b1590506102e0576000805461048b90610d74565b80601f01602080910402602001604051908101604052809291908181526020018280546104b790610d74565b80156105045780601f106104d957610100808354040283529160200191610504565b820191906000526020600020905b8154815290600101906020018083116104e757829003601f168201915b505050505080602001905181019061051c9190610dae565b905090565b600061052b610753565b92915050565b600080805461053f90610d74565b1590506102e0576000805461055390610d74565b80601f016020809104026020016040519081016040528092919081815260200182805461057f90610d74565b80156105cc5780601f106105a1576101008083540402835291602001916105cc565b820191906000526020600020905b8154815290600101906020018083116105af57829003601f168201915b505050505080602001905181019061051c9190610dcb565b6060600080546105f390610d74565b80601f016020809104026020016040519081016040528092919081815260200182805461061f90610d74565b801561066c5780601f106106415761010080835404028352916020019161066c565b820191906000526020600020905b81548152906001019060200180831161064f57829003601f168201915b5050505050905090565b6040805160208101839052015b604051602081830303815290604052600090816103969190610e33565b60008080546106ae90610d74565b1590506102e057600080546106c290610d74565b80601f01602080910402602001604051908101604052809291908181526020018280546106ee90610d74565b801561073b5780601f106107105761010080835404028352916020019161073b565b820191906000526020600020905b81548152906001019060200180831161071e57829003601f168201915b505050505080602001905181019061051c9190610ef3565b600080805461076190610d74565b1590506102e0576000805461077590610d74565b80601f01602080910402602001604051908101604052809291908181526020018280546107a190610d74565b80156107ee5780601f106107c3576101008083540402835291602001916107ee565b820191906000526020600020905b8154815290600101906020018083116107d157829003601f168201915b505050505080602001905181019061051c9190610f15565b610467600080610840565b600061052b6106a0565b604080516001600160a01b038316602082015201610683565b60006103968282610e33565b50805461084c90610d74565b6000825580601f1061085c575050565b601f01602090049060005260206000209081019061087a919061087d565b50565b5b80821115610892576000815560010161087e565b5090565b6001600160a01b038116811461087a57600080fd5b6000602082840312156108bd57600080fd5b81356108c881610896565b9392505050565b634e487b7160e01b600052602160045260246000fd5b8051600681106108f7576108f76108cf565b825260208181015163ffffffff9081169184019190915260409182015116910152565b6060810161052b82846108e5565b60006020828403121561093a57600080fd5b5035919050565b6000815180845260005b818110156109675760208185018101518683018201520161094b565b506000602082860101526020601f19601f83011685010191505092915050565b60408152600061099a6040830185610941565b82810360208401526109ac8185610941565b95945050505050565b6001600160a01b0383168152608081016108c860208301846108e5565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610a1157610a116109d2565b604052919050565b600082601f830112610a2a57600080fd5b813567ffffffffffffffff811115610a4457610a446109d2565b610a57601f8201601f19166020016109e8565b818152846020838601011115610a6c57600080fd5b816020850160208301376000918101602001919091529392505050565b60008083601f840112610a9b57600080fd5b50813567ffffffffffffffff811115610ab357600080fd5b6020830191508360208260051b8501011115610ace57600080fd5b9250929050565b600080600080600080600060a0888a031215610af057600080fd5b873567ffffffffffffffff80821115610b0857600080fd5b610b148b838c01610a19565b985060208a0135915080821115610b2a57600080fd5b610b368b838c01610a89565b909850965060408a0135915080821115610b4f57600080fd5b610b5b8b838c01610a89565b909650945060608a0135935060808a013591508082168214610b7c57600080fd5b508091505092959891949750929550565b63ffffffff8116811461087a57600080fd5b600080600080600060a08688031215610bb757600080fd5b8535610bc281610b8d565b94506020868101359450604087013567ffffffffffffffff80821115610be757600080fd5b610bf38a838b01610a19565b9550606089013594506080890135915080821115610c1057600080fd5b818901915089601f830112610c2457600080fd5b813581811115610c3657610c366109d2565b8060051b9150610c478483016109e8565b818152918301840191848101908c841115610c6157600080fd5b938501935b83851015610ca157843592506fffffffffffffffffffffffffffffffff83168314610c915760008081fd5b8282529385019390850190610c66565b8096505050505050509295509295909350565b6020810160038310610cc857610cc86108cf565b91905290565b6020815260006108c86020830184610941565b60008060408385031215610cf457600080fd5b8235610cff81610b8d565b91506020830135610d0f81610b8d565b809150509250929050565b600060208284031215610d2c57600080fd5b81356108c881610b8d565b600060208284031215610d4957600080fd5b813567ffffffffffffffff811115610d6057600080fd5b610d6c84828501610a19565b949350505050565b600181811c90821680610d8857607f821691505b602082108103610da857634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610dc057600080fd5b81516108c881610896565b600060208284031215610ddd57600080fd5b5051919050565b601f821115610e2e57600081815260208120601f850160051c81016020861015610e0b5750805b601f850160051c820191505b81811015610e2a57828155600101610e17565b5050505b505050565b815167ffffffffffffffff811115610e4d57610e4d6109d2565b610e6181610e5b8454610d74565b84610de4565b602080601f831160018114610e965760008415610e7e5750858301515b600019600386901b1c1916600185901b178555610e2a565b600085815260208120601f198616915b82811015610ec557888601518255948401946001909101908401610ea6565b5085821015610ee35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215610f0557600080fd5b815180151581146108c857600080fd5b600060208284031215610f2757600080fd5b81516108c881610b8d56fea2646970667358221220cef98e77e57d75001bdd0588b6600d6905379f2fb0c6dc82d8cbb96711da921664736f6c63430008110033",
    "sourceMap": "330:1007:132:-:0;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c8063611692181161010f578063b81442e0116100a2578063e2f006f711610071578063e2f006f71461042e578063e60f5f6a14610441578063f05b335114610454578063fb0e722b146103ad57600080fd5b8063b81442e0146103d8578063c897f01d146101ea578063d0dd0675146103e0578063daa74a9e1461041a57600080fd5b8063a2155c34116100de578063a2155c3414610388578063a554d1e3146103bc578063b26406a0146101ea578063b78973d4146103d057600080fd5b80636116921814610388578063714141de1461039a5780637622f78d146103ad57806376fae198146103b457600080fd5b80633cf7b120116101875780634f127567116101565780634f12756714610343578063504730ab1461036b57806355252dd1146102f35780635980330d1461037357600080fd5b80633cf7b120146102f357806340989152146103045780634289cf75146103235780634a4a26a2146101ea57600080fd5b80632de5aaf7116101c35780632de5aaf71461025557806332ff14d21461029257806339fe2736146102a95780633c6cf473146102d257600080fd5b806306454f74146101ea57806328f3fac9146101ec57806329be4db214610231575b600080fd5b005b61021b6101fa3660046108ab565b50604080516060810182526000808252602082018190529181019190915290565b604051610228919061091a565b60405180910390f35b61024761023f366004610928565b606080915091565b604051610228929190610987565b610284610263366004610928565b60408051606081018252600080825260208201819052918101829052915091565b6040516102289291906109b5565b6101ea6102a0366004610ad5565b50505050505050565b6102c26102b7366004610b9f565b600095945050505050565b6040519015158152602001610228565b6102e66102e0366004610928565b50600090565b6040516102289190610cb4565b60005b604051908152602001610228565b6040805160008082526020820181905291810191909152606001610228565b61032b610469565b6040516001600160a01b039091168152602001610228565b610356610351366004610928565b610521565b60405163ffffffff9091168152602001610228565b6102f6610531565b61037b6105e4565b6040516102289190610cce565b6101ea610396366004610ce1565b5050565b6101ea6103a8366004610928565b610676565b600061032b565b6102c26106a0565b604080516000808252602082015201610228565b610356610753565b6101ea610806565b6103f66103ee366004610d1a565b600080915091565b604080516bffffffffffffffffffffffff9093168352602083019190915201610228565b61037b610428366004610928565b50606090565b6102c261043c366004610d37565b610811565b6101ea61044f3660046108ab565b61081b565b6101ea610462366004610d37565b610834565b565b600080805461047790610d74565b1590506102e0576000805461048b90610d74565b80601f01602080910402602001604051908101604052809291908181526020018280546104b790610d74565b80156105045780601f106104d957610100808354040283529160200191610504565b820191906000526020600020905b8154815290600101906020018083116104e757829003601f168201915b505050505080602001905181019061051c9190610dae565b905090565b600061052b610753565b92915050565b600080805461053f90610d74565b1590506102e0576000805461055390610d74565b80601f016020809104026020016040519081016040528092919081815260200182805461057f90610d74565b80156105cc5780601f106105a1576101008083540402835291602001916105cc565b820191906000526020600020905b8154815290600101906020018083116105af57829003601f168201915b505050505080602001905181019061051c9190610dcb565b6060600080546105f390610d74565b80601f016020809104026020016040519081016040528092919081815260200182805461061f90610d74565b801561066c5780601f106106415761010080835404028352916020019161066c565b820191906000526020600020905b81548152906001019060200180831161064f57829003601f168201915b5050505050905090565b6040805160208101839052015b604051602081830303815290604052600090816103969190610e33565b60008080546106ae90610d74565b1590506102e057600080546106c290610d74565b80601f01602080910402602001604051908101604052809291908181526020018280546106ee90610d74565b801561073b5780601f106107105761010080835404028352916020019161073b565b820191906000526020600020905b81548152906001019060200180831161071e57829003601f168201915b505050505080602001905181019061051c9190610ef3565b600080805461076190610d74565b1590506102e0576000805461077590610d74565b80601f01602080910402602001604051908101604052809291908181526020018280546107a190610d74565b80156107ee5780601f106107c3576101008083540402835291602001916107ee565b820191906000526020600020905b8154815290600101906020018083116107d157829003601f168201915b505050505080602001905181019061051c9190610f15565b610467600080610840565b600061052b6106a0565b604080516001600160a01b038316602082015201610683565b60006103968282610e33565b50805461084c90610d74565b6000825580601f1061085c575050565b601f01602090049060005260206000209081019061087a919061087d565b50565b5b80821115610892576000815560010161087e565b5090565b6001600160a01b038116811461087a57600080fd5b6000602082840312156108bd57600080fd5b81356108c881610896565b9392505050565b634e487b7160e01b600052602160045260246000fd5b8051600681106108f7576108f76108cf565b825260208181015163ffffffff9081169184019190915260409182015116910152565b6060810161052b82846108e5565b60006020828403121561093a57600080fd5b5035919050565b6000815180845260005b818110156109675760208185018101518683018201520161094b565b506000602082860101526020601f19601f83011685010191505092915050565b60408152600061099a6040830185610941565b82810360208401526109ac8185610941565b95945050505050565b6001600160a01b0383168152608081016108c860208301846108e5565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610a1157610a116109d2565b604052919050565b600082601f830112610a2a57600080fd5b813567ffffffffffffffff811115610a4457610a446109d2565b610a57601f8201601f19166020016109e8565b818152846020838601011115610a6c57600080fd5b816020850160208301376000918101602001919091529392505050565b60008083601f840112610a9b57600080fd5b50813567ffffffffffffffff811115610ab357600080fd5b6020830191508360208260051b8501011115610ace57600080fd5b9250929050565b600080600080600080600060a0888a031215610af057600080fd5b873567ffffffffffffffff80821115610b0857600080fd5b610b148b838c01610a19565b985060208a0135915080821115610b2a57600080fd5b610b368b838c01610a89565b909850965060408a0135915080821115610b4f57600080fd5b610b5b8b838c01610a89565b909650945060608a0135935060808a013591508082168214610b7c57600080fd5b508091505092959891949750929550565b63ffffffff8116811461087a57600080fd5b600080600080600060a08688031215610bb757600080fd5b8535610bc281610b8d565b94506020868101359450604087013567ffffffffffffffff80821115610be757600080fd5b610bf38a838b01610a19565b9550606089013594506080890135915080821115610c1057600080fd5b818901915089601f830112610c2457600080fd5b813581811115610c3657610c366109d2565b8060051b9150610c478483016109e8565b818152918301840191848101908c841115610c6157600080fd5b938501935b83851015610ca157843592506fffffffffffffffffffffffffffffffff83168314610c915760008081fd5b8282529385019390850190610c66565b8096505050505050509295509295909350565b6020810160038310610cc857610cc86108cf565b91905290565b6020815260006108c86020830184610941565b60008060408385031215610cf457600080fd5b8235610cff81610b8d565b91506020830135610d0f81610b8d565b809150509250929050565b600060208284031215610d2c57600080fd5b81356108c881610b8d565b600060208284031215610d4957600080fd5b813567ffffffffffffffff811115610d6057600080fd5b610d6c84828501610a19565b949350505050565b600181811c90821680610d8857607f821691505b602082108103610da857634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610dc057600080fd5b81516108c881610896565b600060208284031215610ddd57600080fd5b5051919050565b601f821115610e2e57600081815260208120601f850160051c81016020861015610e0b5750805b601f850160051c820191505b81811015610e2a57828155600101610e17565b5050505b505050565b815167ffffffffffffffff811115610e4d57610e4d6109d2565b610e6181610e5b8454610d74565b84610de4565b602080601f831160018114610e965760008415610e7e5750858301515b600019600386901b1c1916600185901b178555610e2a565b600085815260208120601f198616915b82811015610ec557888601518255948401946001909101908401610ea6565b5085821015610ee35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215610f0557600080fd5b815180151581146108c857600080fd5b600060208284031215610f2757600080fd5b81516108c881610b8d56fea2646970667358221220cef98e77e57d75001bdd0588b6600d6905379f2fb0c6dc82d8cbb96711da921664736f6c63430008110033",
    "sourceMap": "330:1007:132:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;377:43:139;;609:81:136;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;609:81:136;;;;;;;;:::i;:::-;;;;;;;;933:116:132;;;;;;:::i;:::-;995:23;1020:25;933:116;;;;;;;;;;;;:::i;696:100:136:-;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;752:13:136;-1:-1:-1;;;;;;;;;;;;;;;696:100:136;;;;;;;;;;;;:::i;426:198:139:-;;;;;;:::i;:::-;;;;;;;;;637:220:132;;;;;;:::i;:::-;837:16;637:220;;;;;;;;;;;6999:14:200;;6992:22;6974:41;;6962:2;6947:18;637:220:132;6834:187:200;885:91:139;;;;;;:::i;:::-;-1:-1:-1;952:20:139;;885:91;;;;;;;;:::i;863:64:132:-;916:7;863:64;;;7612:25:200;;;7600:2;7585:18;863:64:132;7466:177:200;1160:110:132;;;;1205:19;7875:34:200;;;7940:2;7925:18;;7918:43;;;7977:18;;;7970:51;;;;7832:2;7817:18;1160:110:132;7648:379:200;776:170:137;;;:::i;:::-;;;-1:-1:-1;;;;;8196:32:200;;;8178:51;;8166:2;8151:18;776:170:137;8032:203:200;630:124:139;;;;;;:::i;:::-;;:::i;:::-;;;8414:10:200;8402:23;;;8384:42;;8372:2;8357:18;630:124:139;8240:192:200;1114:158:137;;;:::i;664:106::-;;;:::i;:::-;;;;;;;:::i;407:75:136:-;;;;;;:::i;:::-;;;;338:105:137;;;;;;:::i;:::-;;:::i;488:58:136:-;916:7:132;488:58:136;863:64:132;952:156:137;;;:::i;551:80:132:-;;;;594:15;9392:41:200;;;9464:2;9449:18;;9442:50;9365:18;551:80:132;9230:268:200;1278:158:137;;;:::i;250:82::-;;;:::i;1055:99:132:-;;;;;;:::i;:::-;1113:15;1130:20;1055:99;;;;;;;;9985:26:200;9973:39;;;9955:58;;10044:2;10029:18;;10022:34;;;;9928:18;1055:99:132;9753:309:200;982:89:139;;;;;;:::i;:::-;-1:-1:-1;1050:17:139;;982:89;760:119;;;;;;:::i;:::-;;:::i;449:105:137:-;;;;;;:::i;:::-;;:::i;560:98::-;;;;;;:::i;:::-;;:::i;377:43:139:-;:::o;776:170:137:-;830:7;856:16;:23;;;;;:::i;:::-;:28;;-1:-1:-1;856:83:137;;911:16;900:39;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;849:90;;776:170;:::o;630:124:139:-;691:15;725:22;:20;:22::i;:::-;718:29;630:124;-1:-1:-1;;630:124:139:o;1114:158:137:-;1165:7;1191:16;:23;;;;;:::i;:::-;:28;;-1:-1:-1;1191:74:137;;1237:16;1226:39;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;664:106::-;716:12;747:16;740:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;664:106;:::o;338:105::-;419:17;;;;;;7612:25:200;;;7585:18;419:17:137;;;;;;;;;;;;;400:16;:36;;;;;;:::i;952:156::-;1003:4;1026:16;:23;;;;;:::i;:::-;:28;;-1:-1:-1;1026:75:137;;1076:16;1065:36;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1278:158::-;1331:6;1356:16;:23;;;;;:::i;:::-;:28;;-1:-1:-1;1356:73:137;;1402:16;1391:38;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;250:82::-;302:23;309:16;;302:23;:::i;760:119:139:-;821:12;852:20;:18;:20::i;449:105:137:-;530:17;;;-1:-1:-1;;;;;8196:32:200;;530:17:137;;;8178:51:200;8151:18;530:17:137;8032:203:200;560:98:137;627:16;:24;646:5;627:16;:24;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;14:131:200:-;-1:-1:-1;;;;;89:31:200;;79:42;;69:70;;135:1;132;125:12;150:247;209:6;262:2;250:9;241:7;237:23;233:32;230:52;;;278:1;275;268:12;230:52;317:9;304:23;336:31;361:5;336:31;:::i;:::-;386:5;150:247;-1:-1:-1;;;150:247:200:o;402:127::-;463:10;458:3;454:20;451:1;444:31;494:4;491:1;484:15;518:4;515:1;508:15;534:369;615:5;609:12;647:1;643:2;640:9;630:43;;653:18;;:::i;:::-;682:15;;743:4;732:16;;;726:23;768:10;810:21;;;794:14;;;787:45;;;;885:4;874:16;;;868:23;864:32;848:14;;841:56;534:369::o;908:260::-;1102:2;1087:18;;1114:48;1091:9;1144:6;1114:48;:::i;1173:180::-;1232:6;1285:2;1273:9;1264:7;1260:23;1256:32;1253:52;;;1301:1;1298;1291:12;1253:52;-1:-1:-1;1324:23:200;;1173:180;-1:-1:-1;1173:180:200:o;1358:422::-;1399:3;1437:5;1431:12;1464:6;1459:3;1452:19;1489:1;1499:162;1513:6;1510:1;1507:13;1499:162;;;1575:4;1631:13;;;1627:22;;1621:29;1603:11;;;1599:20;;1592:59;1528:12;1499:162;;;1503:3;1706:1;1699:4;1690:6;1685:3;1681:16;1677:27;1670:38;1769:4;1762:2;1758:7;1753:2;1745:6;1741:15;1737:29;1732:3;1728:39;1724:50;1717:57;;;1358:422;;;;:::o;1785:377::-;1978:2;1967:9;1960:21;1941:4;2004:44;2044:2;2033:9;2029:18;2021:6;2004:44;:::i;:::-;2096:9;2088:6;2084:22;2079:2;2068:9;2064:18;2057:50;2124:32;2149:6;2141;2124:32;:::i;:::-;2116:40;1785:377;-1:-1:-1;;;;;1785:377:200:o;2167:358::-;-1:-1:-1;;;;;2420:32:200;;2402:51;;2389:3;2374:19;;2462:57;2515:2;2500:18;;2492:6;2462:57;:::i;2530:127::-;2591:10;2586:3;2582:20;2579:1;2572:31;2622:4;2619:1;2612:15;2646:4;2643:1;2636:15;2662:275;2733:2;2727:9;2798:2;2779:13;;-1:-1:-1;;2775:27:200;2763:40;;2833:18;2818:34;;2854:22;;;2815:62;2812:88;;;2880:18;;:::i;:::-;2916:2;2909:22;2662:275;;-1:-1:-1;2662:275:200:o;2942:530::-;2984:5;3037:3;3030:4;3022:6;3018:17;3014:27;3004:55;;3055:1;3052;3045:12;3004:55;3091:6;3078:20;3117:18;3113:2;3110:26;3107:52;;;3139:18;;:::i;:::-;3183:55;3226:2;3207:13;;-1:-1:-1;;3203:27:200;3232:4;3199:38;3183:55;:::i;:::-;3263:2;3254:7;3247:19;3309:3;3302:4;3297:2;3289:6;3285:15;3281:26;3278:35;3275:55;;;3326:1;3323;3316:12;3275:55;3391:2;3384:4;3376:6;3372:17;3365:4;3356:7;3352:18;3339:55;3439:1;3414:16;;;3432:4;3410:27;3403:38;;;;3418:7;2942:530;-1:-1:-1;;;2942:530:200:o;3477:367::-;3540:8;3550:6;3604:3;3597:4;3589:6;3585:17;3581:27;3571:55;;3622:1;3619;3612:12;3571:55;-1:-1:-1;3645:20:200;;3688:18;3677:30;;3674:50;;;3720:1;3717;3710:12;3674:50;3757:4;3749:6;3745:17;3733:29;;3817:3;3810:4;3800:6;3797:1;3793:14;3785:6;3781:27;3777:38;3774:47;3771:67;;;3834:1;3831;3824:12;3771:67;3477:367;;;;;:::o;3849:1197::-;4006:6;4014;4022;4030;4038;4046;4054;4107:3;4095:9;4086:7;4082:23;4078:33;4075:53;;;4124:1;4121;4114:12;4075:53;4164:9;4151:23;4193:18;4234:2;4226:6;4223:14;4220:34;;;4250:1;4247;4240:12;4220:34;4273:49;4314:7;4305:6;4294:9;4290:22;4273:49;:::i;:::-;4263:59;;4375:2;4364:9;4360:18;4347:32;4331:48;;4404:2;4394:8;4391:16;4388:36;;;4420:1;4417;4410:12;4388:36;4459:72;4523:7;4512:8;4501:9;4497:24;4459:72;:::i;:::-;4550:8;;-1:-1:-1;4433:98:200;-1:-1:-1;4638:2:200;4623:18;;4610:32;;-1:-1:-1;4654:16:200;;;4651:36;;;4683:1;4680;4673:12;4651:36;4722:72;4786:7;4775:8;4764:9;4760:24;4722:72;:::i;:::-;4813:8;;-1:-1:-1;4696:98:200;-1:-1:-1;4895:2:200;4880:18;;4867:32;;-1:-1:-1;4949:3:200;4934:19;;4921:33;;-1:-1:-1;4983:14:200;;;4973:25;;4963:53;;5012:1;5009;5002:12;4963:53;;5035:5;5025:15;;;3849:1197;;;;;;;;;;:::o;5051:121::-;5136:10;5129:5;5125:22;5118:5;5115:33;5105:61;;5162:1;5159;5152:12;5177:1652;5335:6;5343;5351;5359;5367;5420:3;5408:9;5399:7;5395:23;5391:33;5388:53;;;5437:1;5434;5427:12;5388:53;5476:9;5463:23;5495:30;5519:5;5495:30;:::i;:::-;5544:5;-1:-1:-1;5568:2:200;5602:18;;;5589:32;;-1:-1:-1;5672:2:200;5657:18;;5644:32;5695:18;5725:14;;;5722:34;;;5752:1;5749;5742:12;5722:34;5775:49;5816:7;5807:6;5796:9;5792:22;5775:49;:::i;:::-;5765:59;;5871:2;5860:9;5856:18;5843:32;5833:42;;5928:3;5917:9;5913:19;5900:33;5884:49;;5958:2;5948:8;5945:16;5942:36;;;5974:1;5971;5964:12;5942:36;6012:8;6001:9;5997:24;5987:34;;6059:7;6052:4;6048:2;6044:13;6040:27;6030:55;;6081:1;6078;6071:12;6030:55;6117:2;6104:16;6139:2;6135;6132:10;6129:36;;;6145:18;;:::i;:::-;6191:2;6188:1;6184:10;6174:20;;6214:28;6238:2;6234;6230:11;6214:28;:::i;:::-;6276:15;;;6346:11;;;6342:20;;;6307:12;;;;6374:19;;;6371:39;;;6406:1;6403;6396:12;6371:39;6430:11;;;;6450:349;6466:6;6461:3;6458:15;6450:349;;;6548:3;6535:17;6520:32;;6600:34;6591:7;6587:48;6578:7;6575:61;6565:159;;6678:1;6707:2;6703;6696:14;6565:159;6737:20;;;6483:12;;;;6777;;;;6450:349;;;6818:5;6808:15;;;;;;;;5177:1652;;;;;;;;:::o;7211:250::-;7362:2;7347:18;;7395:1;7384:13;;7374:47;;7401:18;;:::i;:::-;7430:25;;;7211:250;:::o;8619:217::-;8766:2;8755:9;8748:21;8729:4;8786:44;8826:2;8815:9;8811:18;8803:6;8786:44;:::i;8841:384::-;8907:6;8915;8968:2;8956:9;8947:7;8943:23;8939:32;8936:52;;;8984:1;8981;8974:12;8936:52;9023:9;9010:23;9042:30;9066:5;9042:30;:::i;:::-;9091:5;-1:-1:-1;9148:2:200;9133:18;;9120:32;9161;9120;9161;:::i;:::-;9212:7;9202:17;;;8841:384;;;;;:::o;9503:245::-;9561:6;9614:2;9602:9;9593:7;9589:23;9585:32;9582:52;;;9630:1;9627;9620:12;9582:52;9669:9;9656:23;9688:30;9712:5;9688:30;:::i;10067:320::-;10135:6;10188:2;10176:9;10167:7;10163:23;10159:32;10156:52;;;10204:1;10201;10194:12;10156:52;10244:9;10231:23;10277:18;10269:6;10266:30;10263:50;;;10309:1;10306;10299:12;10263:50;10332:49;10373:7;10364:6;10353:9;10349:22;10332:49;:::i;:::-;10322:59;10067:320;-1:-1:-1;;;;10067:320:200:o;10392:380::-;10471:1;10467:12;;;;10514;;;10535:61;;10589:4;10581:6;10577:17;10567:27;;10535:61;10642:2;10634:6;10631:14;10611:18;10608:38;10605:161;;10688:10;10683:3;10679:20;10676:1;10669:31;10723:4;10720:1;10713:15;10751:4;10748:1;10741:15;10605:161;;10392:380;;;:::o;10777:259::-;10855:6;10908:2;10896:9;10887:7;10883:23;10879:32;10876:52;;;10924:1;10921;10914:12;10876:52;10956:9;10950:16;10975:31;11000:5;10975:31;:::i;11041:184::-;11111:6;11164:2;11152:9;11143:7;11139:23;11135:32;11132:52;;;11180:1;11177;11170:12;11132:52;-1:-1:-1;11203:16:200;;11041:184;-1:-1:-1;11041:184:200:o;11355:544::-;11456:2;11451:3;11448:11;11445:448;;;11492:1;11517:5;11513:2;11506:17;11562:4;11558:2;11548:19;11632:2;11620:10;11616:19;11613:1;11609:27;11603:4;11599:38;11668:4;11656:10;11653:20;11650:47;;;-1:-1:-1;11691:4:200;11650:47;11746:2;11741:3;11737:12;11734:1;11730:20;11724:4;11720:31;11710:41;;11801:82;11819:2;11812:5;11809:13;11801:82;;;11864:17;;;11845:1;11834:13;11801:82;;;11805:3;;;11445:448;11355:544;;;:::o;12075:1348::-;12199:3;12193:10;12226:18;12218:6;12215:30;12212:56;;;12248:18;;:::i;:::-;12277:96;12366:6;12326:38;12358:4;12352:11;12326:38;:::i;:::-;12320:4;12277:96;:::i;:::-;12428:4;;12492:2;12481:14;;12509:1;12504:662;;;;13210:1;13227:6;13224:89;;;-1:-1:-1;13279:19:200;;;13273:26;13224:89;-1:-1:-1;;12032:1:200;12028:11;;;12024:24;12020:29;12010:40;12056:1;12052:11;;;12007:57;13326:81;;12474:943;;12504:662;11302:1;11295:14;;;11339:4;11326:18;;-1:-1:-1;;12540:20:200;;;12657:236;12671:7;12668:1;12665:14;12657:236;;;12760:19;;;12754:26;12739:42;;12852:27;;;;12820:1;12808:14;;;;12687:19;;12657:236;;;12661:3;12921:6;12912:7;12909:19;12906:201;;;12982:19;;;12976:26;-1:-1:-1;;13065:1:200;13061:14;;;13077:3;13057:24;13053:37;13049:42;13034:58;13019:74;;12906:201;-1:-1:-1;;;;;13153:1:200;13137:14;;;13133:22;13120:36;;-1:-1:-1;12075:1348:200:o;13428:277::-;13495:6;13548:2;13536:9;13527:7;13523:23;13519:32;13516:52;;;13564:1;13561;13554:12;13516:52;13596:9;13590:16;13649:5;13642:13;13635:21;13628:5;13625:32;13615:60;;13671:1;13668;13661:12;13710:249;13779:6;13832:2;13820:9;13811:7;13807:23;13803:32;13800:52;;;13848:1;13845;13838:12;13800:52;13880:9;13874:16;13899:30;13923:5;13899:30;:::i",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])": "39fe2736",
    "agentManager()": "7622f78d",
    "agentStatus(address)": "28f3fac9",
    "attestationsAmount()": "3cf7b120",
    "deleteMockReturnValue()": "b81442e0",
    "destStatus()": "40989152",
    "execute(bytes,bytes32[],bytes32[],uint256,uint64)": "32ff14d2",
    "getAgent(uint256)": "2de5aaf7",
    "getAttestation(uint256)": "29be4db2",
    "getAttestationNonce(bytes32)": "4f127567",
    "getGasData(uint32)": "d0dd0675",
    "getReturnValueAddress()": "4289cf75",
    "getReturnValueBool()": "76fae198",
    "getReturnValueBytes()": "5980330d",
    "getReturnValueUint()": "504730ab",
    "getReturnValueUint32()": "b78973d4",
    "inbox()": "fb0e722b",
    "isValidReceipt(bytes)": "e2f006f7",
    "messageReceipt(bytes32)": "daa74a9e",
    "messageStatus(bytes32)": "3c6cf473",
    "nextAgentRoot()": "55252dd1",
    "openDispute(uint32,uint32)": "a2155c34",
    "passAgentRoot()": "a554d1e3",
    "resolveDispute(uint32,uint32)": "61169218",
    "setMockReturnValue(address)": "e60f5f6a",
    "setMockReturnValue(bytes)": "f05b3351",
    "setMockReturnValue(uint256)": "714141de",
    "testAgentSecuredMock()": "4a4a26a2",
    "testBaseMock()": "b26406a0",
    "testDestinationMock()": "c897f01d",
    "testExecutionHubMock()": "06454f74"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"sigIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"attPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"agentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"ChainGas[]\",\"name\":\"snapGas\",\"type\":\"uint128[]\"}],\"name\":\"acceptAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"wasAccepted\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attestationsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteMockReturnValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destStatus\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"snapRootTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"agentRootTime\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"msgPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"originProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"snapProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAttestation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"attPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"getAttestationNonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"attNonce\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"getGasData\",\"outputs\":[{\"internalType\":\"GasData\",\"name\":\"gasData\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"dataMaturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReturnValueAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReturnValueBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReturnValueBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReturnValueUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReturnValueUint32\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isValidReceipt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"messageReceipt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"messageStatus\",\"outputs\":[{\"internalType\":\"enum MessageStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextAgentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passAgentRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"rootPassed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rootPending\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"slashedIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rivalIndex\",\"type\":\"uint32\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMockReturnValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setMockReturnValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"setMockReturnValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAgentSecuredMock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testBaseMock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testDestinationMock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testExecutionHubMock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])\":{\"params\":{\"agentRoot\":\"Agent Merkle Root from the Attestation\",\"attPayload\":\"Raw payload with Attestation data\",\"notaryIndex\":\"Index of Attestation Notary in Agent Merkle Tree\",\"sigIndex\":\"Index of stored Notary signature\",\"snapGas\":\"Gas data for each chain in the Attestation's snapshot\"},\"returns\":{\"wasAccepted\":\"     Whether the Attestation was accepted\"}},\"agentStatus(address)\":{\"details\":\"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"_0\":\"Status for the given agent: (flag, domain, index).\"}},\"destStatus()\":{\"returns\":{\"agentRootTime\":\"   Timestamp when latest agent root was accepted\",\"notaryIndex\":\"     Index of Notary who signed the latest agent root\",\"snapRootTime\":\"    Timestamp when latest snapshot root was accepted\"}},\"execute(bytes,bytes32[],bytes32[],uint256,uint64)\":{\"details\":\"Will revert if any of these is true:  - Message payload is not properly formatted.  - Snapshot root (reconstructed from message hash and proofs) is unknown  - Snapshot root is known, but was submitted by an inactive Notary  - Snapshot root is known, but optimistic period for a message hasn't passed  - Provided gas limit is lower than the one requested in the message  - Recipient doesn't implement a `handle` method (refer to IMessageRecipient.sol)  - Recipient reverted upon receiving a message Note: refer to libs/memory/State.sol for details about Origin State's sub-leafs.\",\"params\":{\"gasLimit\":\"Gas limit for message execution\",\"msgPayload\":\"Raw payload with a formatted message to execute\",\"originProof\":\"Proof of inclusion of message in the Origin Merkle Tree\",\"snapProof\":\"Proof of inclusion of Origin State's Left Leaf into Snapshot Merkle Tree\",\"stateIndex\":\"Index of Origin State in the Snapshot\"}},\"getAgent(uint256)\":{\"details\":\"Will return empty values if agent with given index doesn't exist.\",\"params\":{\"index\":\"Agent index in the Agent Merkle Tree\"},\"returns\":{\"agent\":\"   Agent address\",\"status\":\"  Status for the given agent: (flag, domain, index)\"}},\"getAttestation(uint256)\":{\"details\":\"Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit. Will return an empty signature if this contract is deployed on Synapse Chain.\",\"params\":{\"index\":\"Attestation index\"},\"returns\":{\"attPayload\":\"      Raw payload with Attestation data\",\"attSignature\":\"    Notary signature for the reported attestation\"}},\"getGasData(uint32)\":{\"details\":\"Will return empty values if there is no data for the domain, or if the notary who provided the data is in dispute.\",\"params\":{\"domain\":\"Domain for the chain\"},\"returns\":{\"dataMaturity\":\"    Gas data age in seconds\",\"gasData\":\"         Gas data for the chain\"}},\"inbox()\":{\"details\":\"Inbox passes verified agent statements to `IAgentSecured` contract.\"},\"messageReceipt(bytes32)\":{\"details\":\"Notaries could derive the tips, and the tips proof using the message payload, and submit the signed receipt with the proof of tips to `Summit` in order to initiate tips distribution.\",\"params\":{\"messageHash\":\"Hash of the message payload\"},\"returns\":{\"data\":\"            Formatted payload with the message execution receipt\"}},\"messageStatus(bytes32)\":{\"params\":{\"messageHash\":\"Hash of the message payload\"},\"returns\":{\"status\":\"          Message execution status\"}},\"openDispute(uint32,uint32)\":{\"params\":{\"guardIndex\":\"Index of the Guard in the Agent Merkle Tree\",\"notaryIndex\":\"Index of the Notary in the Agent Merkle Tree\"}},\"passAgentRoot()\":{\"details\":\"Will do nothing, if root optimistic period is not over. Note: both returned values can not be true.\",\"returns\":{\"rootPassed\":\"  Whether the agent merkle root was passed to LightManager\",\"rootPending\":\" Whether there is a pending agent merkle root left\"}},\"resolveDispute(uint32,uint32)\":{\"params\":{\"rivalIndex\":\"Index of the their Dispute Rival in the Agent Merkle Tree\",\"slashedIndex\":\"Index of the slashed agent in the Agent Merkle Tree\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])\":{\"notice\":\"Accepts an attestation, which local `AgentManager` verified to have been signed by an active Notary for this chain. > Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain. - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree. - Messages coming from chains included in the Attestation's snapshot could be proven. - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken. > Will revert if any of these is true: > - Called by anyone other than local `AgentManager`. > - Attestation payload is not properly formatted. > - Attestation signer is in Dispute. > - Attestation's snapshot root has been previously submitted. Note: agentRoot and snapGas have been verified by the local `AgentManager`.\"},\"agentManager()\":{\"notice\":\"Returns the address of the local AgentManager contract, which is treated as the \\\"source of truth\\\" for agent statuses.\"},\"agentStatus(address)\":{\"notice\":\"Returns (flag, domain, index) for a given agent. See Structures.sol for details.\"},\"attestationsAmount()\":{\"notice\":\"Returns the total amount of Notaries attestations that have been accepted.\"},\"destStatus()\":{\"notice\":\"Returns status of Destination contract as far as snapshot/agent roots are concerned\"},\"execute(bytes,bytes32[],bytes32[],uint256,uint64)\":{\"notice\":\"Attempts to prove inclusion of message into one of Snapshot Merkle Trees, previously submitted to this contract in a form of a signed Attestation. Proven message is immediately executed by passing its contents to the specified recipient.\"},\"getAgent(uint256)\":{\"notice\":\"Returns agent address and their current status for a given agent index.\"},\"getAttestation(uint256)\":{\"notice\":\"Returns a Notary-signed attestation with a given index. > Index refers to the list of all attestations accepted by this contract.\"},\"getGasData(uint32)\":{\"notice\":\"Returns the gas data for a given chain from the latest accepted attestation with that chain.\"},\"inbox()\":{\"notice\":\"Returns the address of the local Inbox contract, which is treated as the \\\"source of truth\\\" for agent-signed statements.\"},\"messageReceipt(bytes32)\":{\"notice\":\"Returns a formatted payload with the message receipt.\"},\"messageStatus(bytes32)\":{\"notice\":\"Returns message execution status: None/Failed/Success.\"},\"nextAgentRoot()\":{\"notice\":\"Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\"},\"openDispute(uint32,uint32)\":{\"notice\":\"Local AgentManager should call this function to indicate that a dispute between a Guard and a Notary has been opened.\"},\"passAgentRoot()\":{\"notice\":\"Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\"},\"resolveDispute(uint32,uint32)\":{\"notice\":\"Local AgentManager should call this function to indicate that a dispute has been resolved due to one of the agents being slashed. > `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\"},\"testAgentSecuredMock()\":{\"notice\":\"Prevents this contract from being included in the coverage report\"},\"testBaseMock()\":{\"notice\":\"Prevents this contract from being included in the coverage report\"},\"testDestinationMock()\":{\"notice\":\"Prevents this contract from being included in the coverage report\"},\"testExecutionHubMock()\":{\"notice\":\"Prevents this contract from being included in the coverage report\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/mocks/DestinationMock.t.sol\":\"DestinationMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/interfaces/IAgentSecured.sol\":{\"keccak256\":\"0x9a7efecf8fe37cc8245e3b0e3f5d6d6ee056cdd97ccb5631ff6347bdfc9fc889\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7877d223162a76d3fe75490069719b3a4f14cd66fc42bfa915f2813390b7d2aa\",\"dweb:/ipfs/QmZhE1rnffA9bbtkNAwVk6iitMPk14gHbK56mdeHQEPhxj\"]},\"contracts/interfaces/IExecutionHub.sol\":{\"keccak256\":\"0x98f6ff39ecb926b480474d122350d753ca18358ca4d18d36d1850ec7af7ae6f0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36485341a0ed70b0f151b258124f6a0db003f5d37af22b8bea65b8d5249a252d\",\"dweb:/ipfs/QmfBEDFSGwnSjTyv2AZuuUDjrqWRvacyCx46dXegioWMDL\"]},\"contracts/interfaces/InterfaceDestination.sol\":{\"keccak256\":\"0x708371d239580f8e6dc44e790fd32f47e074cbfb8ae9e75609adbc0de303678c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5061c85c3779304f5c3919d2b1bc6620d1029a4ead7186c3f3f5b409a9bd855\",\"dweb:/ipfs/QmW4Hrz2NGMCRV2Rqv22G4xArsR4jUZtNr1garSR8AZud6\"]},\"contracts/libs/Errors.sol\":{\"keccak256\":\"0xe9a2059a2ad04e5a8ce5a6fcd091541dcd1b745edb1ce36fd97b188fe8a24011\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36c91869720c13e9f207ef4a96147c1bcdc75574fb84eacfd8a5a4efe4e5210b\",\"dweb:/ipfs/QmRuYYPnsuES87cQTAag63gdVf22pL7UjF9pvzBt87iGyB\"]},\"contracts/libs/Structures.sol\":{\"keccak256\":\"0x3eaa63f5d9aac514328111e8fdd037dc6fdb18af7541a8287deeacd2e44f7137\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://633619910c74a0685ef2993a2e7cc44088929121a15c8a9fc26c9bbadffbda71\",\"dweb:/ipfs/QmZceJv6UntiMWW4JZHbmytLsqXshbuav8yoiritksvqqy\"]},\"contracts/libs/stack/GasData.sol\":{\"keccak256\":\"0x2007fd4b97cf33bfe4aa7dc6ac887af87b4010ec9834636b4dd5685582ac26cb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b54ca8b659d63ef7138c5b3b243190ca19b1e893b7b49dee1f8790d55b9e691\",\"dweb:/ipfs/Qmc2FGb16uosZ5kvyEK2onpWVPvWeE9X72xNWeJw8CbweD\"]},\"contracts/libs/stack/Number.sol\":{\"keccak256\":\"0xe4e0d66268eb69304cda001a3e03242e9f4af8680830c92b3d6ebe83e96acb96\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f70c28a10a2d34849614ff51c74f8c6107093b4d01eb865b2ab0d4efe9294cfd\",\"dweb:/ipfs/QmQbXCnHfPJjdNCK1UuQ2ShNan6H7j5s9DLS4HygQ5wfP5\"]},\"test/mocks/DestinationMock.t.sol\":{\"keccak256\":\"0x6db0ce04d27bed72bef2a2a04266cd238250bc6efbcac0373b2649426bdd3da8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e291232f9e3fd59426cd9e16665c41feb66f747866689de967669702c19a3c7\",\"dweb:/ipfs/QmXR2ovSN5u7NR7E4YMdjuBVEvh1b13Can5JDEBW1zkefn\"]},\"test/mocks/base/AgentSecuredMock.t.sol\":{\"keccak256\":\"0x7c74b961b7d06d65138f35d638b68be02046565479f09606bf099da0093eba36\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5faa5048684a4685809fec66813899f0c55f47ec27b39c7b0440c2083cd34e4c\",\"dweb:/ipfs/QmfL3CxnjPXHnD137ERbyLMTuAfJsJa3k7yft7VqYGdvqf\"]},\"test/mocks/base/BaseMock.t.sol\":{\"keccak256\":\"0x5d0ddef55a6d63ce25175fd2cefc00b9030e8f7247600220e67a33c3982b9697\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://96928ffa43cb650c3c594fa2d1459f2f44eea1f52fb988011a638e80b255d986\",\"dweb:/ipfs/QmXpFxAzvt9jaD4BsKGLJnBdHF1m4uvfB1iKt94mr3ryCJ\"]},\"test/mocks/hubs/ExecutionHubMock.t.sol\":{\"keccak256\":\"0x176e769388b8a77fd8db5dada6ba3814970b7800d3d52fd981b5cf3d8e308e88\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://04be69b573c225a37a734464e8bab6524fb2bd80c120268288706655ca0bf339\",\"dweb:/ipfs/Qmaa36Cg2R4CZweAoNyrpzQT1RukXZi9zS4Jgx9MRH8dK3\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "notaryIndex",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "sigIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "attPayload",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "agentRoot",
              "type": "bytes32"
            },
            {
              "internalType": "ChainGas[]",
              "name": "snapGas",
              "type": "uint128[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "acceptAttestation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "wasAccepted",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "agentManager",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "agentStatus",
          "outputs": [
            {
              "internalType": "struct AgentStatus",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "enum AgentFlag",
                  "name": "flag",
                  "type": "uint8"
                },
                {
                  "internalType": "uint32",
                  "name": "domain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "index",
                  "type": "uint32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "attestationsAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deleteMockReturnValue"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "destStatus",
          "outputs": [
            {
              "internalType": "uint40",
              "name": "snapRootTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "agentRootTime",
              "type": "uint40"
            },
            {
              "internalType": "uint32",
              "name": "notaryIndex",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "msgPayload",
              "type": "bytes"
            },
            {
              "internalType": "bytes32[]",
              "name": "originProof",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "snapProof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "stateIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "gasLimit",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "execute"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAgent",
          "outputs": [
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "struct AgentStatus",
              "name": "status",
              "type": "tuple",
              "components": [
                {
                  "internalType": "enum AgentFlag",
                  "name": "flag",
                  "type": "uint8"
                },
                {
                  "internalType": "uint32",
                  "name": "domain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "index",
                  "type": "uint32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAttestation",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "attPayload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "attSignature",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAttestationNonce",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "attNonce",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getGasData",
          "outputs": [
            {
              "internalType": "GasData",
              "name": "gasData",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "dataMaturity",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getReturnValueAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getReturnValueBool",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getReturnValueBytes",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getReturnValueUint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getReturnValueUint32",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "inbox",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isValidReceipt",
          "outputs": [
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "messageHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "messageReceipt",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "messageHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "messageStatus",
          "outputs": [
            {
              "internalType": "enum MessageStatus",
              "name": "status",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextAgentRoot",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "guardIndex",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "notaryIndex",
              "type": "uint32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "openDispute"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "passAgentRoot",
          "outputs": [
            {
              "internalType": "bool",
              "name": "rootPassed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "rootPending",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "slashedIndex",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "rivalIndex",
              "type": "uint32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "resolveDispute"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setMockReturnValue"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "value",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setMockReturnValue"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "value",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setMockReturnValue"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testAgentSecuredMock"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testBaseMock"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testDestinationMock"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "testExecutionHubMock"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])": {
            "params": {
              "agentRoot": "Agent Merkle Root from the Attestation",
              "attPayload": "Raw payload with Attestation data",
              "notaryIndex": "Index of Attestation Notary in Agent Merkle Tree",
              "sigIndex": "Index of stored Notary signature",
              "snapGas": "Gas data for each chain in the Attestation's snapshot"
            },
            "returns": {
              "wasAccepted": "     Whether the Attestation was accepted"
            }
          },
          "agentStatus(address)": {
            "details": "Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.",
            "params": {
              "agent": "Agent address"
            },
            "returns": {
              "_0": "Status for the given agent: (flag, domain, index)."
            }
          },
          "destStatus()": {
            "returns": {
              "agentRootTime": "   Timestamp when latest agent root was accepted",
              "notaryIndex": "     Index of Notary who signed the latest agent root",
              "snapRootTime": "    Timestamp when latest snapshot root was accepted"
            }
          },
          "execute(bytes,bytes32[],bytes32[],uint256,uint64)": {
            "details": "Will revert if any of these is true:  - Message payload is not properly formatted.  - Snapshot root (reconstructed from message hash and proofs) is unknown  - Snapshot root is known, but was submitted by an inactive Notary  - Snapshot root is known, but optimistic period for a message hasn't passed  - Provided gas limit is lower than the one requested in the message  - Recipient doesn't implement a `handle` method (refer to IMessageRecipient.sol)  - Recipient reverted upon receiving a message Note: refer to libs/memory/State.sol for details about Origin State's sub-leafs.",
            "params": {
              "gasLimit": "Gas limit for message execution",
              "msgPayload": "Raw payload with a formatted message to execute",
              "originProof": "Proof of inclusion of message in the Origin Merkle Tree",
              "snapProof": "Proof of inclusion of Origin State's Left Leaf into Snapshot Merkle Tree",
              "stateIndex": "Index of Origin State in the Snapshot"
            }
          },
          "getAgent(uint256)": {
            "details": "Will return empty values if agent with given index doesn't exist.",
            "params": {
              "index": "Agent index in the Agent Merkle Tree"
            },
            "returns": {
              "agent": "   Agent address",
              "status": "  Status for the given agent: (flag, domain, index)"
            }
          },
          "getAttestation(uint256)": {
            "details": "Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit. Will return an empty signature if this contract is deployed on Synapse Chain.",
            "params": {
              "index": "Attestation index"
            },
            "returns": {
              "attPayload": "      Raw payload with Attestation data",
              "attSignature": "    Notary signature for the reported attestation"
            }
          },
          "getGasData(uint32)": {
            "details": "Will return empty values if there is no data for the domain, or if the notary who provided the data is in dispute.",
            "params": {
              "domain": "Domain for the chain"
            },
            "returns": {
              "dataMaturity": "    Gas data age in seconds",
              "gasData": "         Gas data for the chain"
            }
          },
          "inbox()": {
            "details": "Inbox passes verified agent statements to `IAgentSecured` contract."
          },
          "messageReceipt(bytes32)": {
            "details": "Notaries could derive the tips, and the tips proof using the message payload, and submit the signed receipt with the proof of tips to `Summit` in order to initiate tips distribution.",
            "params": {
              "messageHash": "Hash of the message payload"
            },
            "returns": {
              "data": "            Formatted payload with the message execution receipt"
            }
          },
          "messageStatus(bytes32)": {
            "params": {
              "messageHash": "Hash of the message payload"
            },
            "returns": {
              "status": "          Message execution status"
            }
          },
          "openDispute(uint32,uint32)": {
            "params": {
              "guardIndex": "Index of the Guard in the Agent Merkle Tree",
              "notaryIndex": "Index of the Notary in the Agent Merkle Tree"
            }
          },
          "passAgentRoot()": {
            "details": "Will do nothing, if root optimistic period is not over. Note: both returned values can not be true.",
            "returns": {
              "rootPassed": "  Whether the agent merkle root was passed to LightManager",
              "rootPending": " Whether there is a pending agent merkle root left"
            }
          },
          "resolveDispute(uint32,uint32)": {
            "params": {
              "rivalIndex": "Index of the their Dispute Rival in the Agent Merkle Tree",
              "slashedIndex": "Index of the slashed agent in the Agent Merkle Tree"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])": {
            "notice": "Accepts an attestation, which local `AgentManager` verified to have been signed by an active Notary for this chain. > Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain. - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree. - Messages coming from chains included in the Attestation's snapshot could be proven. - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken. > Will revert if any of these is true: > - Called by anyone other than local `AgentManager`. > - Attestation payload is not properly formatted. > - Attestation signer is in Dispute. > - Attestation's snapshot root has been previously submitted. Note: agentRoot and snapGas have been verified by the local `AgentManager`."
          },
          "agentManager()": {
            "notice": "Returns the address of the local AgentManager contract, which is treated as the \"source of truth\" for agent statuses."
          },
          "agentStatus(address)": {
            "notice": "Returns (flag, domain, index) for a given agent. See Structures.sol for details."
          },
          "attestationsAmount()": {
            "notice": "Returns the total amount of Notaries attestations that have been accepted."
          },
          "destStatus()": {
            "notice": "Returns status of Destination contract as far as snapshot/agent roots are concerned"
          },
          "execute(bytes,bytes32[],bytes32[],uint256,uint64)": {
            "notice": "Attempts to prove inclusion of message into one of Snapshot Merkle Trees, previously submitted to this contract in a form of a signed Attestation. Proven message is immediately executed by passing its contents to the specified recipient."
          },
          "getAgent(uint256)": {
            "notice": "Returns agent address and their current status for a given agent index."
          },
          "getAttestation(uint256)": {
            "notice": "Returns a Notary-signed attestation with a given index. > Index refers to the list of all attestations accepted by this contract."
          },
          "getGasData(uint32)": {
            "notice": "Returns the gas data for a given chain from the latest accepted attestation with that chain."
          },
          "inbox()": {
            "notice": "Returns the address of the local Inbox contract, which is treated as the \"source of truth\" for agent-signed statements."
          },
          "messageReceipt(bytes32)": {
            "notice": "Returns a formatted payload with the message receipt."
          },
          "messageStatus(bytes32)": {
            "notice": "Returns message execution status: None/Failed/Success."
          },
          "nextAgentRoot()": {
            "notice": "Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over."
          },
          "openDispute(uint32,uint32)": {
            "notice": "Local AgentManager should call this function to indicate that a dispute between a Guard and a Notary has been opened."
          },
          "passAgentRoot()": {
            "notice": "Attempts to pass a quarantined Agent Merkle Root to a local Light Manager."
          },
          "resolveDispute(uint32,uint32)": {
            "notice": "Local AgentManager should call this function to indicate that a dispute has been resolved due to one of the agents being slashed. > `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute."
          },
          "testAgentSecuredMock()": {
            "notice": "Prevents this contract from being included in the coverage report"
          },
          "testBaseMock()": {
            "notice": "Prevents this contract from being included in the coverage report"
          },
          "testDestinationMock()": {
            "notice": "Prevents this contract from being included in the coverage report"
          },
          "testExecutionHubMock()": {
            "notice": "Prevents this contract from being included in the coverage report"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=node_modules/@openzeppelin/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "hardhat/=node_modules/hardhat/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "test/mocks/DestinationMock.t.sol": "DestinationMock"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/interfaces/IAgentSecured.sol": {
        "keccak256": "0x9a7efecf8fe37cc8245e3b0e3f5d6d6ee056cdd97ccb5631ff6347bdfc9fc889",
        "urls": [
          "bzz-raw://7877d223162a76d3fe75490069719b3a4f14cd66fc42bfa915f2813390b7d2aa",
          "dweb:/ipfs/QmZhE1rnffA9bbtkNAwVk6iitMPk14gHbK56mdeHQEPhxj"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IExecutionHub.sol": {
        "keccak256": "0x98f6ff39ecb926b480474d122350d753ca18358ca4d18d36d1850ec7af7ae6f0",
        "urls": [
          "bzz-raw://36485341a0ed70b0f151b258124f6a0db003f5d37af22b8bea65b8d5249a252d",
          "dweb:/ipfs/QmfBEDFSGwnSjTyv2AZuuUDjrqWRvacyCx46dXegioWMDL"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/InterfaceDestination.sol": {
        "keccak256": "0x708371d239580f8e6dc44e790fd32f47e074cbfb8ae9e75609adbc0de303678c",
        "urls": [
          "bzz-raw://e5061c85c3779304f5c3919d2b1bc6620d1029a4ead7186c3f3f5b409a9bd855",
          "dweb:/ipfs/QmW4Hrz2NGMCRV2Rqv22G4xArsR4jUZtNr1garSR8AZud6"
        ],
        "license": "MIT"
      },
      "contracts/libs/Errors.sol": {
        "keccak256": "0xe9a2059a2ad04e5a8ce5a6fcd091541dcd1b745edb1ce36fd97b188fe8a24011",
        "urls": [
          "bzz-raw://36c91869720c13e9f207ef4a96147c1bcdc75574fb84eacfd8a5a4efe4e5210b",
          "dweb:/ipfs/QmRuYYPnsuES87cQTAag63gdVf22pL7UjF9pvzBt87iGyB"
        ],
        "license": "MIT"
      },
      "contracts/libs/Structures.sol": {
        "keccak256": "0x3eaa63f5d9aac514328111e8fdd037dc6fdb18af7541a8287deeacd2e44f7137",
        "urls": [
          "bzz-raw://633619910c74a0685ef2993a2e7cc44088929121a15c8a9fc26c9bbadffbda71",
          "dweb:/ipfs/QmZceJv6UntiMWW4JZHbmytLsqXshbuav8yoiritksvqqy"
        ],
        "license": "MIT"
      },
      "contracts/libs/stack/GasData.sol": {
        "keccak256": "0x2007fd4b97cf33bfe4aa7dc6ac887af87b4010ec9834636b4dd5685582ac26cb",
        "urls": [
          "bzz-raw://8b54ca8b659d63ef7138c5b3b243190ca19b1e893b7b49dee1f8790d55b9e691",
          "dweb:/ipfs/Qmc2FGb16uosZ5kvyEK2onpWVPvWeE9X72xNWeJw8CbweD"
        ],
        "license": "MIT"
      },
      "contracts/libs/stack/Number.sol": {
        "keccak256": "0xe4e0d66268eb69304cda001a3e03242e9f4af8680830c92b3d6ebe83e96acb96",
        "urls": [
          "bzz-raw://f70c28a10a2d34849614ff51c74f8c6107093b4d01eb865b2ab0d4efe9294cfd",
          "dweb:/ipfs/QmQbXCnHfPJjdNCK1UuQ2ShNan6H7j5s9DLS4HygQ5wfP5"
        ],
        "license": "MIT"
      },
      "test/mocks/DestinationMock.t.sol": {
        "keccak256": "0x6db0ce04d27bed72bef2a2a04266cd238250bc6efbcac0373b2649426bdd3da8",
        "urls": [
          "bzz-raw://8e291232f9e3fd59426cd9e16665c41feb66f747866689de967669702c19a3c7",
          "dweb:/ipfs/QmXR2ovSN5u7NR7E4YMdjuBVEvh1b13Can5JDEBW1zkefn"
        ],
        "license": "MIT"
      },
      "test/mocks/base/AgentSecuredMock.t.sol": {
        "keccak256": "0x7c74b961b7d06d65138f35d638b68be02046565479f09606bf099da0093eba36",
        "urls": [
          "bzz-raw://5faa5048684a4685809fec66813899f0c55f47ec27b39c7b0440c2083cd34e4c",
          "dweb:/ipfs/QmfL3CxnjPXHnD137ERbyLMTuAfJsJa3k7yft7VqYGdvqf"
        ],
        "license": "MIT"
      },
      "test/mocks/base/BaseMock.t.sol": {
        "keccak256": "0x5d0ddef55a6d63ce25175fd2cefc00b9030e8f7247600220e67a33c3982b9697",
        "urls": [
          "bzz-raw://96928ffa43cb650c3c594fa2d1459f2f44eea1f52fb988011a638e80b255d986",
          "dweb:/ipfs/QmXpFxAzvt9jaD4BsKGLJnBdHF1m4uvfB1iKt94mr3ryCJ"
        ],
        "license": "MIT"
      },
      "test/mocks/hubs/ExecutionHubMock.t.sol": {
        "keccak256": "0x176e769388b8a77fd8db5dada6ba3814970b7800d3d52fd981b5cf3d8e308e88",
        "urls": [
          "bzz-raw://04be69b573c225a37a734464e8bab6524fb2bd80c120268288706655ca0bf339",
          "dweb:/ipfs/Qmaa36Cg2R4CZweAoNyrpzQT1RukXZi9zS4Jgx9MRH8dK3"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "test/mocks/DestinationMock.t.sol",
    "id": 58588,
    "exportedSymbols": {
      "AgentSecuredMock": [
        58872
      ],
      "ChainGas": [
        14599
      ],
      "DestinationMock": [
        58587
      ],
      "ExecutionHubMock": [
        59116
      ],
      "GasData": [
        14593
      ],
      "InterfaceDestination": [
        9719
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:1306:132",
    "nodes": [
      {
        "id": 58498,
        "nodeType": "PragmaDirective",
        "src": "32:23:132",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".17"
        ]
      },
      {
        "id": 58502,
        "nodeType": "ImportDirective",
        "src": "57:108:132",
        "nodes": [],
        "absolutePath": "contracts/interfaces/InterfaceDestination.sol",
        "file": "../../contracts/interfaces/InterfaceDestination.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58588,
        "sourceUnit": 9720,
        "symbolAliases": [
          {
            "foreign": {
              "id": 58499,
              "name": "ChainGas",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 14599,
              "src": "65:8:132",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 58500,
              "name": "GasData",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 14593,
              "src": "75:7:132",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 58501,
              "name": "InterfaceDestination",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 9719,
              "src": "84:20:132",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 58504,
        "nodeType": "ImportDirective",
        "src": "166:63:132",
        "nodes": [],
        "absolutePath": "test/mocks/hubs/ExecutionHubMock.t.sol",
        "file": "./hubs/ExecutionHubMock.t.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58588,
        "sourceUnit": 59117,
        "symbolAliases": [
          {
            "foreign": {
              "id": 58503,
              "name": "ExecutionHubMock",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 59116,
              "src": "174:16:132",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 58506,
        "nodeType": "ImportDirective",
        "src": "230:63:132",
        "nodes": [],
        "absolutePath": "test/mocks/base/AgentSecuredMock.t.sol",
        "file": "./base/AgentSecuredMock.t.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58588,
        "sourceUnit": 58873,
        "symbolAliases": [
          {
            "foreign": {
              "id": 58505,
              "name": "AgentSecuredMock",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 58872,
              "src": "238:16:132",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 58587,
        "nodeType": "ContractDefinition",
        "src": "330:1007:132",
        "nodes": [
          {
            "id": 58517,
            "nodeType": "FunctionDefinition",
            "src": "503:42:132",
            "nodes": [],
            "body": {
              "id": 58516,
              "nodeType": "Block",
              "src": "543:2:132",
              "nodes": [],
              "statements": []
            },
            "documentation": {
              "id": 58513,
              "nodeType": "StructuredDocumentation",
              "src": "421:77:132",
              "text": "@notice Prevents this contract from being included in the coverage report"
            },
            "functionSelector": "c897f01d",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testDestinationMock",
            "nameLocation": "512:19:132",
            "parameters": {
              "id": 58514,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "531:2:132"
            },
            "returnParameters": {
              "id": 58515,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "543:0:132"
            },
            "scope": 58587,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58525,
            "nodeType": "FunctionDefinition",
            "src": "551:80:132",
            "nodes": [],
            "body": {
              "id": 58524,
              "nodeType": "Block",
              "src": "629:2:132",
              "nodes": [],
              "statements": []
            },
            "baseFunctions": [
              9657
            ],
            "functionSelector": "a554d1e3",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "passAgentRoot",
            "nameLocation": "560:13:132",
            "parameters": {
              "id": 58518,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "573:2:132"
            },
            "returnParameters": {
              "id": 58523,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58520,
                  "mutability": "mutable",
                  "name": "rootPassed",
                  "nameLocation": "599:10:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58525,
                  "src": "594:15:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58519,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "594:4:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58522,
                  "mutability": "mutable",
                  "name": "rootPending",
                  "nameLocation": "616:11:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58525,
                  "src": "611:16:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58521,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "611:4:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "593:35:132"
            },
            "scope": 58587,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58543,
            "nodeType": "FunctionDefinition",
            "src": "637:220:132",
            "nodes": [],
            "body": {
              "id": 58542,
              "nodeType": "Block",
              "src": "855:2:132",
              "nodes": [],
              "statements": []
            },
            "baseFunctions": [
              9675
            ],
            "functionSelector": "39fe2736",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "acceptAttestation",
            "nameLocation": "646:17:132",
            "parameters": {
              "id": 58538,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58527,
                  "mutability": "mutable",
                  "name": "notaryIndex",
                  "nameLocation": "680:11:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58543,
                  "src": "673:18:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 58526,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "673:6:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58529,
                  "mutability": "mutable",
                  "name": "sigIndex",
                  "nameLocation": "709:8:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58543,
                  "src": "701:16:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58528,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "701:7:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58531,
                  "mutability": "mutable",
                  "name": "attPayload",
                  "nameLocation": "740:10:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58543,
                  "src": "727:23:132",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 58530,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "727:5:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58533,
                  "mutability": "mutable",
                  "name": "agentRoot",
                  "nameLocation": "768:9:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58543,
                  "src": "760:17:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 58532,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "760:7:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58537,
                  "mutability": "mutable",
                  "name": "snapGas",
                  "nameLocation": "805:7:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58543,
                  "src": "787:25:132",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_userDefinedValueType$_ChainGas_$14599_$dyn_memory_ptr",
                    "typeString": "ChainGas[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 58535,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 58534,
                        "name": "ChainGas",
                        "nameLocations": [
                          "787:8:132"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 14599,
                        "src": "787:8:132"
                      },
                      "referencedDeclaration": 14599,
                      "src": "787:8:132",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_ChainGas_$14599",
                        "typeString": "ChainGas"
                      }
                    },
                    "id": 58536,
                    "nodeType": "ArrayTypeName",
                    "src": "787:10:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_ChainGas_$14599_$dyn_storage_ptr",
                      "typeString": "ChainGas[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "663:155:132"
            },
            "returnParameters": {
              "id": 58541,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58540,
                  "mutability": "mutable",
                  "name": "wasAccepted",
                  "nameLocation": "842:11:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58543,
                  "src": "837:16:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 58539,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "837:4:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "836:18:132"
            },
            "scope": 58587,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58549,
            "nodeType": "FunctionDefinition",
            "src": "863:64:132",
            "nodes": [],
            "body": {
              "id": 58548,
              "nodeType": "Block",
              "src": "925:2:132",
              "nodes": [],
              "statements": []
            },
            "baseFunctions": [
              9681
            ],
            "functionSelector": "3cf7b120",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "attestationsAmount",
            "nameLocation": "872:18:132",
            "parameters": {
              "id": 58544,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "890:2:132"
            },
            "returnParameters": {
              "id": 58547,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58546,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 58549,
                  "src": "916:7:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58545,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "916:7:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "915:9:132"
            },
            "scope": 58587,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58559,
            "nodeType": "FunctionDefinition",
            "src": "933:116:132",
            "nodes": [],
            "body": {
              "id": 58558,
              "nodeType": "Block",
              "src": "1047:2:132",
              "nodes": [],
              "statements": []
            },
            "baseFunctions": [
              9691
            ],
            "functionSelector": "29be4db2",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getAttestation",
            "nameLocation": "942:14:132",
            "parameters": {
              "id": 58552,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58551,
                  "mutability": "mutable",
                  "name": "index",
                  "nameLocation": "965:5:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58559,
                  "src": "957:13:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58550,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "957:7:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "956:15:132"
            },
            "returnParameters": {
              "id": 58557,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58554,
                  "mutability": "mutable",
                  "name": "attPayload",
                  "nameLocation": "1008:10:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58559,
                  "src": "995:23:132",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 58553,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "995:5:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58556,
                  "mutability": "mutable",
                  "name": "attSignature",
                  "nameLocation": "1033:12:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58559,
                  "src": "1020:25:132",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 58555,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1020:5:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "994:52:132"
            },
            "scope": 58587,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58570,
            "nodeType": "FunctionDefinition",
            "src": "1055:99:132",
            "nodes": [],
            "body": {
              "id": 58569,
              "nodeType": "Block",
              "src": "1152:2:132",
              "nodes": [],
              "statements": []
            },
            "baseFunctions": [
              9702
            ],
            "functionSelector": "d0dd0675",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getGasData",
            "nameLocation": "1064:10:132",
            "parameters": {
              "id": 58562,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58561,
                  "mutability": "mutable",
                  "name": "domain",
                  "nameLocation": "1082:6:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58570,
                  "src": "1075:13:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 58560,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1075:6:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1074:15:132"
            },
            "returnParameters": {
              "id": 58568,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58565,
                  "mutability": "mutable",
                  "name": "gasData",
                  "nameLocation": "1121:7:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58570,
                  "src": "1113:15:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_GasData_$14593",
                    "typeString": "GasData"
                  },
                  "typeName": {
                    "id": 58564,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 58563,
                      "name": "GasData",
                      "nameLocations": [
                        "1113:7:132"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 14593,
                      "src": "1113:7:132"
                    },
                    "referencedDeclaration": 14593,
                    "src": "1113:7:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_GasData_$14593",
                      "typeString": "GasData"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58567,
                  "mutability": "mutable",
                  "name": "dataMaturity",
                  "nameLocation": "1138:12:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58570,
                  "src": "1130:20:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 58566,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1130:7:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1112:39:132"
            },
            "scope": 58587,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58580,
            "nodeType": "FunctionDefinition",
            "src": "1160:110:132",
            "nodes": [],
            "body": {
              "id": 58579,
              "nodeType": "Block",
              "src": "1268:2:132",
              "nodes": [],
              "statements": []
            },
            "baseFunctions": [
              9712
            ],
            "functionSelector": "40989152",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "destStatus",
            "nameLocation": "1169:10:132",
            "parameters": {
              "id": 58571,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1179:2:132"
            },
            "returnParameters": {
              "id": 58578,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58573,
                  "mutability": "mutable",
                  "name": "snapRootTime",
                  "nameLocation": "1212:12:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58580,
                  "src": "1205:19:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint40",
                    "typeString": "uint40"
                  },
                  "typeName": {
                    "id": 58572,
                    "name": "uint40",
                    "nodeType": "ElementaryTypeName",
                    "src": "1205:6:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint40",
                      "typeString": "uint40"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58575,
                  "mutability": "mutable",
                  "name": "agentRootTime",
                  "nameLocation": "1233:13:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58580,
                  "src": "1226:20:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint40",
                    "typeString": "uint40"
                  },
                  "typeName": {
                    "id": 58574,
                    "name": "uint40",
                    "nodeType": "ElementaryTypeName",
                    "src": "1226:6:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint40",
                      "typeString": "uint40"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58577,
                  "mutability": "mutable",
                  "name": "notaryIndex",
                  "nameLocation": "1255:11:132",
                  "nodeType": "VariableDeclaration",
                  "scope": 58580,
                  "src": "1248:18:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 58576,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1248:6:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1204:63:132"
            },
            "scope": 58587,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 58586,
            "nodeType": "FunctionDefinition",
            "src": "1276:59:132",
            "nodes": [],
            "body": {
              "id": 58585,
              "nodeType": "Block",
              "src": "1333:2:132",
              "nodes": [],
              "statements": []
            },
            "baseFunctions": [
              9718
            ],
            "functionSelector": "55252dd1",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "nextAgentRoot",
            "nameLocation": "1285:13:132",
            "parameters": {
              "id": 58581,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1298:2:132"
            },
            "returnParameters": {
              "id": 58584,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58583,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 58586,
                  "src": "1324:7:132",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 58582,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1324:7:132",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1323:9:132"
            },
            "scope": 58587,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 58507,
              "name": "ExecutionHubMock",
              "nameLocations": [
                "358:16:132"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 59116,
              "src": "358:16:132"
            },
            "id": 58508,
            "nodeType": "InheritanceSpecifier",
            "src": "358:16:132"
          },
          {
            "baseName": {
              "id": 58509,
              "name": "AgentSecuredMock",
              "nameLocations": [
                "376:16:132"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 58872,
              "src": "376:16:132"
            },
            "id": 58510,
            "nodeType": "InheritanceSpecifier",
            "src": "376:16:132"
          },
          {
            "baseName": {
              "id": 58511,
              "name": "InterfaceDestination",
              "nameLocations": [
                "394:20:132"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 9719,
              "src": "394:20:132"
            },
            "id": 58512,
            "nodeType": "InheritanceSpecifier",
            "src": "394:20:132"
          }
        ],
        "canonicalName": "DestinationMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          58587,
          9719,
          58872,
          9180,
          59116,
          9234,
          59016
        ],
        "name": "DestinationMock",
        "nameLocation": "339:15:132",
        "scope": 58588,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 132
}