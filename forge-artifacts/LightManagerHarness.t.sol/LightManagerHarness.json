{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AgentNotActiveNorUnstaking",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotInbox",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeAlreadyResolved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeNotOpened",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeNotStuck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuardInDispute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectAgentDomain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectAgentIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectAgentProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectVersionLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustBeSynapseDomain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotaryInDispute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SynapseDomainForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TreeHeightTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawTipsOptimisticPeriod",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "disputeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "guardIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "notaryIndex",
          "type": "uint32"
        }
      ],
      "name": "DisputeOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "disputeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "slashedIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "rivalIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fraudProver",
          "type": "address"
        }
      ],
      "name": "DisputeResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        }
      ],
      "name": "RootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum AgentFlag",
          "name": "flag",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "StatusUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "agentRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "agentStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum AgentFlag",
              "name": "flag",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            }
          ],
          "internalType": "struct AgentStatus",
          "name": "status",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "disputeStatus",
      "outputs": [
        {
          "internalType": "enum DisputeFlag",
          "name": "flag",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "rival",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fraudProver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "disputePtr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum AgentFlag",
              "name": "flag",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            }
          ],
          "internalType": "struct AgentStatus",
          "name": "status",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getDispute",
      "outputs": [
        {
          "internalType": "address",
          "name": "guard",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "notary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "slashedAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fraudProver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "reportPayload",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "reportSignature",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDisputesAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "origin_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destination_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inbox_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "allowFailure",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiCallable.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiCallable.Result[]",
          "name": "callResults",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "guardIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "notaryIndex",
          "type": "uint32"
        }
      ],
      "name": "openDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "origin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "remoteMockFunc",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "msgOrigin",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "proofMaturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "remoteWithdrawTips",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "slashedAgent",
          "type": "address"
        }
      ],
      "name": "resolveStuckDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "sensitiveMockFunc",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "sensitiveMockFuncOver32Bytes",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "sensitiveMockFuncVoid",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "agentRoot_",
          "type": "bytes32"
        }
      ],
      "name": "setAgentRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "prover",
          "type": "address"
        }
      ],
      "name": "slashAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "prover",
          "type": "address"
        }
      ],
      "name": "slashAgentExposed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum AgentFlag",
              "name": "flag",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            }
          ],
          "internalType": "struct AgentStatus",
          "name": "status",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "updateAgentStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "versionString",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60e06040523480156200001157600080fd5b5060405162002877380380620028778339810160408190526200003491620000a0565b60408051808201909152600580825264302e302e3360d81b6020830152608052819081816200006381620000cf565b60a0525063ffffffff90811660c0528216600919019050620000985760405163079597d560e51b815260040160405180910390fd5b5050620000f7565b600060208284031215620000b357600080fd5b815163ffffffff81168114620000c857600080fd5b9392505050565b80516020808301519190811015620000f1576000198160200360031b1b821691505b50919050565b60805160a05160c051612750620001276000396000610381015260006102eb015260006102c801526127506000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063715018a6116100f9578063b269681d11610097578063cbd0596511610071578063cbd059651461044f578063e3a96cbd14610462578063f2fde38b14610487578063fb0e722b1461049a57600080fd5b8063b269681d14610416578063c0c53b8b14610429578063c9f1a03f1461043c57600080fd5b80638da5cb5b116100d35780638da5cb5b146103b8578063938b5f32146103dd578063a149352c146103f0578063a2155c341461040357600080fd5b8063715018a61461036157806389791e17146103695780638d3638f41461037c57600080fd5b80633463d1b11161016657806354fd4d501161014057806354fd4d50146102bd578063586681761461031b57806360fc84661461032e57806369978b0d1461034e57600080fd5b80633463d1b11461028957806336cba43c146102ac5780633aaeccc6146102b557600080fd5b80630e6bfcd5146101ae578063127a2c9d146101e65780631fa07138146102075780632853a0e61461023357806328f3fac9146102485780632de5aaf714610268575b600080fd5b6101c16101bc366004611d4b565b6104ad565b604080516001600160e01b031990931683526020830191909152015b60405180910390f35b6101f96101f4366004611db7565b6104f0565b6040519081526020016101dd565b61021a610215366004611dfd565b61053f565b6040516001600160e01b031990911681526020016101dd565b610246610241366004611e43565b610631565b005b61025b610256366004611e88565b61066c565b6040516101dd9190611ef9565b61027b610276366004611f07565b61070d565b6040516101dd929190611f20565b61029c610297366004611e88565b61075a565b6040516101dd9493929190611f3d565b6101f960c95481565b609b546101f9565b6040805180820182527f000000000000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000602082015290516101dd9190611fc4565b610246610329366004611f07565b6108c2565b61034161033c366004611fd7565b6108f9565b6040516101dd919061204c565b61024661035c366004611e43565b61065c565b610246610a4b565b6102466103773660046120c2565b610a80565b6103a37f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016101dd565b6033546001600160a01b03165b6040516001600160a01b0390911681526020016101dd565b6097546103c5906001600160a01b031681565b61021a6103fe3660046120f7565b610c61565b61024661041136600461212c565b610c9f565b6098546103c5906001600160a01b031681565b610246610437366004612165565b610f94565b61024661044a366004611d4b565b611016565b61024661045d366004612273565b611041565b610475610470366004611f07565b611259565b6040516101dd9695949392919061231b565b610246610495366004611e88565b6113e7565b6099546103c5906001600160a01b031681565b60985460009081906001600160a01b031633146104dd57604051636efcc49f60e01b815260040160405180910390fd5b50630e6bfcd560e01b9491935090915050565b6098546000906001600160a01b0316331461051e57604051636efcc49f60e01b815260040160405180910390fd5b8161052c5761474d60f01b91505b5063127a2c9d60e01b81185b9392505050565b6098546000906001600160a01b0316331461056d57604051636efcc49f60e01b815260040160405180910390fd5b63ffffffff8516600a1461059457604051632b3a807f60e01b815260040160405180910390fd5b620151808410156105b85760405163df5728f360e01b815260040160405180910390fd5b609754604051634e04e7a760e01b81526001600160a01b0385811660048301526024820185905290911690634e04e7a790604401600060405180830381600087803b15801561060657600080fd5b505af115801561061a573d6000803e3d6000fd5b506303f40e2760e31b93505050505b949350505050565b6099546001600160a01b0316331461065c5760405163dbc2fa8560e01b815260040160405180910390fd5b61066783838361147f565b505050565b604080516060810182526000808252602082018190529181019190915261069282611527565b90506002609a60006106b9856001600160a01b0316600090815260cc602052604090205490565b815260208101919091526040016000205460ff1660028111156106de576106de611ea3565b1480156106fe57506005815160058111156106fb576106fb611ea3565b14155b1561070857600481525b919050565b60408051606081018252600080825260208201819052918101829052600083815260cb60205260409020546001600160a01b031691508115610755576107528261066c565b90505b915091565b6000806000806000610781866001600160a01b0316600090815260cc602052604090205490565b6000818152609a602052604080822081516060810190925280549394509192909190829060ff1660028111156107b9576107b9611ea3565b60028111156107ca576107ca611ea3565b8152905461010081046001600160581b03908116602080850191909152600160601b9092046001600160a01b031660409384015283519284015191840151929950909650169350905082156108b9576000609b61082860018661238c565b815481106108385761083861239f565b600091825260209182902060408051606081018252929091015463ffffffff8082168085526401000000008304821695850195909552600160401b909104169082015291506108b590841461088e578151610894565b81602001515b63ffffffff16600090815260cb60205260409020546001600160a01b031690565b9550505b50509193509193565b6098546001600160a01b031633146108ed57604051636efcc49f60e01b815260040160405180910390fd5b6108f6816115c3565b50565b6060818067ffffffffffffffff81111561091557610915612183565b60405190808252806020026020018201604052801561095b57816020015b6040805180820190915260008152606060208201528152602001906001900390816109335790505b5091503660005b82811015610a425785858281811061097c5761097c61239f565b905060200281019061098e91906123b5565b915060008482815181106109a4576109a461239f565b60200260200101519050306001600160a01b03168380602001906109c891906123d5565b6040516109d6929190612423565b600060405180830381855af49150503d8060008114610a11576040519150601f19603f3d011682016040523d82523d6000602084013e610a16565b606091505b5060208301521515808252833517610a39576309ad446560e31b60005260046000fd5b50600101610962565b50505092915050565b6033546001600160a01b03163314610a7e5760405162461bcd60e51b8152600401610a7590612433565b60405180910390fd5b565b6033546001600160a01b03163314610aaa5760405162461bcd60e51b8152600401610a7590612433565b6000609a6000610acf846001600160a01b0316600090815260cc602052604090205490565b8152602081019190915260409081016000208151606081019092528054829060ff166002811115610b0257610b02611ea3565b6002811115610b1357610b13611ea3565b8152905461010081046001600160581b03166020830152600160601b90046001600160a01b03166040909101529050600081516002811115610b5757610b57611ea3565b03610b75576040516359d38fd160e11b815260040160405180910390fd5b600281516002811115610b8a57610b8a611ea3565b03610ba85760405163f10068b560e01b815260040160405180910390fd5b6098546040805163204c48a960e11b815290516000926001600160a01b03169163409891529160048083019260609291908290030181865afa158015610bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c16919061247d565b505090508064ffffffffff16613840610c2f91906124c4565b421015610c4f576040516301bf715b60e61b815260040160405180910390fd5b610c5b8484600061147f565b50505050565b6098546000906001600160a01b03163314610c8f57604051636efcc49f60e01b815260040160405180910390fd5b506328524d4b60e21b9392505050565b6099546001600160a01b03163314610cca5760405163dbc2fa8560e01b815260040160405180910390fd5b63ffffffff82166000908152609a602052604081205460ff166002811115610cf457610cf4611ea3565b14610d125760405163367526d360e21b815260040160405180910390fd5b63ffffffff81166000908152609a602052604081205460ff166002811115610d3c57610d3c611ea3565b14610d5a57604051636893014360e01b815260040160405180910390fd5b604080516060808201835263ffffffff8086168352848116602084019081526000848601818152609b8054600181810183559382905296517fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc3499097018054945192518616600160401b0263ffffffff60401b199387166401000000000267ffffffffffffffff1990961698909616979097179390931716929092179093559154835191820190935290819081526001600160581b0383166020808301919091526000604092830181905263ffffffff87168152609a9091522081518154829060ff19166001836002811115610e5157610e51611ea3565b0217905550602082015181546040938401516001600160a01b0316600160601b026001600160601b036001600160581b03909316610100029290921660ff9091161717905580516060810190915280600181526001600160581b0383166020808301919091526000604092830181905263ffffffff86168152609a9091522081518154829060ff19166001836002811115610eee57610eee611ea3565b0217905550602082015181546040909301516001600160a01b0316600160601b026001600160601b036001600160581b03909216610100029190911660ff909316929092179190911790557fd0672fae056abe2bf0637742527d49add67fdb68192a6c6f6bf86eac19fe0530610f6560018361238c565b6040805191825263ffffffff808716602084015285169082015260600160405180910390a16106678383611607565b6000610fa0600161166f565b90508015610fb8576000805461ff0019166101001790555b610fc38484846116f7565b610fcb61175d565b8015610c5b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6098546001600160a01b0316331461066757604051636efcc49f60e01b815260040160405180910390fd5b60408083015163ffffffff16600090815260cb60205220546001600160a01b031680158015906110835750836001600160a01b0316816001600160a01b031614155b156110a1576040516312b88bb960e21b815260040160405180910390fd5b60006110b6846000015185602001518761178c565b9050600060c9549050806110d7866040015163ffffffff16848760206117c2565b146110f557604051634cc472e760e01b815260040160405180910390fd5b6001600160a01b03831661114f576040858101805163ffffffff908116600090815260cb602090815284822080546001600160a01b0319166001600160a01b038d16908117909155935193825260cc905292909220911690555b600081815260ca602090815260408083206001600160a01b038a16845290915290208551815487929190829060ff1916600183600581111561119357611193611ea3565b0217905550602082810151825460409485015168ffffffffffffffff001990911661010063ffffffff9384160268ffffffff0000000000191617650100000000009183169190910217909255870151875192516001600160a01b038a169391909216917f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e91611221916124d7565b60405180910390a360058551600581111561123e5761123e611ea3565b0361125157611251856040015133611851565b505050505050565b600080600080606080609b80549050871061128757604051631390f2a160e01b815260040160405180910390fd5b6000609b888154811061129c5761129c61239f565b6000918252602080832060408051606081018252939091015463ffffffff80821680865264010000000083048216868601908152600160401b909304821686850152865260cb9093528185205490519092168452909220546001600160a01b03928316995090925016604082015190965063ffffffff16156113675760408082015163ffffffff16600090815260cb60205220546001600160a01b031660408281015163ffffffff166000908152609a6020522054909550600160601b90046001600160a01b031693505b60995460405163c495912b60e01b8152600481018a90526001600160a01b039091169063c495912b90602401600060405180830381865afa1580156113b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113d89190810190612549565b97999698509496939592505050565b6033546001600160a01b031633146114115760405162461bcd60e51b8152600401610a7590612433565b6001600160a01b0381166114765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a75565b6108f681611ae6565b600061148a83611527565b905061149581611b38565b8363ffffffff16816020015163ffffffff16146114c557604051630b09697760e11b815260040160405180910390fd5b826001600160a01b03168463ffffffff167f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e600460405161150691906124d7565b60405180910390a361151c816040015183611851565b610c5b848484611b8c565b60408051606080820183526000808352602080840182905283850182905260c954825260ca81528482206001600160a01b038716835290528390208351918201909352825491929091829060ff16600581111561158657611586611ea3565b600581111561159757611597611ea3565b8152905463ffffffff610100820481166020840152650100000000009091041660409091015292915050565b8060c954146108f65760c98190556040518181527f2cbc14f49c068133583f7cb530018af451c87c1cf1327cf2a4ff4698c4730aa49060200160405180910390a150565b609854604051632885570d60e21b815263ffffffff8085166004830152831660248201526001600160a01b039091169063a2155c34906044015b600060405180830381600087803b15801561165b57600080fd5b505af1158015611251573d6000803e3d6000fd5b60008054610100900460ff16156116b6578160ff1660011480156116925750303b155b6116ae5760405162461bcd60e51b8152600401610a75906125ad565b506000919050565b60005460ff8084169116106116dd5760405162461bcd60e51b8152600401610a75906125ad565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff1661171e5760405162461bcd60e51b8152600401610a75906125fb565b609780546001600160a01b039485166001600160a01b031991821617909155609880549385169382169390931790925560998054919093169116179055565b600054610100900460ff166117845760405162461bcd60e51b8152600401610a75906125fb565b610a7e611b97565b60008383836040516020016117a393929190612646565b6040516020818303038152906040528051906020012090509392505050565b8151600090828111156117e85760405163c5360feb60e01b815260040160405180910390fd5b84915060005b818110156118255761181b8386838151811061180c5761180c61239f565b60200260200101518984611bc7565b92506001016117ee565b50805b838110156118475761183d8360008984611bc7565b9250600101611828565b5050949350505050565b63ffffffff82166000908152609a60205260408082208151606081019092528054829060ff16600281111561188857611888611ea3565b600281111561189957611899611ea3565b8152905461010081046001600160581b03166020830152600160601b90046001600160a01b031660409091015290506002815160028111156118dd576118dd611ea3565b036118fb5760405163f10068b560e01b815260040160405180910390fd5b60028082526001600160a01b03831660408084019190915263ffffffff85166000908152609a60205220825181548493839160ff191690600190849081111561194657611946611ea3565b021790555060208281015182546040909401516001600160a01b0316600160601b026001600160601b036001600160581b03928316610100021660ff90951694909417939093179091558201516000911615611adc576000600183602001516119af9190612693565b6001600160581b031690506000609b82815481106119cf576119cf61239f565b600091825260209182902060408051606081018252919092015463ffffffff80821683526401000000008204811694830194909452600160401b900490921690820152609b8054919250879184908110611a2b57611a2b61239f565b600091825260209182902001805463ffffffff60401b1916600160401b63ffffffff94851602179055820151878216911614611a6b578060200151611a6e565b80515b63ffffffff8181166000818152609a60209081526040808320929092558151878152938b16908401528201526001600160a01b03871660608201529093507fb4cad5624e1d1c6c622ec70516ee582fe3f6519440c5b47e5165141edc9c54cf9060800160405180910390a150505b610c5b8482611bf0565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600181516005811115611b4d57611b4d611ea3565b14158015611b6e5750600281516005811115611b6b57611b6b611ea3565b14155b156108f65760405163ec3d0d8560e01b815260040160405180910390fd5b610667838383611c2e565b600054610100900460ff16611bbe5760405162461bcd60e51b8152600401610a75906125fb565b610a7e33611ae6565b6000600183831c168103611be657611bdf8585611cfd565b9050610629565b611bdf8486611cfd565b609854604051630c22d24360e31b815263ffffffff8085166004830152831660248201526001600160a01b0390911690636116921890604401611641565b6097546040805163ffffffff861660248201526001600160a01b03858116604483015284811660648084019190915283518084039091018152608490920183526020820180516001600160e01b0316639d228a5160e01b179052915163a1c702a760e01b8152919092169163a1c702a791611cb491600a916201518091906004016126ba565b60408051808303816000875af1158015611cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf691906126ec565b5050505050565b600082158015611d0b575081155b15611d1857506000611d45565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012090505b92915050565b600080600060608486031215611d6057600080fd5b833561ffff81168114611d7257600080fd5b925060208401356001600160e01b031981168114611d8f57600080fd5b929592945050506040919091013590565b80356001600160a01b038116811461070857600080fd5b600080600060608486031215611dcc57600080fd5b611dd584611da0565b9250602084013560ff81168114611d8f57600080fd5b63ffffffff811681146108f657600080fd5b60008060008060808587031215611e1357600080fd5b8435611e1e81611deb565b935060208501359250611e3360408601611da0565b9396929550929360600135925050565b600080600060608486031215611e5857600080fd5b8335611e6381611deb565b9250611e7160208501611da0565b9150611e7f60408501611da0565b90509250925092565b600060208284031215611e9a57600080fd5b61053882611da0565b634e487b7160e01b600052602160045260246000fd5b60068110611ec957611ec9611ea3565b9052565b611ed8828251611eb9565b60208181015163ffffffff9081169184019190915260409182015116910152565b60608101611d458284611ecd565b600060208284031215611f1957600080fd5b5035919050565b6001600160a01b0383168152608081016105386020830184611ecd565b6080810160038610611f5157611f51611ea3565b9481526001600160a01b0393841660208201529190921660408201526060015290565b60005b83811015611f8f578181015183820152602001611f77565b50506000910152565b60008151808452611fb0816020860160208601611f74565b601f01601f19169290920160200192915050565b6020815260006105386020830184611f98565b60008060208385031215611fea57600080fd5b823567ffffffffffffffff8082111561200257600080fd5b818501915085601f83011261201657600080fd5b81358181111561202557600080fd5b8660208260051b850101111561203a57600080fd5b60209290920196919550909350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156120b457888303603f1901855281518051151584528701518784018790526120a187850182611f98565b9588019593505090860190600101612073565b509098975050505050505050565b600080604083850312156120d557600080fd5b82356120e081611deb565b91506120ee60208401611da0565b90509250929050565b60008060006060848603121561210c57600080fd5b833561211781611deb565b95602085013595506040909401359392505050565b6000806040838503121561213f57600080fd5b823561214a81611deb565b9150602083013561215a81611deb565b809150509250929050565b60008060006060848603121561217a57600080fd5b611e6384611da0565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156121bc576121bc612183565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156121eb576121eb612183565b604052919050565b600082601f83011261220457600080fd5b8135602067ffffffffffffffff82111561222057612220612183565b8160051b61222f8282016121c2565b928352848101820192828101908785111561224957600080fd5b83870192505b848310156122685782358252918301919083019061224f565b979650505050505050565b600080600083850360a081121561228957600080fd5b61229285611da0565b93506060601f19820112156122a657600080fd5b506122af612199565b6020850135600681106122c157600080fd5b815260408501356122d181611deb565b602082015260608501356122e481611deb565b60408201529150608084013567ffffffffffffffff81111561230557600080fd5b612311868287016121f3565b9150509250925092565b6001600160a01b038781168252868116602083015285811660408301528416606082015260c06080820181905260009061235790830185611f98565b82810360a08401526123698185611f98565b9998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611d4557611d45612376565b634e487b7160e01b600052603260045260246000fd5b60008235603e198336030181126123cb57600080fd5b9190910192915050565b6000808335601e198436030181126123ec57600080fd5b83018035915067ffffffffffffffff82111561240757600080fd5b60200191503681900382131561241c57600080fd5b9250929050565b8183823760009101908152919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b805164ffffffffff8116811461070857600080fd5b60008060006060848603121561249257600080fd5b61249b84612468565b92506124a960208501612468565b915060408401516124b981611deb565b809150509250925092565b80820180821115611d4557611d45612376565b60208101611d458284611eb9565b600082601f8301126124f657600080fd5b815167ffffffffffffffff81111561251057612510612183565b612523601f8201601f19166020016121c2565b81815284602083860101111561253857600080fd5b610629826020830160208701611f74565b6000806040838503121561255c57600080fd5b825167ffffffffffffffff8082111561257457600080fd5b612580868387016124e5565b9350602085015191508082111561259657600080fd5b506125a3858286016124e5565b9150509250929050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006006851061265857612658611ea3565b5060f89390931b835260e09190911b6001600160e01b031916600183015260601b6bffffffffffffffffffffffff1916600582015260190190565b6001600160581b038281168282160390808211156126b3576126b3612376565b5092915050565b600063ffffffff8086168352808516602084015250606060408301526126e36060830184611f98565b95945050505050565b600080604083850312156126ff57600080fd5b825161270a81611deb565b602093909301519294929350505056fea26469706673582212207be223b67afcd2a278ccdb3a897ecc72bbb2f275cc3cdd2390125fc3b52efe5064736f6c63430008110033",
    "sourceMap": "247:341:131:-:0;;;319:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1839:120:5;;;;;;;;;;;;;-1:-1:-1;;;1839:120:5;;;;1080:32:7;;359:6:131;;;1839:120:5;1346:24:7;1360:8;1346:24;:::i;:::-;1338:32;;-1:-1:-1;1926:26:5::1;::::0;;::::1;;::::0;3044:24:66;::::1;-1:-1:-1::0;;3044:24:66;;-1:-1:-1;3040:61:66::1;;3077:24;;-1:-1:-1::0;;;3077:24:66::1;;;;;;;;;;;3040:61;2972:136:::0;319:50:131;247:341;;14:280:200;83:6;136:2;124:9;115:7;111:23;107:32;104:52;;;152:1;149;142:12;104:52;184:9;178:16;234:10;227:5;223:22;216:5;213:33;203:61;;260:1;257;250:12;203:61;283:5;14:280;-1:-1:-1;;;14:280:200:o;299:297::-;417:12;;464:4;453:16;;;447:23;;417:12;482:16;;479:111;;;576:1;572:6;562;556:4;552:17;549:1;545:25;541:38;534:5;530:50;521:59;;479:111;;299:297;;;:::o;:::-;247:341:131;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c8063715018a6116100f9578063b269681d11610097578063cbd0596511610071578063cbd059651461044f578063e3a96cbd14610462578063f2fde38b14610487578063fb0e722b1461049a57600080fd5b8063b269681d14610416578063c0c53b8b14610429578063c9f1a03f1461043c57600080fd5b80638da5cb5b116100d35780638da5cb5b146103b8578063938b5f32146103dd578063a149352c146103f0578063a2155c341461040357600080fd5b8063715018a61461036157806389791e17146103695780638d3638f41461037c57600080fd5b80633463d1b11161016657806354fd4d501161014057806354fd4d50146102bd578063586681761461031b57806360fc84661461032e57806369978b0d1461034e57600080fd5b80633463d1b11461028957806336cba43c146102ac5780633aaeccc6146102b557600080fd5b80630e6bfcd5146101ae578063127a2c9d146101e65780631fa07138146102075780632853a0e61461023357806328f3fac9146102485780632de5aaf714610268575b600080fd5b6101c16101bc366004611d4b565b6104ad565b604080516001600160e01b031990931683526020830191909152015b60405180910390f35b6101f96101f4366004611db7565b6104f0565b6040519081526020016101dd565b61021a610215366004611dfd565b61053f565b6040516001600160e01b031990911681526020016101dd565b610246610241366004611e43565b610631565b005b61025b610256366004611e88565b61066c565b6040516101dd9190611ef9565b61027b610276366004611f07565b61070d565b6040516101dd929190611f20565b61029c610297366004611e88565b61075a565b6040516101dd9493929190611f3d565b6101f960c95481565b609b546101f9565b6040805180820182527f000000000000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000602082015290516101dd9190611fc4565b610246610329366004611f07565b6108c2565b61034161033c366004611fd7565b6108f9565b6040516101dd919061204c565b61024661035c366004611e43565b61065c565b610246610a4b565b6102466103773660046120c2565b610a80565b6103a37f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016101dd565b6033546001600160a01b03165b6040516001600160a01b0390911681526020016101dd565b6097546103c5906001600160a01b031681565b61021a6103fe3660046120f7565b610c61565b61024661041136600461212c565b610c9f565b6098546103c5906001600160a01b031681565b610246610437366004612165565b610f94565b61024661044a366004611d4b565b611016565b61024661045d366004612273565b611041565b610475610470366004611f07565b611259565b6040516101dd9695949392919061231b565b610246610495366004611e88565b6113e7565b6099546103c5906001600160a01b031681565b60985460009081906001600160a01b031633146104dd57604051636efcc49f60e01b815260040160405180910390fd5b50630e6bfcd560e01b9491935090915050565b6098546000906001600160a01b0316331461051e57604051636efcc49f60e01b815260040160405180910390fd5b8161052c5761474d60f01b91505b5063127a2c9d60e01b81185b9392505050565b6098546000906001600160a01b0316331461056d57604051636efcc49f60e01b815260040160405180910390fd5b63ffffffff8516600a1461059457604051632b3a807f60e01b815260040160405180910390fd5b620151808410156105b85760405163df5728f360e01b815260040160405180910390fd5b609754604051634e04e7a760e01b81526001600160a01b0385811660048301526024820185905290911690634e04e7a790604401600060405180830381600087803b15801561060657600080fd5b505af115801561061a573d6000803e3d6000fd5b506303f40e2760e31b93505050505b949350505050565b6099546001600160a01b0316331461065c5760405163dbc2fa8560e01b815260040160405180910390fd5b61066783838361147f565b505050565b604080516060810182526000808252602082018190529181019190915261069282611527565b90506002609a60006106b9856001600160a01b0316600090815260cc602052604090205490565b815260208101919091526040016000205460ff1660028111156106de576106de611ea3565b1480156106fe57506005815160058111156106fb576106fb611ea3565b14155b1561070857600481525b919050565b60408051606081018252600080825260208201819052918101829052600083815260cb60205260409020546001600160a01b031691508115610755576107528261066c565b90505b915091565b6000806000806000610781866001600160a01b0316600090815260cc602052604090205490565b6000818152609a602052604080822081516060810190925280549394509192909190829060ff1660028111156107b9576107b9611ea3565b60028111156107ca576107ca611ea3565b8152905461010081046001600160581b03908116602080850191909152600160601b9092046001600160a01b031660409384015283519284015191840151929950909650169350905082156108b9576000609b61082860018661238c565b815481106108385761083861239f565b600091825260209182902060408051606081018252929091015463ffffffff8082168085526401000000008304821695850195909552600160401b909104169082015291506108b590841461088e578151610894565b81602001515b63ffffffff16600090815260cb60205260409020546001600160a01b031690565b9550505b50509193509193565b6098546001600160a01b031633146108ed57604051636efcc49f60e01b815260040160405180910390fd5b6108f6816115c3565b50565b6060818067ffffffffffffffff81111561091557610915612183565b60405190808252806020026020018201604052801561095b57816020015b6040805180820190915260008152606060208201528152602001906001900390816109335790505b5091503660005b82811015610a425785858281811061097c5761097c61239f565b905060200281019061098e91906123b5565b915060008482815181106109a4576109a461239f565b60200260200101519050306001600160a01b03168380602001906109c891906123d5565b6040516109d6929190612423565b600060405180830381855af49150503d8060008114610a11576040519150601f19603f3d011682016040523d82523d6000602084013e610a16565b606091505b5060208301521515808252833517610a39576309ad446560e31b60005260046000fd5b50600101610962565b50505092915050565b6033546001600160a01b03163314610a7e5760405162461bcd60e51b8152600401610a7590612433565b60405180910390fd5b565b6033546001600160a01b03163314610aaa5760405162461bcd60e51b8152600401610a7590612433565b6000609a6000610acf846001600160a01b0316600090815260cc602052604090205490565b8152602081019190915260409081016000208151606081019092528054829060ff166002811115610b0257610b02611ea3565b6002811115610b1357610b13611ea3565b8152905461010081046001600160581b03166020830152600160601b90046001600160a01b03166040909101529050600081516002811115610b5757610b57611ea3565b03610b75576040516359d38fd160e11b815260040160405180910390fd5b600281516002811115610b8a57610b8a611ea3565b03610ba85760405163f10068b560e01b815260040160405180910390fd5b6098546040805163204c48a960e11b815290516000926001600160a01b03169163409891529160048083019260609291908290030181865afa158015610bf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c16919061247d565b505090508064ffffffffff16613840610c2f91906124c4565b421015610c4f576040516301bf715b60e61b815260040160405180910390fd5b610c5b8484600061147f565b50505050565b6098546000906001600160a01b03163314610c8f57604051636efcc49f60e01b815260040160405180910390fd5b506328524d4b60e21b9392505050565b6099546001600160a01b03163314610cca5760405163dbc2fa8560e01b815260040160405180910390fd5b63ffffffff82166000908152609a602052604081205460ff166002811115610cf457610cf4611ea3565b14610d125760405163367526d360e21b815260040160405180910390fd5b63ffffffff81166000908152609a602052604081205460ff166002811115610d3c57610d3c611ea3565b14610d5a57604051636893014360e01b815260040160405180910390fd5b604080516060808201835263ffffffff8086168352848116602084019081526000848601818152609b8054600181810183559382905296517fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc3499097018054945192518616600160401b0263ffffffff60401b199387166401000000000267ffffffffffffffff1990961698909616979097179390931716929092179093559154835191820190935290819081526001600160581b0383166020808301919091526000604092830181905263ffffffff87168152609a9091522081518154829060ff19166001836002811115610e5157610e51611ea3565b0217905550602082015181546040938401516001600160a01b0316600160601b026001600160601b036001600160581b03909316610100029290921660ff9091161717905580516060810190915280600181526001600160581b0383166020808301919091526000604092830181905263ffffffff86168152609a9091522081518154829060ff19166001836002811115610eee57610eee611ea3565b0217905550602082015181546040909301516001600160a01b0316600160601b026001600160601b036001600160581b03909216610100029190911660ff909316929092179190911790557fd0672fae056abe2bf0637742527d49add67fdb68192a6c6f6bf86eac19fe0530610f6560018361238c565b6040805191825263ffffffff808716602084015285169082015260600160405180910390a16106678383611607565b6000610fa0600161166f565b90508015610fb8576000805461ff0019166101001790555b610fc38484846116f7565b610fcb61175d565b8015610c5b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6098546001600160a01b0316331461066757604051636efcc49f60e01b815260040160405180910390fd5b60408083015163ffffffff16600090815260cb60205220546001600160a01b031680158015906110835750836001600160a01b0316816001600160a01b031614155b156110a1576040516312b88bb960e21b815260040160405180910390fd5b60006110b6846000015185602001518761178c565b9050600060c9549050806110d7866040015163ffffffff16848760206117c2565b146110f557604051634cc472e760e01b815260040160405180910390fd5b6001600160a01b03831661114f576040858101805163ffffffff908116600090815260cb602090815284822080546001600160a01b0319166001600160a01b038d16908117909155935193825260cc905292909220911690555b600081815260ca602090815260408083206001600160a01b038a16845290915290208551815487929190829060ff1916600183600581111561119357611193611ea3565b0217905550602082810151825460409485015168ffffffffffffffff001990911661010063ffffffff9384160268ffffffff0000000000191617650100000000009183169190910217909255870151875192516001600160a01b038a169391909216917f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e91611221916124d7565b60405180910390a360058551600581111561123e5761123e611ea3565b0361125157611251856040015133611851565b505050505050565b600080600080606080609b80549050871061128757604051631390f2a160e01b815260040160405180910390fd5b6000609b888154811061129c5761129c61239f565b6000918252602080832060408051606081018252939091015463ffffffff80821680865264010000000083048216868601908152600160401b909304821686850152865260cb9093528185205490519092168452909220546001600160a01b03928316995090925016604082015190965063ffffffff16156113675760408082015163ffffffff16600090815260cb60205220546001600160a01b031660408281015163ffffffff166000908152609a6020522054909550600160601b90046001600160a01b031693505b60995460405163c495912b60e01b8152600481018a90526001600160a01b039091169063c495912b90602401600060405180830381865afa1580156113b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113d89190810190612549565b97999698509496939592505050565b6033546001600160a01b031633146114115760405162461bcd60e51b8152600401610a7590612433565b6001600160a01b0381166114765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a75565b6108f681611ae6565b600061148a83611527565b905061149581611b38565b8363ffffffff16816020015163ffffffff16146114c557604051630b09697760e11b815260040160405180910390fd5b826001600160a01b03168463ffffffff167f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e600460405161150691906124d7565b60405180910390a361151c816040015183611851565b610c5b848484611b8c565b60408051606080820183526000808352602080840182905283850182905260c954825260ca81528482206001600160a01b038716835290528390208351918201909352825491929091829060ff16600581111561158657611586611ea3565b600581111561159757611597611ea3565b8152905463ffffffff610100820481166020840152650100000000009091041660409091015292915050565b8060c954146108f65760c98190556040518181527f2cbc14f49c068133583f7cb530018af451c87c1cf1327cf2a4ff4698c4730aa49060200160405180910390a150565b609854604051632885570d60e21b815263ffffffff8085166004830152831660248201526001600160a01b039091169063a2155c34906044015b600060405180830381600087803b15801561165b57600080fd5b505af1158015611251573d6000803e3d6000fd5b60008054610100900460ff16156116b6578160ff1660011480156116925750303b155b6116ae5760405162461bcd60e51b8152600401610a75906125ad565b506000919050565b60005460ff8084169116106116dd5760405162461bcd60e51b8152600401610a75906125ad565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff1661171e5760405162461bcd60e51b8152600401610a75906125fb565b609780546001600160a01b039485166001600160a01b031991821617909155609880549385169382169390931790925560998054919093169116179055565b600054610100900460ff166117845760405162461bcd60e51b8152600401610a75906125fb565b610a7e611b97565b60008383836040516020016117a393929190612646565b6040516020818303038152906040528051906020012090509392505050565b8151600090828111156117e85760405163c5360feb60e01b815260040160405180910390fd5b84915060005b818110156118255761181b8386838151811061180c5761180c61239f565b60200260200101518984611bc7565b92506001016117ee565b50805b838110156118475761183d8360008984611bc7565b9250600101611828565b5050949350505050565b63ffffffff82166000908152609a60205260408082208151606081019092528054829060ff16600281111561188857611888611ea3565b600281111561189957611899611ea3565b8152905461010081046001600160581b03166020830152600160601b90046001600160a01b031660409091015290506002815160028111156118dd576118dd611ea3565b036118fb5760405163f10068b560e01b815260040160405180910390fd5b60028082526001600160a01b03831660408084019190915263ffffffff85166000908152609a60205220825181548493839160ff191690600190849081111561194657611946611ea3565b021790555060208281015182546040909401516001600160a01b0316600160601b026001600160601b036001600160581b03928316610100021660ff90951694909417939093179091558201516000911615611adc576000600183602001516119af9190612693565b6001600160581b031690506000609b82815481106119cf576119cf61239f565b600091825260209182902060408051606081018252919092015463ffffffff80821683526401000000008204811694830194909452600160401b900490921690820152609b8054919250879184908110611a2b57611a2b61239f565b600091825260209182902001805463ffffffff60401b1916600160401b63ffffffff94851602179055820151878216911614611a6b578060200151611a6e565b80515b63ffffffff8181166000818152609a60209081526040808320929092558151878152938b16908401528201526001600160a01b03871660608201529093507fb4cad5624e1d1c6c622ec70516ee582fe3f6519440c5b47e5165141edc9c54cf9060800160405180910390a150505b610c5b8482611bf0565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600181516005811115611b4d57611b4d611ea3565b14158015611b6e5750600281516005811115611b6b57611b6b611ea3565b14155b156108f65760405163ec3d0d8560e01b815260040160405180910390fd5b610667838383611c2e565b600054610100900460ff16611bbe5760405162461bcd60e51b8152600401610a75906125fb565b610a7e33611ae6565b6000600183831c168103611be657611bdf8585611cfd565b9050610629565b611bdf8486611cfd565b609854604051630c22d24360e31b815263ffffffff8085166004830152831660248201526001600160a01b0390911690636116921890604401611641565b6097546040805163ffffffff861660248201526001600160a01b03858116604483015284811660648084019190915283518084039091018152608490920183526020820180516001600160e01b0316639d228a5160e01b179052915163a1c702a760e01b8152919092169163a1c702a791611cb491600a916201518091906004016126ba565b60408051808303816000875af1158015611cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf691906126ec565b5050505050565b600082158015611d0b575081155b15611d1857506000611d45565b60408051602081018590529081018390526060016040516020818303038152906040528051906020012090505b92915050565b600080600060608486031215611d6057600080fd5b833561ffff81168114611d7257600080fd5b925060208401356001600160e01b031981168114611d8f57600080fd5b929592945050506040919091013590565b80356001600160a01b038116811461070857600080fd5b600080600060608486031215611dcc57600080fd5b611dd584611da0565b9250602084013560ff81168114611d8f57600080fd5b63ffffffff811681146108f657600080fd5b60008060008060808587031215611e1357600080fd5b8435611e1e81611deb565b935060208501359250611e3360408601611da0565b9396929550929360600135925050565b600080600060608486031215611e5857600080fd5b8335611e6381611deb565b9250611e7160208501611da0565b9150611e7f60408501611da0565b90509250925092565b600060208284031215611e9a57600080fd5b61053882611da0565b634e487b7160e01b600052602160045260246000fd5b60068110611ec957611ec9611ea3565b9052565b611ed8828251611eb9565b60208181015163ffffffff9081169184019190915260409182015116910152565b60608101611d458284611ecd565b600060208284031215611f1957600080fd5b5035919050565b6001600160a01b0383168152608081016105386020830184611ecd565b6080810160038610611f5157611f51611ea3565b9481526001600160a01b0393841660208201529190921660408201526060015290565b60005b83811015611f8f578181015183820152602001611f77565b50506000910152565b60008151808452611fb0816020860160208601611f74565b601f01601f19169290920160200192915050565b6020815260006105386020830184611f98565b60008060208385031215611fea57600080fd5b823567ffffffffffffffff8082111561200257600080fd5b818501915085601f83011261201657600080fd5b81358181111561202557600080fd5b8660208260051b850101111561203a57600080fd5b60209290920196919550909350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156120b457888303603f1901855281518051151584528701518784018790526120a187850182611f98565b9588019593505090860190600101612073565b509098975050505050505050565b600080604083850312156120d557600080fd5b82356120e081611deb565b91506120ee60208401611da0565b90509250929050565b60008060006060848603121561210c57600080fd5b833561211781611deb565b95602085013595506040909401359392505050565b6000806040838503121561213f57600080fd5b823561214a81611deb565b9150602083013561215a81611deb565b809150509250929050565b60008060006060848603121561217a57600080fd5b611e6384611da0565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156121bc576121bc612183565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156121eb576121eb612183565b604052919050565b600082601f83011261220457600080fd5b8135602067ffffffffffffffff82111561222057612220612183565b8160051b61222f8282016121c2565b928352848101820192828101908785111561224957600080fd5b83870192505b848310156122685782358252918301919083019061224f565b979650505050505050565b600080600083850360a081121561228957600080fd5b61229285611da0565b93506060601f19820112156122a657600080fd5b506122af612199565b6020850135600681106122c157600080fd5b815260408501356122d181611deb565b602082015260608501356122e481611deb565b60408201529150608084013567ffffffffffffffff81111561230557600080fd5b612311868287016121f3565b9150509250925092565b6001600160a01b038781168252868116602083015285811660408301528416606082015260c06080820181905260009061235790830185611f98565b82810360a08401526123698185611f98565b9998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611d4557611d45612376565b634e487b7160e01b600052603260045260246000fd5b60008235603e198336030181126123cb57600080fd5b9190910192915050565b6000808335601e198436030181126123ec57600080fd5b83018035915067ffffffffffffffff82111561240757600080fd5b60200191503681900382131561241c57600080fd5b9250929050565b8183823760009101908152919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b805164ffffffffff8116811461070857600080fd5b60008060006060848603121561249257600080fd5b61249b84612468565b92506124a960208501612468565b915060408401516124b981611deb565b809150509250925092565b80820180821115611d4557611d45612376565b60208101611d458284611eb9565b600082601f8301126124f657600080fd5b815167ffffffffffffffff81111561251057612510612183565b612523601f8201601f19166020016121c2565b81815284602083860101111561253857600080fd5b610629826020830160208701611f74565b6000806040838503121561255c57600080fd5b825167ffffffffffffffff8082111561257457600080fd5b612580868387016124e5565b9350602085015191508082111561259657600080fd5b506125a3858286016124e5565b9150509250929050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006006851061265857612658611ea3565b5060f89390931b835260e09190911b6001600160e01b031916600183015260601b6bffffffffffffffffffffffff1916600582015260190190565b6001600160581b038281168282160390808211156126b3576126b3612376565b5092915050565b600063ffffffff8086168352808516602084015250606060408301526126e36060830184611f98565b95945050505050565b600080604083850312156126ff57600080fd5b825161270a81611deb565b602093909301519294929350505056fea26469706673582212207be223b67afcd2a278ccdb3a897ecc72bbb2f275cc3cdd2390125fc3b52efe5064736f6c63430008110033",
    "sourceMap": "247:341:131:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1785:325:129;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;;731:33:200;;;713:52;;796:2;781:18;;774:34;;;;686:18;1785:325:129;;;;;;;;916:345;;;;;;:::i;:::-;;:::i;:::-;;;1559:25:200;;;1547:2;1532:18;916:345:129;1413:177:200;5506:850:66;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;;2344:33:200;;;2326:52;;2314:2;2299:18;5506:850:66;2182:202:200;6105:136:64;;;;;;:::i;:::-;;:::i;:::-;;6856:417;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;6615:201::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;8293:633::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;2377:24:66:-;;;;;;7313:101:64;7391:9;:16;7313:101;;1383:401:7;1554:28;;;;;;;;1567:7;1554:28;;1576:5;1554:28;;;;1383:401;;;;1554:28;1383:401;:::i;4914:220:66:-;;;;;;:::i;:::-;;:::i;542:1352:6:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;314:133:129:-;;;;;;:::i;:::-;;:::i;2184:57:5:-;;;:::i;3920:751:64:-;;;;;;:::i;:::-;;:::i;1356:35:5:-;;;;;;;;8222:10:200;8210:23;;;8192:42;;8180:2;8165:18;1356:35:5;8048:192:200;1276:85:87;1348:6;;-1:-1:-1;;;;;1348:6:87;1276:85;;;-1:-1:-1;;;;;8409:32:200;;;8391:51;;8379:2;8364:18;1276:85:87;8245:203:200;2454:21:64;;;;;-1:-1:-1;;;;;2454:21:64;;;2116:203:129;;;;;;:::i;:::-;;:::i;5035:1030:64:-;;;;;;:::i;:::-;;:::i;2482:26::-;;;;;-1:-1:-1;;;;;2482:26:64;;;3114:189:66;;;;;;:::i;:::-;;:::i;1432:182:129:-;;;;;;:::i;:::-;;:::i;3671:1195:66:-;;;;;;:::i;:::-;;:::i;7454:799:64:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;:::i;2158:198:87:-;;;;;;:::i;:::-;;:::i;2515:20:64:-;;;;;-1:-1:-1;;;;;2515:20:64;;;1785:325:129;1921:11;;1876:6;;;;-1:-1:-1;;;;;1921:11:129;1907:10;:25;1903:60;;1941:22;;-1:-1:-1;;;1941:22:129;;;;;;;;;;;1903:60;-1:-1:-1;;;;2054:42:129;2098:4;;-1:-1:-1;1785:325:129;;-1:-1:-1;;1785:325:129:o;916:345::-;1033:11;;996:7;;-1:-1:-1;;;;;1033:11:129;1019:10;:25;1015:60;;1053:22;;-1:-1:-1;;;1053:22:129;;;;;;;;;;;1015:60;1089:4;1085:35;;-1:-1:-1;;;1109:11:129;;1085:35;-1:-1:-1;;;;1216:38:129;;916:345;;;;;;:::o;5506:850:66:-;5749:11;;5644:17;;-1:-1:-1;;;;;5749:11:66;5735:10;:25;5731:60;;5769:22;;-1:-1:-1;;;5769:22:66;;;;;;;;;;;5731:60;5890:27;;;3861:2:45;5890:27:66;5886:61;;5926:21;;-1:-1:-1;;;5926:21:66;;;;;;;;;;;5886:61;3406:6:45;6087:41:66;;6083:84;;;6137:30;;-1:-1:-1;;;6137:30:66;;;;;;;;;;;6083:84;6193:6;;6177:55;;-1:-1:-1;;;6177:55:66;;-1:-1:-1;;;;;12927:32:200;;;6177:55:66;;;12909:51:200;12976:18;;;12969:34;;;6193:6:66;;;;6177:36;;12882:18:200;;6177:55:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;6317:32:66;-1:-1:-1;;;;5506:850:66;;;;;;;:::o;6105:136:64:-;2882:5;;-1:-1:-1;;;;;2882:5:64;2868:10;:19;2864:48;;2896:16;;-1:-1:-1;;;2896:16:64;;;;;;;;;;;2864:48;6200:34:::1;6212:6;6220:5;6227:6;6200:11;:34::i;:::-;6105:136:::0;;;:::o;6856:417::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;6959:25:64;6978:5;6959:18;:25::i;:::-;6950:34;-1:-1:-1;7151:19:64;7111:13;:31;7125:16;7135:5;-1:-1:-1;;;;;9335:20:66;9303:13;9335:20;;;:13;:20;;;;;;;9237:125;7125:16:64;7111:31;;;;;;;;;;;-1:-1:-1;7111:31:64;:36;;;:59;;;;;;;;:::i;:::-;;:95;;;;-1:-1:-1;7189:17:64;7174:11;;:32;;;;;;;;:::i;:::-;;;7111:95;7107:160;;;7236:20;7222:34;;7107:160;6856:417;;;:::o;6615:201::-;-1:-1:-1;;;;;;;;6671:13:64;-1:-1:-1;;;;;;;;;;;;;;;9001:13:66;9033:14;;;:7;:14;;;;;;-1:-1:-1;;;;;9033:14:66;;-1:-1:-1;6761:19:64;;6757:52;;6791:18;6803:5;6791:11;:18::i;:::-;6782:27;;6757:52;6615:201;;;:::o;8293:633::-;8378:16;8396:13;8411:19;8432:18;8466;8487:16;8497:5;-1:-1:-1;;;;;9335:20:66;9303:13;9335:20;;;:13;:20;;;;;;;9237:125;8487:16:64;8513:32;8548:25;;;:13;:25;;;;;;8513:60;;;;;;;;;;8466:37;;-1:-1:-1;8513:32:64;;:60;;8548:25;8513:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;8513:60:64;;;;;;;;;;;-1:-1:-1;;;8513:60:64;;;-1:-1:-1;;;;;8513:60:64;;;;;;8590:17;;8631:24;;;;8678:23;;;;8590:17;;-1:-1:-1;8631:24:64;;-1:-1:-1;8665:36:64;;-1:-1:-1;8590:17:64;-1:-1:-1;8715:14:64;;8711:209;;8745:28;8776:9;8786:14;8799:1;8786:10;:14;:::i;:::-;8776:25;;;;;;;;:::i;:::-;;;;;;;;;;8745:56;;;;;;;;8776:25;;;;8745:56;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8745:56:64;;;;;;;;;-1:-1:-1;8823:86:64;;8833:32;;:75;;8890:18;;8833:75;;;8868:7;:19;;;8833:75;8823:86;;9001:13:66;9033:14;;;:7;:14;;;;;;-1:-1:-1;;;;;9033:14:66;;8935:119;8823:86:64;8815:94;;8731:189;8711:209;8456:470;;8293:633;;;;;:::o;4914:220:66:-;5050:11;;-1:-1:-1;;;;;5050:11:66;5036:10;:25;5032:60;;5070:22;;-1:-1:-1;;;5070:22:66;;;;;;;;;;;5032:60;5102:25;5116:10;5102:13;:25::i;:::-;4914:220;:::o;542:1352:6:-;602:27;658:5;;694:20;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;694:20:6;;;;;;;;;;;;;;;;680:34;;724:19;758:9;753:1135;777:6;773:1;:10;753:1135;;;808:5;;814:1;808:8;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;800:16;;830:20;853:11;865:1;853:14;;;;;;;;:::i;:::-;;;;;;;830:37;;1210:4;-1:-1:-1;;;;;1202:26:6;1229:5;:14;;;;;;;;:::i;:::-;1202:42;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1181:17:6;;;1164:80;;;;;;1517:19;;1514:38;1504:301;;-1:-1:-1;;;1675:4:6;1668:80;1782:4;1776;1769:18;1504:301;-1:-1:-1;1860:3:6;;753:1135;;;;631:1263;;542:1352;;;;:::o;2184:57:5:-;1348:6:87;;-1:-1:-1;;;;;1348:6:87;929:10:91;1488:23:87;1480:68;;;;-1:-1:-1;;;1480:68:87;;;;;;;:::i;:::-;;;;;;;;;2184:57:5:o;3920:751:64:-;1348:6:87;;-1:-1:-1;;;;;1348:6:87;929:10:91;1488:23:87;1480:68;;;;-1:-1:-1;;;1480:68:87;;;;;;;:::i;:::-;4015:34:64::1;4052:13;:38;4066:23;4076:12;-1:-1:-1::0;;;;;9335:20:66;9303:13;9335:20;;;:13;:20;;;;;;;9237:125;4066:23:64::1;4052:38:::0;;::::1;::::0;::::1;::::0;;;;;;;;-1:-1:-1;4052:38:64;4015:75;;::::1;::::0;::::1;::::0;;;;;;;::::1;;;::::0;::::1;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;::::0;;;;::::1;::::0;::::1;-1:-1:-1::0;;;;;4015:75:64::1;;::::0;::::1;::::0;-1:-1:-1;;;4015:75:64;::::1;-1:-1:-1::0;;;;;4015:75:64::1;::::0;;;;;;-1:-1:-1;;4104:19:64;;:39:::1;::::0;::::1;;;;;;:::i;:::-;::::0;4100:70:::1;;4152:18;;-1:-1:-1::0;;;4152:18:64::1;;;;;;;;;;;4100:70;4207:19;4184::::0;;:42:::1;::::0;::::1;;;;;;:::i;:::-;::::0;4180:79:::1;;4235:24;;-1:-1:-1::0;;;4235:24:64::1;;;;;;;;;;;4180:79;4396:11;::::0;4375:46:::1;::::0;;-1:-1:-1;;;4375:46:64;;;;4350:19:::1;::::0;-1:-1:-1;;;;;4396:11:64::1;::::0;4375:44:::1;::::0;:46:::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;4396:11;4375:46:::1;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4349:72;;;;4474:12;4453:33;;3567:7:45;4453:33:64;;;;:::i;:::-;4435:15;:51;4431:81;;;4495:17;;-1:-1:-1::0;;;4495:17:64::1;;;;;;;;;;;4431:81;4594:70;4615:6;4630:12;4660:1;4594:11;:70::i;:::-;4005:666;;3920:751:::0;;:::o;2116:203:129:-;2225:11;;2189:6;;-1:-1:-1;;;;;2225:11:129;2211:10;:25;2207:60;;2245:22;;-1:-1:-1;;;2245:22:129;;;;;;;;;;;2207:60;-1:-1:-1;;;;2116:203:129;;;;;:::o;5035:1030:64:-;2882:5;;-1:-1:-1;;;;;2882:5:64;2868:10;:19;2864:48;;2896:16;;-1:-1:-1;;;2896:16:64;;;;;;;;;;;2864:48;5186:25:::1;::::0;::::1;5220:16;5186:25:::0;;;:13:::1;:25;::::0;;;;:30;::::1;;:50;::::0;::::1;;;;;;:::i;:::-;;5182:79;;5245:16;;-1:-1:-1::0;;;5245:16:64::1;;;;;;;;;;;5182:79;5275:26;::::0;::::1;5310:16;5275:26:::0;;;:13:::1;:26;::::0;;;;:31;::::1;;:51;::::0;::::1;;;;;;:::i;:::-;;5271:81;;5335:17;;-1:-1:-1::0;;;5335:17:64::1;;;;;;;;;;;5271:81;5377:41;::::0;;::::1;::::0;;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;::::1;;::::0;::::1;::::0;;;-1:-1:-1;5377:41:64;;;;;;5362:9:::1;:57:::0;;::::1;::::0;;::::1;::::0;;;;;;;;;;;::::1;::::0;;;;;;;::::1;-1:-1:-1::0;;;5362:57:64::1;-1:-1:-1::0;;;;5362:57:64;;::::1;::::0;::::1;-1:-1:-1::0;;5362:57:64;;;;;;::::1;::::0;;;;;;;::::1;;::::0;;;::::1;::::0;;;5559:16;;5613:65;;;;::::1;::::0;;;;;;;;-1:-1:-1;;;;;5613:65:64;::::1;;::::0;;::::1;::::0;;;;-1:-1:-1;5613:65:64;;;;;;;5585:25:::1;::::0;::::1;::::0;;:13:::1;:25:::0;;;;:93;;;;:25;;-1:-1:-1;;5585:93:64::1;::::0;;::::1;::::0;::::1;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;5585:93:64::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;-1:-1:-1;;;;;5585:93:64::1;-1:-1:-1::0;;;5585:93:64::1;-1:-1:-1::0;;;;;;;;;;5585:93:64;;::::1;;;::::0;;;;;;;;;::::1;::::0;;5717:65;;::::1;::::0;::::1;::::0;;;;5585:93:::1;5717:65:::0;;-1:-1:-1;;;;;5717:65:64;::::1;;::::0;;::::1;::::0;;;;-1:-1:-1;5717:65:64;;;;;;;5688:26:::1;::::0;::::1;::::0;;:13:::1;:26:::0;;;;:94;;;;:26;;-1:-1:-1;;5688:94:64::1;::::0;;::::1;::::0;::::1;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;5688:94:64::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;-1:-1:-1;;;;;5688:94:64::1;-1:-1:-1::0;;;5688:94:64::1;-1:-1:-1::0;;;;;;;;;;5688:94:64;;::::1;;;::::0;;;;;;;;;;;;;;;::::1;::::0;;5908:95:::1;5937:14;5688:94;5937:10:::0;:14:::1;:::i;:::-;5908:95;::::0;;15822:25:200;;;15866:10;15912:15;;;15907:2;15892:18;;15885:43;15964:15;;15944:18;;;15937:43;15810:2;15795:18;5908:95:64::1;;;;;;;6013:45;6034:10;6046:11;6013:20;:45::i;3114:189:66:-:0;3111:19:88;3133:25;3156:1;3133:22;:25::i;:::-;3111:47;;3172:14;3168:65;;;3202:13;:20;;-1:-1:-1;;3202:20:88;;;;;3168:65;3220:50:66::1;3240:7;3249:12;3263:6;3220:19;:50::i;:::-;3280:16;:14;:16::i;:::-;3257:14:88::0;3253:99;;;3303:5;3287:21;;-1:-1:-1;;3287:21:88;;;3327:14;;-1:-1:-1;16143:36:200;;3327:14:88;;16131:2:200;16116:18;3327:14:88;;;;;;;3101:257;3114:189:66;;;:::o;1432:182:129:-;1530:11;;-1:-1:-1;;;;;1530:11:129;1516:10;:25;1512:60;;1550:22;;-1:-1:-1;;;1550:22:129;;;;;;;;;;;3671:1195:66;3813:12;;;;;3805:21;;3783:19;3805:21;;;:7;:21;;;;-1:-1:-1;;;;;3805:21:66;3840:25;;;;;:49;;;3884:5;-1:-1:-1;;;;;3869:20:66;:11;-1:-1:-1;;;;;3869:20:66;;;3840:49;3836:83;;;3898:21;;-1:-1:-1;;;3898:21:66;;;;;;;;;;;3836:83;3990:12;4005:45;4016:6;:11;;;4029:6;:13;;;4044:5;4005:10;:45::i;:::-;3990:60;;4060:12;4075:9;;4060:24;;4227:4;4157:66;4178:6;:12;;;4157:66;;4192:4;4198:5;428:2:45;4157:20:66;:66::i;:::-;:74;4153:108;;4240:21;;-1:-1:-1;;;4240:21:66;;;;;;;;;;;4153:108;-1:-1:-1;;;;;4317:25:66;;4313:134;;4366:12;;;;;;4358:21;;;;;;;;:7;:21;;;;;;;:29;;-1:-1:-1;;;;;;4358:29:66;-1:-1:-1;;;;;4358:29:66;;;;;;;;4424:12;;4401:20;;;:13;:20;;;;;;:35;;;;4313:134;4509:15;;;;:9;:15;;;;;;;;-1:-1:-1;;;;;4509:22:66;;;;;;;;;:31;;;;4534:6;;4509:22;:31;:22;;-1:-1:-1;;4509:31:66;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;4509:31:66;;;;;;;;;;;;-1:-1:-1;;4509:31:66;;;;;;;;;-1:-1:-1;;4509:31:66;;;;;;;;;;;;;;4582:13;;;4569:11;;4555:48;;-1:-1:-1;;;;;4555:48:66;;;;;;;;;;;;;:::i;:::-;;;;;;;;4705:17;4690:11;;:32;;;;;;;;:::i;:::-;;4686:174;;4808:41;4824:6;:12;;;4838:10;4808:15;:41::i;:::-;3773:1093;;;3671:1195;;;:::o;7454:799:64:-;7549:13;7576:14;7604:20;7638:19;7671:26;7711:28;7777:9;:16;;;;7768:5;:25;7764:55;;7802:17;;-1:-1:-1;;;7802:17:64;;;;;;;;;;;7764:55;7829:28;7860:9;7870:5;7860:16;;;;;;;;:::i;:::-;;;;;;;;;7829:47;;;;;;;;7860:16;;;;7829:47;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;7829:47:64;;;;;;;;;9033:14:66;;:7;:14;;;;;;;7952:19:64;;7942:30;;;9033:14:66;;;;;;-1:-1:-1;;;;;9033:14:66;;;;-1:-1:-1;7829:47:64;;-1:-1:-1;9033:14:66;7986:20:64;;;;7933:39;;-1:-1:-1;7986:24:64;;;7982:176;;8051:20;;;;;8041:31;;9001:13:66;9033:14;;;:7;:14;;;;-1:-1:-1;;;;;9033:14:66;8114:20:64;;;;;8100:35;;;;;;:13;:35;;;:47;8026:46;;-1:-1:-1;;;;8100:47:64;;-1:-1:-1;;;;;8100:47:64;;-1:-1:-1;7982:176:64;8218:5;;8202:44;;-1:-1:-1;;;8202:44:64;;;;;1559:25:200;;;-1:-1:-1;;;;;8218:5:64;;;;8202:37;;1532:18:200;;8202:44:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8202:44:64;;;;;;;;;;;;:::i;:::-;7454:799;;;;-1:-1:-1;7454:799:64;;;;;-1:-1:-1;;;7454:799:64:o;2158:198:87:-;1348:6;;-1:-1:-1;;;;;1348:6:87;929:10:91;1488:23:87;1480:68;;;;-1:-1:-1;;;1480:68:87;;;;;;;:::i;:::-;-1:-1:-1;;;;;2246:22:87;::::1;2238:73;;;::::0;-1:-1:-1;;;2238:73:87;;17683:2:200;2238:73:87::1;::::0;::::1;17665:21:200::0;17722:2;17702:18;;;17695:30;17761:34;17741:18;;;17734:62;-1:-1:-1;;;17812:18:200;;;17805:36;17858:19;;2238:73:87::1;17481:402:200::0;2238:73:87::1;2321:28;2340:8;2321:18;:28::i;10109:775:64:-:0;10270:25;10298;10317:5;10298:18;:25::i;:::-;10270:53;;10333:30;:6;:28;:30::i;:::-;10394:6;10377:23;;:6;:13;;;:23;;;10373:58;;10409:22;;-1:-1:-1;;;10409:22:64;;;;;;;;;;;10373:58;10602:5;-1:-1:-1;;;;;10558:50:64;10594:6;10558:50;;;10572:20;10558:50;;;;;;:::i;:::-;;;;;;;;10684:37;10700:6;:12;;;10714:6;10684:15;:37::i;:::-;10836:41;10855:6;10863:5;10870:6;10836:18;:41::i;8604:146:66:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;8726:9:66;;8716:20;;:9;:20;;;;;-1:-1:-1;;;;;8716:27:66;;;;;;;;;8709:34;;;;;;;;;;-1:-1:-1;;8709:34:66;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;8604:146;-1:-1:-1;;8604:146:66:o;7966:186::-;8045:10;8032:9;;:23;8028:118;;8071:9;:22;;;8112:23;;1559:25:200;;;8112:23:66;;1547:2:200;1532:18;8112:23:66;;;;;;;7966:186;:::o;7329:233::-;7506:11;;7492:63;;-1:-1:-1;;;7492:63:66;;18068:10:200;18105:15;;;7492:63:66;;;18087:34:200;18157:15;;18137:18;;;18130:43;-1:-1:-1;;;;;7506:11:66;;;;7492:38;;18031:18:200;;7492:63:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5287:808:88;5351:4;5684:13;;;;;;;5680:409;;;5738:7;:12;;5749:1;5738:12;:61;;;;-1:-1:-1;5793:4:88;1476:19:90;:23;5738:61:88;5713:166;;;;-1:-1:-1;;;5713:166:88;;;;;;;:::i;:::-;-1:-1:-1;5900:5:88;;5287:808;-1:-1:-1;5287:808:88:o;5680:409::-;5944:12;;:22;;;;:12;;:22;5936:81;;;;-1:-1:-1;;;5936:81:88;;;;;;;:::i;:::-;-1:-1:-1;6031:12:88;:22;;-1:-1:-1;;6031:22:88;;;;;;;;;;;;-1:-1:-1;;5287:808:88:o;3311:203:64:-;4698:13:88;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:88;;;;;;;:::i;:::-;3431:6:64::1;:16:::0;;-1:-1:-1;;;;;3431:16:64;;::::1;-1:-1:-1::0;;;;;;3431:16:64;;::::1;;::::0;;;3457:11:::1;:26:::0;;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;3493:5:::1;:14:::0;;;;;::::1;::::0;::::1;;::::0;;3311:203::o;988:95:87:-;4698:13:88;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:88;;;;;;;:::i;:::-;1050:26:87::1;:24;:26::i;12447:170:64:-:0;12536:7;12589:4;12595:6;12603:5;12572:37;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;12562:48;;;;;;12555:55;;12447:170;;;;;:::o;843:900:57:-;1083:12;;978:13;;1109:17;;;1105:48;;;1135:18;;-1:-1:-1;;;1135:18:57;;;;;;;;;;;1105:48;1171:4;1163:12;;1340:9;1335:189;1359:8;1355:1;:12;1335:189;;;1473:36;1483:5;1490;1496:1;1490:8;;;;;;;;:::i;:::-;;;;;;;1500:5;1507:1;1473:9;:36::i;:::-;1465:44;-1:-1:-1;1369:3:57;;1335:189;;;-1:-1:-1;1621:8:57;1604:123;1635:6;1631:1;:10;1604:123;;;1674:38;1684:5;1699:1;1703:5;1710:1;1674:9;:38::i;:::-;1666:46;-1:-1:-1;1643:3:57;;1604:123;;;;997:746;843:900;;;;;;:::o;10982:1078:64:-;11098:27;;;11063:32;11098:27;;;:13;:27;;;;;;11063:62;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;11063:62:64;;;;;-1:-1:-1;;;11063:62:64;;-1:-1:-1;;;;;11063:62:64;;;;;;;-1:-1:-1;11160:19:64;11139:17;;:40;;;;;;;;:::i;:::-;;11135:77;;11188:24;;-1:-1:-1;;;11188:24:64;;;;;;;;;;;11135:77;11242:19;11222:39;;;-1:-1:-1;;;;;11271:33:64;;:24;;;;:33;;;;11314:27;;;-1:-1:-1;11314:27:64;;;:13;:27;;;:42;;;;11222:12;;11314:27;;-1:-1:-1;;11314:42:64;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;11314:42:64;;;;;;;;;;;;-1:-1:-1;;;;;11314:42:64;-1:-1:-1;;;11314:42:64;-1:-1:-1;;;;;;;;;;11314:42:64;;;;;;;;;;;;;;;;;;;;;11471:23;;;11314:42;;11471:28;;11467:529;;11515:20;11564:1;11538:12;:23;;;:27;;;;:::i;:::-;-1:-1:-1;;;;;11515:50:64;;;11579:28;11610:9;11620:12;11610:23;;;;;;;;:::i;:::-;;;;;;;;;;11579:54;;;;;;;;11610:23;;;;11579:54;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;11579:54:64;;;;;;;;;11647:9;:23;;11579:54;;-1:-1:-1;11686:12:64;;11657;;11647:23;;;;;;:::i;:::-;;;;;;;;;;;:51;;-1:-1:-1;;;;11647:51:64;-1:-1:-1;;;11647:51:64;;;;;;;;11779:19;;;:35;;;;;;:78;;11838:7;:19;;;11779:78;;;11817:18;;11779:78;11878:25;;;;;;;;:13;:25;;;;;;;;11871:32;;;;11922:63;;19908:25:200;;;19998:15;;;19978:18;;;19971:43;20030:18;;20023:43;-1:-1:-1;;;;;20102:32:200;;20097:2;20082:18;;20075:60;11878:25:64;;-1:-1:-1;11922:63:64;;19895:3:200;19880:19;11922:63:64;;;;;;;11501:495;;11467:529;12005:48;12028:12;12042:10;12005:22;:48::i;2510:187:87:-;2602:6;;;-1:-1:-1;;;;;2618:17:87;;;-1:-1:-1;;;;;;2618:17:87;;;;;;;2650:40;;2602:6;;;2618:17;2602:6;;2650:40;;2583:16;;2650:40;2573:124;2510:187;:::o;3845:223:47:-;3946:16;3931:11;;:31;;;;;;;;:::i;:::-;;;:69;;;;-1:-1:-1;3981:19:47;3966:11;;:34;;;;;;;;:::i;:::-;;;3931:69;3927:135;;;4023:28;;-1:-1:-1;;;4023:28:47;;;;;;;;;;;375:211:131;525:54;557:6;565:5;572:6;525:31;:54::i;1089:111:87:-;4698:13:88;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:88;;;;;;;:::i;:::-;1161:32:87::1;929:10:91::0;1161:18:87::1;:32::i;2125:526:57:-:0;2261:14;2466:1;2439:23;;;2438:29;:34;;2434:211;;2521:24;2531:4;2537:7;2521:9;:24::i;:::-;2514:31;;;;2434:211;2610:24;2620:7;2629:4;2610:9;:24::i;7645:240:66:-;7825:11;;7811:67;;-1:-1:-1;;;7811:67:66;;18068:10:200;18105:15;;;7811:67:66;;;18087:34:200;18157:15;;18137:18;;;18130:43;-1:-1:-1;;;;;7825:11:66;;;;7811:41;;18031:18:200;;7811:67:66;17888:291:200;6678:570:66;6986:6;;7134:96;;;20376:10:200;20364:23;;7134:96:66;;;20346:42:200;-1:-1:-1;;;;;20462:15:200;;;20442:18;;;20435:43;20514:15;;;20494:18;;;;20487:43;;;;7134:96:66;;;;;;;;;;20319:18:200;;;;7134:96:66;;;;;;;-1:-1:-1;;;;;7134:96:66;-1:-1:-1;;;7134:96:66;;;6970:271;;-1:-1:-1;;;6970:271:66;;6986:6;;;;;6970:42;;:271;;3861:2:45;;3406:6;;7134:96:66;6970:271;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;6678:570;;;:::o;3115:287:57:-;3196:14;3226:23;;:51;;;;-1:-1:-1;3253:24:57;;3226:51;3222:174;;;-1:-1:-1;3300:1:57;3293:8;;3222:174;3349:35;;;;;;21421:19:200;;;21456:12;;;21449:28;;;21493:12;;3349:35:57;;;;;;;;;;;;3339:46;;;;;;3332:53;;3222:174;3115:287;;;;:::o;14:522:200:-;89:6;97;105;158:2;146:9;137:7;133:23;129:32;126:52;;;174:1;171;164:12;126:52;213:9;200:23;263:6;256:5;252:18;245:5;242:29;232:57;;285:1;282;275:12;232:57;308:5;-1:-1:-1;365:2:200;350:18;;337:32;-1:-1:-1;;;;;;400:34:200;;388:47;;378:75;;449:1;446;439:12;378:75;14:522;;472:7;;-1:-1:-1;;;526:2:200;511:18;;;;498:32;;14:522::o;819:173::-;887:20;;-1:-1:-1;;;;;936:31:200;;926:42;;916:70;;982:1;979;972:12;997:411;1072:6;1080;1088;1141:2;1129:9;1120:7;1116:23;1112:32;1109:52;;;1157:1;1154;1147:12;1109:52;1180:29;1199:9;1180:29;:::i;:::-;1170:39;;1259:2;1248:9;1244:18;1231:32;1303:4;1296:5;1292:16;1285:5;1282:27;1272:55;;1323:1;1320;1313:12;1595:121;1680:10;1673:5;1669:22;1662:5;1659:33;1649:61;;1706:1;1703;1696:12;1721:456;1806:6;1814;1822;1830;1883:3;1871:9;1862:7;1858:23;1854:33;1851:53;;;1900:1;1897;1890:12;1851:53;1939:9;1926:23;1958:30;1982:5;1958:30;:::i;:::-;2007:5;-1:-1:-1;2059:2:200;2044:18;;2031:32;;-1:-1:-1;2082:38:200;2116:2;2101:18;;2082:38;:::i;:::-;1721:456;;;;-1:-1:-1;2072:48:200;;2167:2;2152:18;2139:32;;-1:-1:-1;;1721:456:200:o;2389:393::-;2465:6;2473;2481;2534:2;2522:9;2513:7;2509:23;2505:32;2502:52;;;2550:1;2547;2540:12;2502:52;2589:9;2576:23;2608:30;2632:5;2608:30;:::i;:::-;2657:5;-1:-1:-1;2681:38:200;2715:2;2700:18;;2681:38;:::i;:::-;2671:48;;2738:38;2772:2;2761:9;2757:18;2738:38;:::i;:::-;2728:48;;2389:393;;;;;:::o;2787:186::-;2846:6;2899:2;2887:9;2878:7;2874:23;2870:32;2867:52;;;2915:1;2912;2905:12;2867:52;2938:29;2957:9;2938:29;:::i;2978:127::-;3039:10;3034:3;3030:20;3027:1;3020:31;3070:4;3067:1;3060:15;3094:4;3091:1;3084:15;3110:140;3191:1;3184:5;3181:12;3171:46;;3197:18;;:::i;:::-;3226;;3110:140::o;3255:315::-;3320:44;3360:3;3352:5;3346:12;3320:44;:::i;:::-;3410:4;3399:16;;;3393:23;3435:10;3477:21;;;3461:14;;;3454:45;;;;3552:4;3541:16;;;3535:23;3531:32;3515:14;;3508:56;3255:315::o;3575:260::-;3769:2;3754:18;;3781:48;3758:9;3811:6;3781:48;:::i;3840:180::-;3899:6;3952:2;3940:9;3931:7;3927:23;3923:32;3920:52;;;3968:1;3965;3958:12;3920:52;-1:-1:-1;3991:23:200;;3840:180;-1:-1:-1;3840:180:200:o;4025:358::-;-1:-1:-1;;;;;4278:32:200;;4260:51;;4247:3;4232:19;;4320:57;4373:2;4358:18;;4350:6;4320:57;:::i;4388:518::-;4621:3;4606:19;;4655:1;4644:13;;4634:47;;4661:18;;:::i;:::-;4690:25;;;-1:-1:-1;;;;;4789:15:200;;;4784:2;4769:18;;4762:43;4841:15;;;;4836:2;4821:18;;4814:43;4888:2;4873:18;4866:34;4388:518;:::o;5093:250::-;5178:1;5188:113;5202:6;5199:1;5196:13;5188:113;;;5278:11;;;5272:18;5259:11;;;5252:39;5224:2;5217:10;5188:113;;;-1:-1:-1;;5335:1:200;5317:16;;5310:27;5093:250::o;5348:271::-;5390:3;5428:5;5422:12;5455:6;5450:3;5443:19;5471:76;5540:6;5533:4;5528:3;5524:14;5517:4;5510:5;5506:16;5471:76;:::i;:::-;5601:2;5580:15;-1:-1:-1;;5576:29:200;5567:39;;;;5608:4;5563:50;;5348:271;-1:-1:-1;;5348:271:200:o;5624:220::-;5773:2;5762:9;5755:21;5736:4;5793:45;5834:2;5823:9;5819:18;5811:6;5793:45;:::i;6034:639::-;6144:6;6152;6205:2;6193:9;6184:7;6180:23;6176:32;6173:52;;;6221:1;6218;6211:12;6173:52;6261:9;6248:23;6290:18;6331:2;6323:6;6320:14;6317:34;;;6347:1;6344;6337:12;6317:34;6385:6;6374:9;6370:22;6360:32;;6430:7;6423:4;6419:2;6415:13;6411:27;6401:55;;6452:1;6449;6442:12;6401:55;6492:2;6479:16;6518:2;6510:6;6507:14;6504:34;;;6534:1;6531;6524:12;6504:34;6587:7;6582:2;6572:6;6569:1;6565:14;6561:2;6557:23;6553:32;6550:45;6547:65;;;6608:1;6605;6598:12;6547:65;6639:2;6631:11;;;;;6661:6;;-1:-1:-1;6034:639:200;;-1:-1:-1;;;;6034:639:200:o;6678:1041::-;6868:4;6897:2;6937;6926:9;6922:18;6967:2;6956:9;6949:21;6990:6;7025;7019:13;7056:6;7048;7041:22;7082:2;7072:12;;7115:2;7104:9;7100:18;7093:25;;7177:2;7167:6;7164:1;7160:14;7149:9;7145:30;7141:39;7215:2;7207:6;7203:15;7236:1;7246:444;7260:6;7257:1;7254:13;7246:444;;;7325:22;;;-1:-1:-1;;7321:36:200;7309:49;;7381:13;;7436:9;;7429:17;7422:25;7407:41;;7487:11;;7481:18;7519:15;;;7512:27;;;7562:48;7594:15;;;7481:18;7562:48;:::i;:::-;7668:12;;;;7552:58;-1:-1:-1;;7633:15:200;;;;7282:1;7275:9;7246:444;;;-1:-1:-1;7707:6:200;;6678:1041;-1:-1:-1;;;;;;;;6678:1041:200:o;7724:319::-;7791:6;7799;7852:2;7840:9;7831:7;7827:23;7823:32;7820:52;;;7868:1;7865;7858:12;7820:52;7907:9;7894:23;7926:30;7950:5;7926:30;:::i;:::-;7975:5;-1:-1:-1;7999:38:200;8033:2;8018:18;;7999:38;:::i;:::-;7989:48;;7724:319;;;;;:::o;8453:381::-;8529:6;8537;8545;8598:2;8586:9;8577:7;8573:23;8569:32;8566:52;;;8614:1;8611;8604:12;8566:52;8653:9;8640:23;8672:30;8696:5;8672:30;:::i;:::-;8721:5;8773:2;8758:18;;8745:32;;-1:-1:-1;8824:2:200;8809:18;;;8796:32;;8453:381;-1:-1:-1;;;8453:381:200:o;8839:384::-;8905:6;8913;8966:2;8954:9;8945:7;8941:23;8937:32;8934:52;;;8982:1;8979;8972:12;8934:52;9021:9;9008:23;9040:30;9064:5;9040:30;:::i;:::-;9089:5;-1:-1:-1;9146:2:200;9131:18;;9118:32;9159;9118;9159;:::i;:::-;9210:7;9200:17;;;8839:384;;;;;:::o;9228:334::-;9305:6;9313;9321;9374:2;9362:9;9353:7;9349:23;9345:32;9342:52;;;9390:1;9387;9380:12;9342:52;9413:29;9432:9;9413:29;:::i;9567:127::-;9628:10;9623:3;9619:20;9616:1;9609:31;9659:4;9656:1;9649:15;9683:4;9680:1;9673:15;9699:253;9771:2;9765:9;9813:4;9801:17;;9848:18;9833:34;;9869:22;;;9830:62;9827:88;;;9895:18;;:::i;:::-;9931:2;9924:22;9699:253;:::o;9957:275::-;10028:2;10022:9;10093:2;10074:13;;-1:-1:-1;;10070:27:200;10058:40;;10128:18;10113:34;;10149:22;;;10110:62;10107:88;;;10175:18;;:::i;:::-;10211:2;10204:22;9957:275;;-1:-1:-1;9957:275:200:o;10237:712::-;10291:5;10344:3;10337:4;10329:6;10325:17;10321:27;10311:55;;10362:1;10359;10352:12;10311:55;10398:6;10385:20;10424:4;10447:18;10443:2;10440:26;10437:52;;;10469:18;;:::i;:::-;10515:2;10512:1;10508:10;10538:28;10562:2;10558;10554:11;10538:28;:::i;:::-;10600:15;;;10670;;;10666:24;;;10631:12;;;;10702:15;;;10699:35;;;10730:1;10727;10720:12;10699:35;10766:2;10758:6;10754:15;10743:26;;10778:142;10794:6;10789:3;10786:15;10778:142;;;10860:17;;10848:30;;10811:12;;;;10898;;;;10778:142;;;10938:5;10237:712;-1:-1:-1;;;;;;;10237:712:200:o;10954:1030::-;11086:6;11094;11102;11146:9;11137:7;11133:23;11176:3;11172:2;11168:12;11165:32;;;11193:1;11190;11183:12;11165:32;11216:29;11235:9;11216:29;:::i;:::-;11206:39;-1:-1:-1;11279:4:200;-1:-1:-1;;11261:16:200;;11257:27;11254:47;;;11297:1;11294;11287:12;11254:47;;11323:22;;:::i;:::-;11397:2;11386:9;11382:18;11369:32;11432:1;11423:7;11420:14;11410:42;;11448:1;11445;11438:12;11410:42;11461:22;;11535:2;11520:18;;11507:32;11548;11507;11548;:::i;:::-;11607:2;11596:14;;11589:31;11672:4;11657:20;;11644:34;11687:32;11644:34;11687:32;:::i;:::-;11746:2;11735:14;;11728:31;11739:5;-1:-1:-1;11834:3:200;11819:19;;11806:33;11862:18;11851:30;;11848:50;;;11894:1;11891;11884:12;11848:50;11917:61;11970:7;11961:6;11950:9;11946:22;11917:61;:::i;:::-;11907:71;;;10954:1030;;;;;:::o;11989:741::-;-1:-1:-1;;;;;12332:15:200;;;12314:34;;12384:15;;;12379:2;12364:18;;12357:43;12436:15;;;12431:2;12416:18;;12409:43;12488:15;;12483:2;12468:18;;12461:43;12541:3;12535;12520:19;;12513:32;;;12257:4;;12568:46;;12594:19;;12586:6;12568:46;:::i;:::-;12663:9;12655:6;12651:22;12645:3;12634:9;12630:19;12623:51;12691:33;12717:6;12709;12691:33;:::i;:::-;12683:41;11989:741;-1:-1:-1;;;;;;;;;11989:741:200:o;13014:127::-;13075:10;13070:3;13066:20;13063:1;13056:31;13106:4;13103:1;13096:15;13130:4;13127:1;13120:15;13146:128;13213:9;;;13234:11;;;13231:37;;;13248:18;;:::i;13279:127::-;13340:10;13335:3;13331:20;13328:1;13321:31;13371:4;13368:1;13361:15;13395:4;13392:1;13385:15;13411:321;13501:4;13559:11;13546:25;13653:2;13649:7;13638:8;13622:14;13618:29;13614:43;13594:18;13590:68;13580:96;;13672:1;13669;13662:12;13580:96;13693:33;;;;;13411:321;-1:-1:-1;;13411:321:200:o;13737:521::-;13814:4;13820:6;13880:11;13867:25;13974:2;13970:7;13959:8;13943:14;13939:29;13935:43;13915:18;13911:68;13901:96;;13993:1;13990;13983:12;13901:96;14020:33;;14072:20;;;-1:-1:-1;14115:18:200;14104:30;;14101:50;;;14147:1;14144;14137:12;14101:50;14180:4;14168:17;;-1:-1:-1;14211:14:200;14207:27;;;14197:38;;14194:58;;;14248:1;14245;14238:12;14194:58;13737:521;;;;;:::o;14263:271::-;14446:6;14438;14433:3;14420:33;14402:3;14472:16;;14497:13;;;14472:16;14263:271;-1:-1:-1;14263:271:200:o;14539:356::-;14741:2;14723:21;;;14760:18;;;14753:30;14819:34;14814:2;14799:18;;14792:62;14886:2;14871:18;;14539:356::o;14900:169::-;14978:13;;15031:12;15020:24;;15010:35;;15000:63;;15059:1;15056;15049:12;15074:415;15159:6;15167;15175;15228:2;15216:9;15207:7;15203:23;15199:32;15196:52;;;15244:1;15241;15234:12;15196:52;15267:39;15296:9;15267:39;:::i;:::-;15257:49;;15325:48;15369:2;15358:9;15354:18;15325:48;:::i;:::-;15315:58;;15416:2;15405:9;15401:18;15395:25;15429:30;15453:5;15429:30;:::i;:::-;15478:5;15468:15;;;15074:415;;;;;:::o;15494:125::-;15559:9;;;15580:10;;;15577:36;;;15593:18;;:::i;16190:209::-;16337:2;16322:18;;16349:44;16326:9;16375:6;16349:44;:::i;16404:509::-;16457:5;16510:3;16503:4;16495:6;16491:17;16487:27;16477:55;;16528:1;16525;16518:12;16477:55;16557:6;16551:13;16583:18;16579:2;16576:26;16573:52;;;16605:18;;:::i;:::-;16649:55;16692:2;16673:13;;-1:-1:-1;;16669:27:200;16698:4;16665:38;16649:55;:::i;:::-;16729:2;16720:7;16713:19;16775:3;16768:4;16763:2;16755:6;16751:15;16747:26;16744:35;16741:55;;;16792:1;16789;16782:12;16741:55;16805:77;16879:2;16872:4;16863:7;16859:18;16852:4;16844:6;16840:17;16805:77;:::i;16918:558::-;17015:6;17023;17076:2;17064:9;17055:7;17051:23;17047:32;17044:52;;;17092:1;17089;17082:12;17044:52;17125:9;17119:16;17154:18;17195:2;17187:6;17184:14;17181:34;;;17211:1;17208;17201:12;17181:34;17234:60;17286:7;17277:6;17266:9;17262:22;17234:60;:::i;:::-;17224:70;;17340:2;17329:9;17325:18;17319:25;17303:41;;17369:2;17359:8;17356:16;17353:36;;;17385:1;17382;17375:12;17353:36;;17408:62;17462:7;17451:8;17440:9;17436:24;17408:62;:::i;:::-;17398:72;;;16918:558;;;;;:::o;18184:410::-;18386:2;18368:21;;;18425:2;18405:18;;;18398:30;18464:34;18459:2;18444:18;;18437:62;-1:-1:-1;;;18530:2:200;18515:18;;18508:44;18584:3;18569:19;;18184:410::o;18599:407::-;18801:2;18783:21;;;18840:2;18820:18;;;18813:30;18879:34;18874:2;18859:18;;18852:62;-1:-1:-1;;;18945:2:200;18930:18;;18923:41;18996:3;18981:19;;18599:407::o;19011:471::-;19189:3;19228:1;19220:6;19217:13;19207:47;;19234:18;;:::i;:::-;-1:-1:-1;19279:3:200;19275:16;;;;19263:29;;19347:3;19325:16;;;;-1:-1:-1;;;;;;19321:43:200;19317:1;19308:11;;19301:64;19402:2;19398:15;-1:-1:-1;;19394:53:200;19390:1;19381:11;;19374:74;19473:2;19464:12;;19011:471::o;19487:189::-;-1:-1:-1;;;;;19612:10:200;;;19600;;;19596:27;;19635:12;;;19632:38;;;19650:18;;:::i;:::-;19632:38;19487:189;;;;:::o;20541:403::-;20703:4;20732:10;20781:2;20773:6;20769:15;20758:9;20751:34;20833:2;20825:6;20821:15;20816:2;20805:9;20801:18;20794:43;;20873:2;20868;20857:9;20853:18;20846:30;20893:45;20934:2;20923:9;20919:18;20911:6;20893:45;:::i;:::-;20885:53;20541:403;-1:-1:-1;;;;;20541:403:200:o;20949:310::-;21027:6;21035;21088:2;21076:9;21067:7;21063:23;21059:32;21056:52;;;21104:1;21101;21094:12;21056:52;21136:9;21130:16;21155:30;21179:5;21155:30;:::i;:::-;21249:2;21234:18;;;;21228:25;21204:5;;21228:25;;-1:-1:-1;;;20949:310:200:o",
    "linkReferences": {},
    "immutableReferences": {
      "2822": [
        {
          "start": 897,
          "length": 32
        }
      ],
      "2954": [
        {
          "start": 712,
          "length": 32
        }
      ],
      "2957": [
        {
          "start": 747,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "agentRoot()": "36cba43c",
    "agentStatus(address)": "28f3fac9",
    "destination()": "b269681d",
    "disputeStatus(address)": "3463d1b1",
    "getAgent(uint256)": "2de5aaf7",
    "getDispute(uint256)": "e3a96cbd",
    "getDisputesAmount()": "3aaeccc6",
    "inbox()": "fb0e722b",
    "initialize(address,address,address)": "c0c53b8b",
    "localDomain()": "8d3638f4",
    "multicall((bool,bytes)[])": "60fc8466",
    "openDispute(uint32,uint32)": "a2155c34",
    "origin()": "938b5f32",
    "owner()": "8da5cb5b",
    "remoteMockFunc(uint32,uint256,bytes32)": "a149352c",
    "remoteWithdrawTips(uint32,uint256,address,uint256)": "1fa07138",
    "renounceOwnership()": "715018a6",
    "resolveStuckDispute(uint32,address)": "89791e17",
    "sensitiveMockFunc(address,uint8,bytes32)": "127a2c9d",
    "sensitiveMockFuncOver32Bytes(uint16,bytes4,bytes32)": "0e6bfcd5",
    "sensitiveMockFuncVoid(uint16,bytes4,bytes32)": "c9f1a03f",
    "setAgentRoot(bytes32)": "58668176",
    "slashAgent(uint32,address,address)": "2853a0e6",
    "slashAgentExposed(uint32,address,address)": "69978b0d",
    "transferOwnership(address)": "f2fde38b",
    "updateAgentStatus(address,(uint8,uint32,uint32),bytes32[])": "cbd05965",
    "version()": "54fd4d50"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AgentNotActiveNorUnstaking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotInbox\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeAlreadyResolved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeNotOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeNotStuck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardInDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectAgentDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectAgentIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectAgentProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectVersionLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeSynapseDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotaryInDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SynapseDomainForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TreeHeightTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawTipsOptimisticPeriod\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"DisputeOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"slashedIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rivalIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"RootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"agentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"disputeStatus\",\"outputs\":[{\"internalType\":\"enum DisputeFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rival\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"disputePtr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDispute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"reportPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"reportSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbox_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Result[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"remoteMockFunc\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"msgOrigin\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"proofMaturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"remoteWithdrawTips\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"}],\"name\":\"resolveStuckDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"sensitiveMockFunc\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"sensitiveMockFuncOver32Bytes\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sensitiveMockFuncVoid\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentRoot_\",\"type\":\"bytes32\"}],\"name\":\"setAgentRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"slashAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"slashAgentExposed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgentStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"versionString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"agentStatus(address)\":{\"details\":\"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"status\":\"Status for the given agent: (flag, domain, index).\"}},\"disputeStatus(address)\":{\"details\":\"Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"disputePtr\":\"  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\",\"flag\":\"        Flag describing the current Dispute status for the agent: None/Pending/Slashed\",\"fraudProver\":\" Address who provided fraud proof to resolve the Dispute\",\"rival\":\"       Address of the rival agent in the Dispute\"}},\"getAgent(uint256)\":{\"details\":\"Will return empty values if agent with given index doesn't exist.\",\"params\":{\"index\":\"Agent index in the Agent Merkle Tree\"},\"returns\":{\"agent\":\"   Agent address\",\"status\":\"  Status for the given agent: (flag, domain, index)\"}},\"getDispute(uint256)\":{\"details\":\"Will revert if dispute with given index hasn't been opened yet.\",\"params\":{\"index\":\"Dispute index\"},\"returns\":{\"fraudProver\":\"     Address who provided fraud proof to resolve the Dispute\",\"guard\":\"           Address of the Guard in the Dispute\",\"notary\":\"          Address of the Notary in the Dispute\",\"reportPayload\":\"   Raw payload with report data that led to the Dispute\",\"reportSignature\":\" Guard signature for the report payload\",\"slashedAgent\":\"    Address of the Agent who was slashed when Dispute was resolved\"}},\"getDisputesAmount()\":{\"details\":\"This includes the Disputes that have been resolved already.\"},\"openDispute(uint32,uint32)\":{\"params\":{\"guardIndex\":\"Index of the Guard in the Agent Merkle Tree\",\"notaryIndex\":\"Index of the Notary in the Agent Merkle Tree\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remoteWithdrawTips(uint32,uint256,address,uint256)\":{\"details\":\"Could only be remote-called by BondingManager contract on Synapse Chain. Note: as an extra security check this function returns its own selector, so that Destination could verify that a \\\"remote\\\" function was called when executing a manager message.\",\"params\":{\"amount\":\"Tips value to withdraw\",\"recipient\":\"Address to withdraw tips to\"}},\"renounceOwnership()\":{\"details\":\"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op\"},\"resolveStuckDispute(uint32,address)\":{\"params\":{\"slashedAgent\":\"Agent that is being slashed\"}},\"setAgentRoot(bytes32)\":{\"params\":{\"agentRoot\":\"New Agent Merkle Root\"}},\"slashAgent(uint32,address,address)\":{\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent is active\",\"prover\":\"Address that initially provided fraud proof\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAgentStatus(address,(uint8,uint32,uint32),bytes32[])\":{\"details\":\"Will revert if the provided proof doesn't match the latest merkle root.\",\"params\":{\"agent\":\"Agent address\",\"proof\":\"Merkle proof of Active status for the agent\",\"status\":\"Structure specifying agent status: (flag, domain, index)\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DisputeOpened(uint256,uint32,uint32)\":{\"notice\":\"Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits their report for the Notary-signed statement to `StatementInbox`.\"},\"DisputeResolved(uint256,uint32,uint32,address)\":{\"notice\":\"Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed. Note: this won't be emitted, if an Agent was slashed without being in Dispute.\"},\"RootUpdated(bytes32)\":{\"notice\":\"Emitted whenever the root of the Agent Merkle Tree is updated.\"},\"StatusUpdated(uint8,uint32,address)\":{\"notice\":\"Emitted whenever a status of the agent is updated.\"}},\"kind\":\"user\",\"methods\":{\"agentRoot()\":{\"notice\":\"Returns the latest known root of the Agent Merkle Tree.\"},\"agentStatus(address)\":{\"notice\":\"Returns (flag, domain, index) for a given agent. See Structures.sol for details.\"},\"disputeStatus(address)\":{\"notice\":\"Returns the current Dispute status of a given agent. See Structures.sol for details.\"},\"getAgent(uint256)\":{\"notice\":\"Returns agent address and their current status for a given agent index.\"},\"getDispute(uint256)\":{\"notice\":\"Returns information about the dispute with the given index.\"},\"getDisputesAmount()\":{\"notice\":\"Returns the number of opened Disputes.\"},\"localDomain()\":{\"notice\":\"Domain of the local chain, set once upon contract creation\"},\"multicall((bool,bytes)[])\":{\"notice\":\"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\"},\"openDispute(uint32,uint32)\":{\"notice\":\"Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. > Will revert if any of these is true: > - Caller is not Inbox. > - Guard or Notary is already in Dispute.\"},\"remoteWithdrawTips(uint32,uint256,address,uint256)\":{\"notice\":\"Withdraws locked base message tips from local Origin to the recipient.\"},\"resolveStuckDispute(uint32,address)\":{\"notice\":\"Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. > Will revert if any of these is true: > - Caller is not contract owner. > - Domain doesn't match the saved agent domain. > - `slashedAgent` is not in Dispute. > - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\"},\"sensitiveMockFunc(address,uint8,bytes32)\":{\"notice\":\"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\"},\"sensitiveMockFuncOver32Bytes(uint16,bytes4,bytes32)\":{\"notice\":\"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\"},\"sensitiveMockFuncVoid(uint16,bytes4,bytes32)\":{\"notice\":\"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\"},\"setAgentRoot(bytes32)\":{\"notice\":\"Updates the root of Agent Merkle Tree that the Light Manager is tracking. Could be only called by a local Destination contract, which is supposed to verify the attested Agent Merkle Roots.\"},\"slashAgent(uint32,address,address)\":{\"notice\":\"Allows Inbox to slash an agent, if their fraud was proven. > Will revert if any of these is true: > - Caller is not Inbox. > - Domain doesn't match the saved agent domain.\"},\"slashAgentExposed(uint32,address,address)\":{\"notice\":\"Exposes _slashAgent for testing.\"},\"updateAgentStatus(address,(uint8,uint32,uint32),bytes32[])\":{\"notice\":\"Updates agent status, using a proof against the latest known Agent Merkle Root.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/harnesses/manager/LightManagerHarness.t.sol\":\"LightManagerHarness\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/base/MessagingBase.sol\":{\"keccak256\":\"0x01a7e9d9a5547e90d2efc4478485c7fc308a870d596a47d2b59383eaf2a02dd1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2a5ab808e51515e2a8d2efccb3f9d89054c2fc7e9cb5f44514b734a097d8c114\",\"dweb:/ipfs/QmUJ1E1MXy1H2Nb8xCGA7hpsTMNF3CXNoU11qGyd5M8498\"]},\"contracts/base/MultiCallable.sol\":{\"keccak256\":\"0x9645f1629cdf8db803c40725f6b0ee165df64bfc142db4613efd385a88f13699\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc99799fdd946c11c893b89dad922822c866d14bdecded86913948a146f71053\",\"dweb:/ipfs/QmZGRZuhU2w6pAStcaQ5NyzyeUn69nJCJd9a9NnjuBVLsn\"]},\"contracts/base/Version.sol\":{\"keccak256\":\"0x63131bbdb149a0c83685da246afc0faa71d1009a20154b1f39650cef4369fe84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21f001efca9d0550162dd1154f5b1d977c85a703e6df883103638ae0fe65af9b\",\"dweb:/ipfs/QmX3BfuJ3yKxWFXphq6RcKcGrja1v5xJQ1fFCwRQvGV8u8\"]},\"contracts/events/AgentManagerEvents.sol\":{\"keccak256\":\"0xa56624a0db82d304bfba608d1b4d58f9c3d6165d6f7bfb2f7b90d91f232b646a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://32f9e512ad758b98cb3a99611a2cac035ec9e8b0e4f031c88ea8dd46bb2a7dbe\",\"dweb:/ipfs/QmbZXsV3jcBgbsAc8FRGTkMrWDVHPk19p2GoKkxmHov9ei\"]},\"contracts/interfaces/IAgentManager.sol\":{\"keccak256\":\"0xc6fded8bc39cdb24e2bc038ba9b0ae168ad42fb15ed9d5883b89940b4e970a10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://898f25a9d1f375ab7e5dc7cd791263934b50d3b0a44dc29a4c914578a1b06339\",\"dweb:/ipfs/QmXi3CVhvWpGxVvmw4n7UvEoX2bD2ZD2rg4oZhYETYWJ3a\"]},\"contracts/interfaces/IAgentSecured.sol\":{\"keccak256\":\"0x9a7efecf8fe37cc8245e3b0e3f5d6d6ee056cdd97ccb5631ff6347bdfc9fc889\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7877d223162a76d3fe75490069719b3a4f14cd66fc42bfa915f2813390b7d2aa\",\"dweb:/ipfs/QmZhE1rnffA9bbtkNAwVk6iitMPk14gHbK56mdeHQEPhxj\"]},\"contracts/interfaces/IStatementInbox.sol\":{\"keccak256\":\"0x99c93edd056d33d33ce57ae7d6d17328b88e94fe971c4e9d23d2fceaa9f1e41c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76a2cf74f7a24ab3c669efab5372dff18a29463504b09a0d3dde4b4184a2eff3\",\"dweb:/ipfs/Qmb1sy2izNESmgS8FVkFHMXpWc2UM3unQeKMghFYCHNfn4\"]},\"contracts/interfaces/InterfaceBondingManager.sol\":{\"keccak256\":\"0x0c94cb27bd86eb1f0a48bf9ae15f747f4d0cc9c3e210a7eb75f255d44ccb3ec6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3ca990b2704379039a58af30ef2e4f8db6165d8634cb77bcf2c34a1f3c09eb42\",\"dweb:/ipfs/Qmb5aNdpJrqry3o87KWwYf23kT691xf7GujzmQFy2S3sop\"]},\"contracts/interfaces/InterfaceDestination.sol\":{\"keccak256\":\"0x708371d239580f8e6dc44e790fd32f47e074cbfb8ae9e75609adbc0de303678c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5061c85c3779304f5c3919d2b1bc6620d1029a4ead7186c3f3f5b409a9bd855\",\"dweb:/ipfs/QmW4Hrz2NGMCRV2Rqv22G4xArsR4jUZtNr1garSR8AZud6\"]},\"contracts/interfaces/InterfaceLightManager.sol\":{\"keccak256\":\"0xfd56fe81fd6776faae469d615e66d71387512fac1997157a1dd3f80ada8e7dac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e1ef5b8bbdc189ce2148cc74f61f6eb9ca8bdcbf53ac84948ec72953ed4433d2\",\"dweb:/ipfs/Qmbe1Qm94avKV2mw1Yj33SZ698ykCA8vEpZhqjL9o4oqev\"]},\"contracts/interfaces/InterfaceOrigin.sol\":{\"keccak256\":\"0xe2c7feb15991348e274a413ee7e24c4cc4e2225c851924955ad2f025c8b5c42f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://314cdd9daf29e9d6ed288e02be302487cce6c0ca89805e5e8f6d78fb150c6ea6\",\"dweb:/ipfs/QmP6vY22Cpf45a3eDR6hPBnDDqCPcu4cRXJhH7W41ohkD6\"]},\"contracts/libs/Constants.sol\":{\"keccak256\":\"0x00f447e219d27f9a864847f8038c4bac16f59e2fb37c5c0de1b554d48d41ba48\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c3b8452f969900c9ffbfae74dd73d076d9eace7e2448015b6c46ca8dd4d4402\",\"dweb:/ipfs/QmXGya3YqdmTXNdzTs1ZLMXJZnfJb49Sw5soXhjHbq8qnk\"]},\"contracts/libs/Errors.sol\":{\"keccak256\":\"0xe9a2059a2ad04e5a8ce5a6fcd091541dcd1b745edb1ce36fd97b188fe8a24011\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36c91869720c13e9f207ef4a96147c1bcdc75574fb84eacfd8a5a4efe4e5210b\",\"dweb:/ipfs/QmRuYYPnsuES87cQTAag63gdVf22pL7UjF9pvzBt87iGyB\"]},\"contracts/libs/Structures.sol\":{\"keccak256\":\"0x3eaa63f5d9aac514328111e8fdd037dc6fdb18af7541a8287deeacd2e44f7137\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://633619910c74a0685ef2993a2e7cc44088929121a15c8a9fc26c9bbadffbda71\",\"dweb:/ipfs/QmZceJv6UntiMWW4JZHbmytLsqXshbuav8yoiritksvqqy\"]},\"contracts/libs/merkle/MerkleMath.sol\":{\"keccak256\":\"0xbd13c07bdc40b80f56c7d75e3f31b6c4a85a78d444b760604a5b71083d14925c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3162b491e4e216c0f2d143ce3baab4cf9e2a8b1b42466256a5d5b1f8b0385507\",\"dweb:/ipfs/QmYnDSZyxiGHfmB8Fx46zh1LZe3aCdVaKzpaQuD9piTc7u\"]},\"contracts/libs/stack/GasData.sol\":{\"keccak256\":\"0x2007fd4b97cf33bfe4aa7dc6ac887af87b4010ec9834636b4dd5685582ac26cb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b54ca8b659d63ef7138c5b3b243190ca19b1e893b7b49dee1f8790d55b9e691\",\"dweb:/ipfs/Qmc2FGb16uosZ5kvyEK2onpWVPvWeE9X72xNWeJw8CbweD\"]},\"contracts/libs/stack/Number.sol\":{\"keccak256\":\"0xe4e0d66268eb69304cda001a3e03242e9f4af8680830c92b3d6ebe83e96acb96\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f70c28a10a2d34849614ff51c74f8c6107093b4d01eb865b2ab0d4efe9294cfd\",\"dweb:/ipfs/QmQbXCnHfPJjdNCK1UuQ2ShNan6H7j5s9DLS4HygQ5wfP5\"]},\"contracts/manager/AgentManager.sol\":{\"keccak256\":\"0x6b6bb9d62e624a5efa1d3bfbf0571a117ee48bbbb3868ebb6f8ff58071f6d475\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ac93ed3f2c169c0297dd70f37e72595799738b4879131be12292dea8f5625663\",\"dweb:/ipfs/QmNwi7wXMaxg4kg4RxsUrxhz4jLocT7XrVyvQ2dfEAHqJi\"]},\"contracts/manager/LightManager.sol\":{\"keccak256\":\"0x174147269ca22fbaa91accd50de05a8190e11b2d6847323a4ec3a7458e8c2cda\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1f10c56e793c383ef84f3bd10b499b76dcf1a5b59b5cc5efad1747cde7fb2d5b\",\"dweb:/ipfs/QmY6PaFz899oCoap5Pf3ng7iwmzREuTD9c2FAoRUFv6Y1b\"]},\"node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7\",\"dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh\"]},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"test/harnesses/manager/AgentManagerHarness.t.sol\":{\"keccak256\":\"0x6ad504f142be190f4b3fa158162445fb56d29443022041f2c17eb485be4f886b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://365788b0d405bacced74fda6f4ab0335e48496a3ced3ae4a4b6487983c5723d3\",\"dweb:/ipfs/QmQuogm7HhTZzkGPzHtMshocskqdga4T11FAVx6dVmueru\"]},\"test/harnesses/manager/LightManagerHarness.t.sol\":{\"keccak256\":\"0x279a395b190307c17eb1312425b4956a15fcff34c2e98e988167e2fa42d0c126\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c9f7c0bfadefe1c73b68d1bfe4506cb6a4d9314a28988d5f4e4244be76d682b9\",\"dweb:/ipfs/QmXqNw2NXYHPUSbfS6GwJ39TjJrg45xaU98mXXoq2q23Xh\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AgentNotActiveNorUnstaking"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CallerNotDestination"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CallerNotInbox"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DisputeAlreadyResolved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DisputeNotOpened"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DisputeNotStuck"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "GuardInDispute"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "IncorrectAgentDomain"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "IncorrectAgentIndex"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "IncorrectAgentProof"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "IncorrectVersionLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "IndexOutOfRange"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MustBeSynapseDomain"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotaryInDispute"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "SynapseDomainForbidden"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TreeHeightTooLow"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "WithdrawTipsOptimisticPeriod"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "disputeIndex",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint32",
              "name": "guardIndex",
              "type": "uint32",
              "indexed": false
            },
            {
              "internalType": "uint32",
              "name": "notaryIndex",
              "type": "uint32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DisputeOpened",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "disputeIndex",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint32",
              "name": "slashedIndex",
              "type": "uint32",
              "indexed": false
            },
            {
              "internalType": "uint32",
              "name": "rivalIndex",
              "type": "uint32",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "fraudProver",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DisputeResolved",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "newRoot",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RootUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "enum AgentFlag",
              "name": "flag",
              "type": "uint8",
              "indexed": false
            },
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "agent",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "StatusUpdated",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "agentRoot",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "agentStatus",
          "outputs": [
            {
              "internalType": "struct AgentStatus",
              "name": "status",
              "type": "tuple",
              "components": [
                {
                  "internalType": "enum AgentFlag",
                  "name": "flag",
                  "type": "uint8"
                },
                {
                  "internalType": "uint32",
                  "name": "domain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "index",
                  "type": "uint32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "destination",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "disputeStatus",
          "outputs": [
            {
              "internalType": "enum DisputeFlag",
              "name": "flag",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "rival",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "fraudProver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "disputePtr",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAgent",
          "outputs": [
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "struct AgentStatus",
              "name": "status",
              "type": "tuple",
              "components": [
                {
                  "internalType": "enum AgentFlag",
                  "name": "flag",
                  "type": "uint8"
                },
                {
                  "internalType": "uint32",
                  "name": "domain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "index",
                  "type": "uint32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getDispute",
          "outputs": [
            {
              "internalType": "address",
              "name": "guard",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "notary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "slashedAgent",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "fraudProver",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "reportPayload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "reportSignature",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDisputesAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "inbox",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "origin_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "destination_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inbox_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "localDomain",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct MultiCallable.Call[]",
              "name": "calls",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bool",
                  "name": "allowFailure",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "struct MultiCallable.Result[]",
              "name": "callResults",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bool",
                  "name": "success",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "returnData",
                  "type": "bytes"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "guardIndex",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "notaryIndex",
              "type": "uint32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "openDispute"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "origin",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "remoteMockFunc",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "msgOrigin",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "proofMaturity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "remoteWithdrawTips",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "magicValue",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "slashedAgent",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "resolveStuckDispute"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "data",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "sensitiveMockFunc",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            },
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "data",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "sensitiveMockFuncOver32Bytes",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            },
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "sensitiveMockFuncVoid"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "agentRoot_",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setAgentRoot"
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "prover",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "slashAgent"
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "prover",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "slashAgentExposed"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "struct AgentStatus",
              "name": "status",
              "type": "tuple",
              "components": [
                {
                  "internalType": "enum AgentFlag",
                  "name": "flag",
                  "type": "uint8"
                },
                {
                  "internalType": "uint32",
                  "name": "domain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "index",
                  "type": "uint32"
                }
              ]
            },
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateAgentStatus"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "versionString",
              "type": "string"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "agentStatus(address)": {
            "details": "Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.",
            "params": {
              "agent": "Agent address"
            },
            "returns": {
              "status": "Status for the given agent: (flag, domain, index)."
            }
          },
          "disputeStatus(address)": {
            "details": "Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.",
            "params": {
              "agent": "Agent address"
            },
            "returns": {
              "disputePtr": "  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.",
              "flag": "        Flag describing the current Dispute status for the agent: None/Pending/Slashed",
              "fraudProver": " Address who provided fraud proof to resolve the Dispute",
              "rival": "       Address of the rival agent in the Dispute"
            }
          },
          "getAgent(uint256)": {
            "details": "Will return empty values if agent with given index doesn't exist.",
            "params": {
              "index": "Agent index in the Agent Merkle Tree"
            },
            "returns": {
              "agent": "   Agent address",
              "status": "  Status for the given agent: (flag, domain, index)"
            }
          },
          "getDispute(uint256)": {
            "details": "Will revert if dispute with given index hasn't been opened yet.",
            "params": {
              "index": "Dispute index"
            },
            "returns": {
              "fraudProver": "     Address who provided fraud proof to resolve the Dispute",
              "guard": "           Address of the Guard in the Dispute",
              "notary": "          Address of the Notary in the Dispute",
              "reportPayload": "   Raw payload with report data that led to the Dispute",
              "reportSignature": " Guard signature for the report payload",
              "slashedAgent": "    Address of the Agent who was slashed when Dispute was resolved"
            }
          },
          "getDisputesAmount()": {
            "details": "This includes the Disputes that have been resolved already."
          },
          "openDispute(uint32,uint32)": {
            "params": {
              "guardIndex": "Index of the Guard in the Agent Merkle Tree",
              "notaryIndex": "Index of the Notary in the Agent Merkle Tree"
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "remoteWithdrawTips(uint32,uint256,address,uint256)": {
            "details": "Could only be remote-called by BondingManager contract on Synapse Chain. Note: as an extra security check this function returns its own selector, so that Destination could verify that a \"remote\" function was called when executing a manager message.",
            "params": {
              "amount": "Tips value to withdraw",
              "recipient": "Address to withdraw tips to"
            }
          },
          "renounceOwnership()": {
            "details": "Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op"
          },
          "resolveStuckDispute(uint32,address)": {
            "params": {
              "slashedAgent": "Agent that is being slashed"
            }
          },
          "setAgentRoot(bytes32)": {
            "params": {
              "agentRoot": "New Agent Merkle Root"
            }
          },
          "slashAgent(uint32,address,address)": {
            "params": {
              "agent": "Address of the Agent",
              "domain": "Domain where the Agent is active",
              "prover": "Address that initially provided fraud proof"
            }
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          },
          "updateAgentStatus(address,(uint8,uint32,uint32),bytes32[])": {
            "details": "Will revert if the provided proof doesn't match the latest merkle root.",
            "params": {
              "agent": "Agent address",
              "proof": "Merkle proof of Active status for the agent",
              "status": "Structure specifying agent status: (flag, domain, index)"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "agentRoot()": {
            "notice": "Returns the latest known root of the Agent Merkle Tree."
          },
          "agentStatus(address)": {
            "notice": "Returns (flag, domain, index) for a given agent. See Structures.sol for details."
          },
          "disputeStatus(address)": {
            "notice": "Returns the current Dispute status of a given agent. See Structures.sol for details."
          },
          "getAgent(uint256)": {
            "notice": "Returns agent address and their current status for a given agent index."
          },
          "getDispute(uint256)": {
            "notice": "Returns information about the dispute with the given index."
          },
          "getDisputesAmount()": {
            "notice": "Returns the number of opened Disputes."
          },
          "localDomain()": {
            "notice": "Domain of the local chain, set once upon contract creation"
          },
          "multicall((bool,bytes)[])": {
            "notice": "Aggregates a few calls to this contract into one multicall without modifying `msg.sender`."
          },
          "openDispute(uint32,uint32)": {
            "notice": "Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. > Will revert if any of these is true: > - Caller is not Inbox. > - Guard or Notary is already in Dispute."
          },
          "remoteWithdrawTips(uint32,uint256,address,uint256)": {
            "notice": "Withdraws locked base message tips from local Origin to the recipient."
          },
          "resolveStuckDispute(uint32,address)": {
            "notice": "Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. > Will revert if any of these is true: > - Caller is not contract owner. > - Domain doesn't match the saved agent domain. > - `slashedAgent` is not in Dispute. > - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox."
          },
          "sensitiveMockFunc(address,uint8,bytes32)": {
            "notice": "Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)"
          },
          "sensitiveMockFuncOver32Bytes(uint16,bytes4,bytes32)": {
            "notice": "Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)"
          },
          "sensitiveMockFuncVoid(uint16,bytes4,bytes32)": {
            "notice": "Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)"
          },
          "setAgentRoot(bytes32)": {
            "notice": "Updates the root of Agent Merkle Tree that the Light Manager is tracking. Could be only called by a local Destination contract, which is supposed to verify the attested Agent Merkle Roots."
          },
          "slashAgent(uint32,address,address)": {
            "notice": "Allows Inbox to slash an agent, if their fraud was proven. > Will revert if any of these is true: > - Caller is not Inbox. > - Domain doesn't match the saved agent domain."
          },
          "slashAgentExposed(uint32,address,address)": {
            "notice": "Exposes _slashAgent for testing."
          },
          "updateAgentStatus(address,(uint8,uint32,uint32),bytes32[])": {
            "notice": "Updates agent status, using a proof against the latest known Agent Merkle Root."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=node_modules/@openzeppelin/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "hardhat/=node_modules/hardhat/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "test/harnesses/manager/LightManagerHarness.t.sol": "LightManagerHarness"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/MessagingBase.sol": {
        "keccak256": "0x01a7e9d9a5547e90d2efc4478485c7fc308a870d596a47d2b59383eaf2a02dd1",
        "urls": [
          "bzz-raw://2a5ab808e51515e2a8d2efccb3f9d89054c2fc7e9cb5f44514b734a097d8c114",
          "dweb:/ipfs/QmUJ1E1MXy1H2Nb8xCGA7hpsTMNF3CXNoU11qGyd5M8498"
        ],
        "license": "MIT"
      },
      "contracts/base/MultiCallable.sol": {
        "keccak256": "0x9645f1629cdf8db803c40725f6b0ee165df64bfc142db4613efd385a88f13699",
        "urls": [
          "bzz-raw://cc99799fdd946c11c893b89dad922822c866d14bdecded86913948a146f71053",
          "dweb:/ipfs/QmZGRZuhU2w6pAStcaQ5NyzyeUn69nJCJd9a9NnjuBVLsn"
        ],
        "license": "MIT"
      },
      "contracts/base/Version.sol": {
        "keccak256": "0x63131bbdb149a0c83685da246afc0faa71d1009a20154b1f39650cef4369fe84",
        "urls": [
          "bzz-raw://21f001efca9d0550162dd1154f5b1d977c85a703e6df883103638ae0fe65af9b",
          "dweb:/ipfs/QmX3BfuJ3yKxWFXphq6RcKcGrja1v5xJQ1fFCwRQvGV8u8"
        ],
        "license": "MIT"
      },
      "contracts/events/AgentManagerEvents.sol": {
        "keccak256": "0xa56624a0db82d304bfba608d1b4d58f9c3d6165d6f7bfb2f7b90d91f232b646a",
        "urls": [
          "bzz-raw://32f9e512ad758b98cb3a99611a2cac035ec9e8b0e4f031c88ea8dd46bb2a7dbe",
          "dweb:/ipfs/QmbZXsV3jcBgbsAc8FRGTkMrWDVHPk19p2GoKkxmHov9ei"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IAgentManager.sol": {
        "keccak256": "0xc6fded8bc39cdb24e2bc038ba9b0ae168ad42fb15ed9d5883b89940b4e970a10",
        "urls": [
          "bzz-raw://898f25a9d1f375ab7e5dc7cd791263934b50d3b0a44dc29a4c914578a1b06339",
          "dweb:/ipfs/QmXi3CVhvWpGxVvmw4n7UvEoX2bD2ZD2rg4oZhYETYWJ3a"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IAgentSecured.sol": {
        "keccak256": "0x9a7efecf8fe37cc8245e3b0e3f5d6d6ee056cdd97ccb5631ff6347bdfc9fc889",
        "urls": [
          "bzz-raw://7877d223162a76d3fe75490069719b3a4f14cd66fc42bfa915f2813390b7d2aa",
          "dweb:/ipfs/QmZhE1rnffA9bbtkNAwVk6iitMPk14gHbK56mdeHQEPhxj"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IStatementInbox.sol": {
        "keccak256": "0x99c93edd056d33d33ce57ae7d6d17328b88e94fe971c4e9d23d2fceaa9f1e41c",
        "urls": [
          "bzz-raw://76a2cf74f7a24ab3c669efab5372dff18a29463504b09a0d3dde4b4184a2eff3",
          "dweb:/ipfs/Qmb1sy2izNESmgS8FVkFHMXpWc2UM3unQeKMghFYCHNfn4"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/InterfaceBondingManager.sol": {
        "keccak256": "0x0c94cb27bd86eb1f0a48bf9ae15f747f4d0cc9c3e210a7eb75f255d44ccb3ec6",
        "urls": [
          "bzz-raw://3ca990b2704379039a58af30ef2e4f8db6165d8634cb77bcf2c34a1f3c09eb42",
          "dweb:/ipfs/Qmb5aNdpJrqry3o87KWwYf23kT691xf7GujzmQFy2S3sop"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/InterfaceDestination.sol": {
        "keccak256": "0x708371d239580f8e6dc44e790fd32f47e074cbfb8ae9e75609adbc0de303678c",
        "urls": [
          "bzz-raw://e5061c85c3779304f5c3919d2b1bc6620d1029a4ead7186c3f3f5b409a9bd855",
          "dweb:/ipfs/QmW4Hrz2NGMCRV2Rqv22G4xArsR4jUZtNr1garSR8AZud6"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/InterfaceLightManager.sol": {
        "keccak256": "0xfd56fe81fd6776faae469d615e66d71387512fac1997157a1dd3f80ada8e7dac",
        "urls": [
          "bzz-raw://e1ef5b8bbdc189ce2148cc74f61f6eb9ca8bdcbf53ac84948ec72953ed4433d2",
          "dweb:/ipfs/Qmbe1Qm94avKV2mw1Yj33SZ698ykCA8vEpZhqjL9o4oqev"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/InterfaceOrigin.sol": {
        "keccak256": "0xe2c7feb15991348e274a413ee7e24c4cc4e2225c851924955ad2f025c8b5c42f",
        "urls": [
          "bzz-raw://314cdd9daf29e9d6ed288e02be302487cce6c0ca89805e5e8f6d78fb150c6ea6",
          "dweb:/ipfs/QmP6vY22Cpf45a3eDR6hPBnDDqCPcu4cRXJhH7W41ohkD6"
        ],
        "license": "MIT"
      },
      "contracts/libs/Constants.sol": {
        "keccak256": "0x00f447e219d27f9a864847f8038c4bac16f59e2fb37c5c0de1b554d48d41ba48",
        "urls": [
          "bzz-raw://8c3b8452f969900c9ffbfae74dd73d076d9eace7e2448015b6c46ca8dd4d4402",
          "dweb:/ipfs/QmXGya3YqdmTXNdzTs1ZLMXJZnfJb49Sw5soXhjHbq8qnk"
        ],
        "license": "MIT"
      },
      "contracts/libs/Errors.sol": {
        "keccak256": "0xe9a2059a2ad04e5a8ce5a6fcd091541dcd1b745edb1ce36fd97b188fe8a24011",
        "urls": [
          "bzz-raw://36c91869720c13e9f207ef4a96147c1bcdc75574fb84eacfd8a5a4efe4e5210b",
          "dweb:/ipfs/QmRuYYPnsuES87cQTAag63gdVf22pL7UjF9pvzBt87iGyB"
        ],
        "license": "MIT"
      },
      "contracts/libs/Structures.sol": {
        "keccak256": "0x3eaa63f5d9aac514328111e8fdd037dc6fdb18af7541a8287deeacd2e44f7137",
        "urls": [
          "bzz-raw://633619910c74a0685ef2993a2e7cc44088929121a15c8a9fc26c9bbadffbda71",
          "dweb:/ipfs/QmZceJv6UntiMWW4JZHbmytLsqXshbuav8yoiritksvqqy"
        ],
        "license": "MIT"
      },
      "contracts/libs/merkle/MerkleMath.sol": {
        "keccak256": "0xbd13c07bdc40b80f56c7d75e3f31b6c4a85a78d444b760604a5b71083d14925c",
        "urls": [
          "bzz-raw://3162b491e4e216c0f2d143ce3baab4cf9e2a8b1b42466256a5d5b1f8b0385507",
          "dweb:/ipfs/QmYnDSZyxiGHfmB8Fx46zh1LZe3aCdVaKzpaQuD9piTc7u"
        ],
        "license": "MIT"
      },
      "contracts/libs/stack/GasData.sol": {
        "keccak256": "0x2007fd4b97cf33bfe4aa7dc6ac887af87b4010ec9834636b4dd5685582ac26cb",
        "urls": [
          "bzz-raw://8b54ca8b659d63ef7138c5b3b243190ca19b1e893b7b49dee1f8790d55b9e691",
          "dweb:/ipfs/Qmc2FGb16uosZ5kvyEK2onpWVPvWeE9X72xNWeJw8CbweD"
        ],
        "license": "MIT"
      },
      "contracts/libs/stack/Number.sol": {
        "keccak256": "0xe4e0d66268eb69304cda001a3e03242e9f4af8680830c92b3d6ebe83e96acb96",
        "urls": [
          "bzz-raw://f70c28a10a2d34849614ff51c74f8c6107093b4d01eb865b2ab0d4efe9294cfd",
          "dweb:/ipfs/QmQbXCnHfPJjdNCK1UuQ2ShNan6H7j5s9DLS4HygQ5wfP5"
        ],
        "license": "MIT"
      },
      "contracts/manager/AgentManager.sol": {
        "keccak256": "0x6b6bb9d62e624a5efa1d3bfbf0571a117ee48bbbb3868ebb6f8ff58071f6d475",
        "urls": [
          "bzz-raw://ac93ed3f2c169c0297dd70f37e72595799738b4879131be12292dea8f5625663",
          "dweb:/ipfs/QmNwi7wXMaxg4kg4RxsUrxhz4jLocT7XrVyvQ2dfEAHqJi"
        ],
        "license": "MIT"
      },
      "contracts/manager/LightManager.sol": {
        "keccak256": "0x174147269ca22fbaa91accd50de05a8190e11b2d6847323a4ec3a7458e8c2cda",
        "urls": [
          "bzz-raw://1f10c56e793c383ef84f3bd10b499b76dcf1a5b59b5cc5efad1747cde7fb2d5b",
          "dweb:/ipfs/QmY6PaFz899oCoap5Pf3ng7iwmzREuTD9c2FAoRUFv6Y1b"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
        "keccak256": "0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34",
        "urls": [
          "bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7",
          "dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
        "keccak256": "0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba",
        "urls": [
          "bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8",
          "dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
        "keccak256": "0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d",
        "urls": [
          "bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f",
          "dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
        "keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
        "urls": [
          "bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
          "dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
        ],
        "license": "MIT"
      },
      "test/harnesses/manager/AgentManagerHarness.t.sol": {
        "keccak256": "0x6ad504f142be190f4b3fa158162445fb56d29443022041f2c17eb485be4f886b",
        "urls": [
          "bzz-raw://365788b0d405bacced74fda6f4ab0335e48496a3ced3ae4a4b6487983c5723d3",
          "dweb:/ipfs/QmQuogm7HhTZzkGPzHtMshocskqdga4T11FAVx6dVmueru"
        ],
        "license": "MIT"
      },
      "test/harnesses/manager/LightManagerHarness.t.sol": {
        "keccak256": "0x279a395b190307c17eb1312425b4956a15fcff34c2e98e988167e2fa42d0c126",
        "urls": [
          "bzz-raw://c9f7c0bfadefe1c73b68d1bfe4506cb6a4d9314a28988d5f4e4244be76d682b9",
          "dweb:/ipfs/QmXqNw2NXYHPUSbfS6GwJ39TjJrg45xaU98mXXoq2q23Xh"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "test/harnesses/manager/LightManagerHarness.t.sol",
    "id": 58497,
    "exportedSymbols": {
      "AgentManager": [
        16652
      ],
      "AgentManagerHarness": [
        58434
      ],
      "LightManager": [
        17981
      ],
      "LightManagerHarness": [
        58496
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:557:131",
    "nodes": [
      {
        "id": 58456,
        "nodeType": "PragmaDirective",
        "src": "32:23:131",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".17"
        ]
      },
      {
        "id": 58458,
        "nodeType": "ImportDirective",
        "src": "57:73:131",
        "nodes": [],
        "absolutePath": "contracts/manager/LightManager.sol",
        "file": "../../../contracts/manager/LightManager.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58497,
        "sourceUnit": 17982,
        "symbolAliases": [
          {
            "foreign": {
              "id": 58457,
              "name": "LightManager",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 17981,
              "src": "65:12:131",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 58461,
        "nodeType": "ImportDirective",
        "src": "132:78:131",
        "nodes": [],
        "absolutePath": "test/harnesses/manager/AgentManagerHarness.t.sol",
        "file": "./AgentManagerHarness.t.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58497,
        "sourceUnit": 58435,
        "symbolAliases": [
          {
            "foreign": {
              "id": 58459,
              "name": "AgentManager",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 16652,
              "src": "140:12:131",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 58460,
              "name": "AgentManagerHarness",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 58434,
              "src": "154:19:131",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 58496,
        "nodeType": "ContractDefinition",
        "src": "247:341:131",
        "nodes": [
          {
            "id": 58474,
            "nodeType": "FunctionDefinition",
            "src": "319:50:131",
            "nodes": [],
            "body": {
              "id": 58473,
              "nodeType": "Block",
              "src": "367:2:131",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 58470,
                    "name": "domain",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 58467,
                    "src": "359:6:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  }
                ],
                "id": 58471,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 58469,
                  "name": "LightManager",
                  "nameLocations": [
                    "346:12:131"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 17981,
                  "src": "346:12:131"
                },
                "nodeType": "ModifierInvocation",
                "src": "346:20:131"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 58468,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58467,
                  "mutability": "mutable",
                  "name": "domain",
                  "nameLocation": "338:6:131",
                  "nodeType": "VariableDeclaration",
                  "scope": 58474,
                  "src": "331:13:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 58466,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "331:6:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "330:15:131"
            },
            "returnParameters": {
              "id": 58472,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "367:0:131"
            },
            "scope": 58496,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 58495,
            "nodeType": "FunctionDefinition",
            "src": "375:211:131",
            "nodes": [],
            "body": {
              "id": 58494,
              "nodeType": "Block",
              "src": "515:71:131",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 58489,
                        "name": "domain",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 58476,
                        "src": "557:6:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      },
                      {
                        "id": 58490,
                        "name": "agent",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 58478,
                        "src": "565:5:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 58491,
                        "name": "prover",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 58480,
                        "src": "572:6:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 58486,
                        "name": "LightManager",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 17981,
                        "src": "525:12:131",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LightManager_$17981_$",
                          "typeString": "type(contract LightManager)"
                        }
                      },
                      "id": 58488,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "538:18:131",
                      "memberName": "_afterAgentSlashed",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 17879,
                      "src": "525:31:131",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint32_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (uint32,address,address)"
                      }
                    },
                    "id": 58492,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "525:54:131",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 58493,
                  "nodeType": "ExpressionStatement",
                  "src": "525:54:131"
                }
              ]
            },
            "baseFunctions": [
              16433,
              17879
            ],
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_afterAgentSlashed",
            "nameLocation": "384:18:131",
            "overrides": {
              "id": 58484,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 58482,
                  "name": "AgentManager",
                  "nameLocations": [
                    "483:12:131"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 16652,
                  "src": "483:12:131"
                },
                {
                  "id": 58483,
                  "name": "LightManager",
                  "nameLocations": [
                    "497:12:131"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 17981,
                  "src": "497:12:131"
                }
              ],
              "src": "474:36:131"
            },
            "parameters": {
              "id": 58481,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58476,
                  "mutability": "mutable",
                  "name": "domain",
                  "nameLocation": "410:6:131",
                  "nodeType": "VariableDeclaration",
                  "scope": 58495,
                  "src": "403:13:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 58475,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "403:6:131",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58478,
                  "mutability": "mutable",
                  "name": "agent",
                  "nameLocation": "426:5:131",
                  "nodeType": "VariableDeclaration",
                  "scope": 58495,
                  "src": "418:13:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58477,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "418:7:131",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 58480,
                  "mutability": "mutable",
                  "name": "prover",
                  "nameLocation": "441:6:131",
                  "nodeType": "VariableDeclaration",
                  "scope": 58495,
                  "src": "433:14:131",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 58479,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "433:7:131",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "402:46:131"
            },
            "returnParameters": {
              "id": 58485,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "515:0:131"
            },
            "scope": 58496,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 58462,
              "name": "LightManager",
              "nameLocations": [
                "279:12:131"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17981,
              "src": "279:12:131"
            },
            "id": 58463,
            "nodeType": "InheritanceSpecifier",
            "src": "279:12:131"
          },
          {
            "baseName": {
              "id": 58464,
              "name": "AgentManagerHarness",
              "nameLocations": [
                "293:19:131"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 58434,
              "src": "293:19:131"
            },
            "id": 58465,
            "nodeType": "InheritanceSpecifier",
            "src": "293:19:131"
          }
        ],
        "canonicalName": "LightManagerHarness",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          58496,
          58434,
          17981,
          9911,
          16652,
          9127,
          3922,
          2851,
          46691,
          47177,
          46833,
          3004,
          2941
        ],
        "name": "LightManagerHarness",
        "nameLocation": "256:19:131",
        "scope": 58497,
        "usedErrors": [
          10176,
          10178,
          10184,
          10186,
          10188,
          10206,
          10216,
          10252,
          10260,
          10272,
          10280,
          10282,
          10284,
          10286,
          10288,
          10290,
          10292
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 131
}