{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "notaryIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "sigIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "attPayload",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "agentRoot",
          "type": "bytes32"
        },
        {
          "internalType": "ChainGas[]",
          "name": "snapGas",
          "type": "uint128[]"
        }
      ],
      "name": "acceptAttestation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "wasAccepted",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attestationsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destStatus",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "snapRootTime",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "agentRootTime",
          "type": "uint40"
        },
        {
          "internalType": "uint32",
          "name": "notaryIndex",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getAttestation",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "attPayload",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "attSignature",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        }
      ],
      "name": "getGasData",
      "outputs": [
        {
          "internalType": "GasData",
          "name": "gasData",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "dataMaturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextAgentRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "passAgentRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "rootPassed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "rootPending",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])": "39fe2736",
    "attestationsAmount()": "3cf7b120",
    "destStatus()": "40989152",
    "getAttestation(uint256)": "29be4db2",
    "getGasData(uint32)": "d0dd0675",
    "nextAgentRoot()": "55252dd1",
    "passAgentRoot()": "a554d1e3"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"sigIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"attPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"agentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"ChainGas[]\",\"name\":\"snapGas\",\"type\":\"uint128[]\"}],\"name\":\"acceptAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"wasAccepted\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attestationsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destStatus\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"snapRootTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"agentRootTime\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAttestation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"attPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"getGasData\",\"outputs\":[{\"internalType\":\"GasData\",\"name\":\"gasData\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"dataMaturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextAgentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passAgentRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"rootPassed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rootPending\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])\":{\"params\":{\"agentRoot\":\"Agent Merkle Root from the Attestation\",\"attPayload\":\"Raw payload with Attestation data\",\"notaryIndex\":\"Index of Attestation Notary in Agent Merkle Tree\",\"sigIndex\":\"Index of stored Notary signature\",\"snapGas\":\"Gas data for each chain in the Attestation's snapshot\"},\"returns\":{\"wasAccepted\":\"     Whether the Attestation was accepted\"}},\"destStatus()\":{\"returns\":{\"agentRootTime\":\"   Timestamp when latest agent root was accepted\",\"notaryIndex\":\"     Index of Notary who signed the latest agent root\",\"snapRootTime\":\"    Timestamp when latest snapshot root was accepted\"}},\"getAttestation(uint256)\":{\"details\":\"Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit. Will return an empty signature if this contract is deployed on Synapse Chain.\",\"params\":{\"index\":\"Attestation index\"},\"returns\":{\"attPayload\":\"      Raw payload with Attestation data\",\"attSignature\":\"    Notary signature for the reported attestation\"}},\"getGasData(uint32)\":{\"details\":\"Will return empty values if there is no data for the domain, or if the notary who provided the data is in dispute.\",\"params\":{\"domain\":\"Domain for the chain\"},\"returns\":{\"dataMaturity\":\"    Gas data age in seconds\",\"gasData\":\"         Gas data for the chain\"}},\"passAgentRoot()\":{\"details\":\"Will do nothing, if root optimistic period is not over. Note: both returned values can not be true.\",\"returns\":{\"rootPassed\":\"  Whether the agent merkle root was passed to LightManager\",\"rootPending\":\" Whether there is a pending agent merkle root left\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])\":{\"notice\":\"Accepts an attestation, which local `AgentManager` verified to have been signed by an active Notary for this chain. > Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain. - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree. - Messages coming from chains included in the Attestation's snapshot could be proven. - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken. > Will revert if any of these is true: > - Called by anyone other than local `AgentManager`. > - Attestation payload is not properly formatted. > - Attestation signer is in Dispute. > - Attestation's snapshot root has been previously submitted. Note: agentRoot and snapGas have been verified by the local `AgentManager`.\"},\"attestationsAmount()\":{\"notice\":\"Returns the total amount of Notaries attestations that have been accepted.\"},\"destStatus()\":{\"notice\":\"Returns status of Destination contract as far as snapshot/agent roots are concerned\"},\"getAttestation(uint256)\":{\"notice\":\"Returns a Notary-signed attestation with a given index. > Index refers to the list of all attestations accepted by this contract.\"},\"getGasData(uint32)\":{\"notice\":\"Returns the gas data for a given chain from the latest accepted attestation with that chain.\"},\"nextAgentRoot()\":{\"notice\":\"Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\"},\"passAgentRoot()\":{\"notice\":\"Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/InterfaceDestination.sol\":\"InterfaceDestination\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/interfaces/InterfaceDestination.sol\":{\"keccak256\":\"0x708371d239580f8e6dc44e790fd32f47e074cbfb8ae9e75609adbc0de303678c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5061c85c3779304f5c3919d2b1bc6620d1029a4ead7186c3f3f5b409a9bd855\",\"dweb:/ipfs/QmW4Hrz2NGMCRV2Rqv22G4xArsR4jUZtNr1garSR8AZud6\"]},\"contracts/libs/stack/GasData.sol\":{\"keccak256\":\"0x2007fd4b97cf33bfe4aa7dc6ac887af87b4010ec9834636b4dd5685582ac26cb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b54ca8b659d63ef7138c5b3b243190ca19b1e893b7b49dee1f8790d55b9e691\",\"dweb:/ipfs/Qmc2FGb16uosZ5kvyEK2onpWVPvWeE9X72xNWeJw8CbweD\"]},\"contracts/libs/stack/Number.sol\":{\"keccak256\":\"0xe4e0d66268eb69304cda001a3e03242e9f4af8680830c92b3d6ebe83e96acb96\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f70c28a10a2d34849614ff51c74f8c6107093b4d01eb865b2ab0d4efe9294cfd\",\"dweb:/ipfs/QmQbXCnHfPJjdNCK1UuQ2ShNan6H7j5s9DLS4HygQ5wfP5\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "notaryIndex",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "sigIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "attPayload",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "agentRoot",
              "type": "bytes32"
            },
            {
              "internalType": "ChainGas[]",
              "name": "snapGas",
              "type": "uint128[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "acceptAttestation",
          "outputs": [
            {
              "internalType": "bool",
              "name": "wasAccepted",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "attestationsAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "destStatus",
          "outputs": [
            {
              "internalType": "uint40",
              "name": "snapRootTime",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "agentRootTime",
              "type": "uint40"
            },
            {
              "internalType": "uint32",
              "name": "notaryIndex",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAttestation",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "attPayload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "attSignature",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getGasData",
          "outputs": [
            {
              "internalType": "GasData",
              "name": "gasData",
              "type": "uint96"
            },
            {
              "internalType": "uint256",
              "name": "dataMaturity",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextAgentRoot",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "passAgentRoot",
          "outputs": [
            {
              "internalType": "bool",
              "name": "rootPassed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "rootPending",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])": {
            "params": {
              "agentRoot": "Agent Merkle Root from the Attestation",
              "attPayload": "Raw payload with Attestation data",
              "notaryIndex": "Index of Attestation Notary in Agent Merkle Tree",
              "sigIndex": "Index of stored Notary signature",
              "snapGas": "Gas data for each chain in the Attestation's snapshot"
            },
            "returns": {
              "wasAccepted": "     Whether the Attestation was accepted"
            }
          },
          "destStatus()": {
            "returns": {
              "agentRootTime": "   Timestamp when latest agent root was accepted",
              "notaryIndex": "     Index of Notary who signed the latest agent root",
              "snapRootTime": "    Timestamp when latest snapshot root was accepted"
            }
          },
          "getAttestation(uint256)": {
            "details": "Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit. Will return an empty signature if this contract is deployed on Synapse Chain.",
            "params": {
              "index": "Attestation index"
            },
            "returns": {
              "attPayload": "      Raw payload with Attestation data",
              "attSignature": "    Notary signature for the reported attestation"
            }
          },
          "getGasData(uint32)": {
            "details": "Will return empty values if there is no data for the domain, or if the notary who provided the data is in dispute.",
            "params": {
              "domain": "Domain for the chain"
            },
            "returns": {
              "dataMaturity": "    Gas data age in seconds",
              "gasData": "         Gas data for the chain"
            }
          },
          "passAgentRoot()": {
            "details": "Will do nothing, if root optimistic period is not over. Note: both returned values can not be true.",
            "returns": {
              "rootPassed": "  Whether the agent merkle root was passed to LightManager",
              "rootPending": " Whether there is a pending agent merkle root left"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])": {
            "notice": "Accepts an attestation, which local `AgentManager` verified to have been signed by an active Notary for this chain. > Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain. - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree. - Messages coming from chains included in the Attestation's snapshot could be proven. - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken. > Will revert if any of these is true: > - Called by anyone other than local `AgentManager`. > - Attestation payload is not properly formatted. > - Attestation signer is in Dispute. > - Attestation's snapshot root has been previously submitted. Note: agentRoot and snapGas have been verified by the local `AgentManager`."
          },
          "attestationsAmount()": {
            "notice": "Returns the total amount of Notaries attestations that have been accepted."
          },
          "destStatus()": {
            "notice": "Returns status of Destination contract as far as snapshot/agent roots are concerned"
          },
          "getAttestation(uint256)": {
            "notice": "Returns a Notary-signed attestation with a given index. > Index refers to the list of all attestations accepted by this contract."
          },
          "getGasData(uint32)": {
            "notice": "Returns the gas data for a given chain from the latest accepted attestation with that chain."
          },
          "nextAgentRoot()": {
            "notice": "Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over."
          },
          "passAgentRoot()": {
            "notice": "Attempts to pass a quarantined Agent Merkle Root to a local Light Manager."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=node_modules/@openzeppelin/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "hardhat/=node_modules/hardhat/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/interfaces/InterfaceDestination.sol": "InterfaceDestination"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/interfaces/InterfaceDestination.sol": {
        "keccak256": "0x708371d239580f8e6dc44e790fd32f47e074cbfb8ae9e75609adbc0de303678c",
        "urls": [
          "bzz-raw://e5061c85c3779304f5c3919d2b1bc6620d1029a4ead7186c3f3f5b409a9bd855",
          "dweb:/ipfs/QmW4Hrz2NGMCRV2Rqv22G4xArsR4jUZtNr1garSR8AZud6"
        ],
        "license": "MIT"
      },
      "contracts/libs/stack/GasData.sol": {
        "keccak256": "0x2007fd4b97cf33bfe4aa7dc6ac887af87b4010ec9834636b4dd5685582ac26cb",
        "urls": [
          "bzz-raw://8b54ca8b659d63ef7138c5b3b243190ca19b1e893b7b49dee1f8790d55b9e691",
          "dweb:/ipfs/Qmc2FGb16uosZ5kvyEK2onpWVPvWeE9X72xNWeJw8CbweD"
        ],
        "license": "MIT"
      },
      "contracts/libs/stack/Number.sol": {
        "keccak256": "0xe4e0d66268eb69304cda001a3e03242e9f4af8680830c92b3d6ebe83e96acb96",
        "urls": [
          "bzz-raw://f70c28a10a2d34849614ff51c74f8c6107093b4d01eb865b2ab0d4efe9294cfd",
          "dweb:/ipfs/QmQbXCnHfPJjdNCK1UuQ2ShNan6H7j5s9DLS4HygQ5wfP5"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/interfaces/InterfaceDestination.sol",
    "id": 9720,
    "exportedSymbols": {
      "ChainGas": [
        14599
      ],
      "GasData": [
        14593
      ],
      "InterfaceDestination": [
        9719
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:4532:38",
    "nodes": [
      {
        "id": 9646,
        "nodeType": "PragmaDirective",
        "src": "32:23:38",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".17"
        ]
      },
      {
        "id": 9649,
        "nodeType": "ImportDirective",
        "src": "57:60:38",
        "nodes": [],
        "absolutePath": "contracts/libs/stack/GasData.sol",
        "file": "../libs/stack/GasData.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 9720,
        "sourceUnit": 14992,
        "symbolAliases": [
          {
            "foreign": {
              "id": 9647,
              "name": "ChainGas",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 14599,
              "src": "65:8:38",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 9648,
              "name": "GasData",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 14593,
              "src": "75:7:38",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 9719,
        "nodeType": "ContractDefinition",
        "src": "119:4444:38",
        "nodes": [
          {
            "id": 9657,
            "nodeType": "FunctionDefinition",
            "src": "544:78:38",
            "nodes": [],
            "documentation": {
              "id": 9650,
              "nodeType": "StructuredDocumentation",
              "src": "156:383:38",
              "text": " @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n @dev Will do nothing, if root optimistic period is not over.\n Note: both returned values can not be true.\n @return rootPassed   Whether the agent merkle root was passed to LightManager\n @return rootPending  Whether there is a pending agent merkle root left"
            },
            "functionSelector": "a554d1e3",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "passAgentRoot",
            "nameLocation": "553:13:38",
            "parameters": {
              "id": 9651,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "566:2:38"
            },
            "returnParameters": {
              "id": 9656,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9653,
                  "mutability": "mutable",
                  "name": "rootPassed",
                  "nameLocation": "592:10:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9657,
                  "src": "587:15:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 9652,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "587:4:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9655,
                  "mutability": "mutable",
                  "name": "rootPending",
                  "nameLocation": "609:11:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9657,
                  "src": "604:16:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 9654,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "604:4:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "586:35:38"
            },
            "scope": 9719,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 9675,
            "nodeType": "FunctionDefinition",
            "src": "1994:218:38",
            "nodes": [],
            "documentation": {
              "id": 9658,
              "nodeType": "StructuredDocumentation",
              "src": "628:1361:38",
              "text": " @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n by an active Notary for this chain.\n > Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n - Messages coming from chains included in the Attestation's snapshot could be proven.\n - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n > Will revert if any of these is true:\n > - Called by anyone other than local `AgentManager`.\n > - Attestation payload is not properly formatted.\n > - Attestation signer is in Dispute.\n > - Attestation's snapshot root has been previously submitted.\n Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n @param sigIndex          Index of stored Notary signature\n @param attPayload        Raw payload with Attestation data\n @param agentRoot         Agent Merkle Root from the Attestation\n @param snapGas           Gas data for each chain in the Attestation's snapshot\n @return wasAccepted      Whether the Attestation was accepted"
            },
            "functionSelector": "39fe2736",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "acceptAttestation",
            "nameLocation": "2003:17:38",
            "parameters": {
              "id": 9671,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9660,
                  "mutability": "mutable",
                  "name": "notaryIndex",
                  "nameLocation": "2037:11:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9675,
                  "src": "2030:18:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 9659,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2030:6:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9662,
                  "mutability": "mutable",
                  "name": "sigIndex",
                  "nameLocation": "2066:8:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9675,
                  "src": "2058:16:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9661,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2058:7:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9664,
                  "mutability": "mutable",
                  "name": "attPayload",
                  "nameLocation": "2097:10:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9675,
                  "src": "2084:23:38",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 9663,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2084:5:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9666,
                  "mutability": "mutable",
                  "name": "agentRoot",
                  "nameLocation": "2125:9:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9675,
                  "src": "2117:17:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 9665,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2117:7:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9670,
                  "mutability": "mutable",
                  "name": "snapGas",
                  "nameLocation": "2162:7:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9675,
                  "src": "2144:25:38",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_userDefinedValueType$_ChainGas_$14599_$dyn_memory_ptr",
                    "typeString": "ChainGas[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 9668,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 9667,
                        "name": "ChainGas",
                        "nameLocations": [
                          "2144:8:38"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 14599,
                        "src": "2144:8:38"
                      },
                      "referencedDeclaration": 14599,
                      "src": "2144:8:38",
                      "typeDescriptions": {
                        "typeIdentifier": "t_userDefinedValueType$_ChainGas_$14599",
                        "typeString": "ChainGas"
                      }
                    },
                    "id": 9669,
                    "nodeType": "ArrayTypeName",
                    "src": "2144:10:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_userDefinedValueType$_ChainGas_$14599_$dyn_storage_ptr",
                      "typeString": "ChainGas[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2020:155:38"
            },
            "returnParameters": {
              "id": 9674,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9673,
                  "mutability": "mutable",
                  "name": "wasAccepted",
                  "nameLocation": "2199:11:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9675,
                  "src": "2194:16:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 9672,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2194:4:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2193:18:38"
            },
            "scope": 9719,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 9681,
            "nodeType": "FunctionDefinition",
            "src": "2658:62:38",
            "nodes": [],
            "documentation": {
              "id": 9676,
              "nodeType": "StructuredDocumentation",
              "src": "2552:101:38",
              "text": " @notice Returns the total amount of Notaries attestations that have been accepted."
            },
            "functionSelector": "3cf7b120",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "attestationsAmount",
            "nameLocation": "2667:18:38",
            "parameters": {
              "id": 9677,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2685:2:38"
            },
            "returnParameters": {
              "id": 9680,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9679,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 9681,
                  "src": "2711:7:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9678,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2711:7:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2710:9:38"
            },
            "scope": 9719,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 9691,
            "nodeType": "FunctionDefinition",
            "src": "3284:114:38",
            "nodes": [],
            "documentation": {
              "id": 9682,
              "nodeType": "StructuredDocumentation",
              "src": "2726:553:38",
              "text": " @notice Returns a Notary-signed attestation with a given index.\n > Index refers to the list of all attestations accepted by this contract.\n @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n Will return an empty signature if this contract is deployed on Synapse Chain.\n @param index             Attestation index\n @return attPayload       Raw payload with Attestation data\n @return attSignature     Notary signature for the reported attestation"
            },
            "functionSelector": "29be4db2",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAttestation",
            "nameLocation": "3293:14:38",
            "parameters": {
              "id": 9685,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9684,
                  "mutability": "mutable",
                  "name": "index",
                  "nameLocation": "3316:5:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9691,
                  "src": "3308:13:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9683,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3308:7:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3307:15:38"
            },
            "returnParameters": {
              "id": 9690,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9687,
                  "mutability": "mutable",
                  "name": "attPayload",
                  "nameLocation": "3359:10:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9691,
                  "src": "3346:23:38",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 9686,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3346:5:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9689,
                  "mutability": "mutable",
                  "name": "attSignature",
                  "nameLocation": "3384:12:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9691,
                  "src": "3371:25:38",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 9688,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3371:5:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3345:52:38"
            },
            "scope": 9719,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 9702,
            "nodeType": "FunctionDefinition",
            "src": "3826:97:38",
            "nodes": [],
            "documentation": {
              "id": 9692,
              "nodeType": "StructuredDocumentation",
              "src": "3404:417:38",
              "text": " @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n @dev Will return empty values if there is no data for the domain,\n or if the notary who provided the data is in dispute.\n @param domain            Domain for the chain\n @return gasData          Gas data for the chain\n @return dataMaturity     Gas data age in seconds"
            },
            "functionSelector": "d0dd0675",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getGasData",
            "nameLocation": "3835:10:38",
            "parameters": {
              "id": 9695,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9694,
                  "mutability": "mutable",
                  "name": "domain",
                  "nameLocation": "3853:6:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9702,
                  "src": "3846:13:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 9693,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3846:6:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3845:15:38"
            },
            "returnParameters": {
              "id": 9701,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9698,
                  "mutability": "mutable",
                  "name": "gasData",
                  "nameLocation": "3892:7:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9702,
                  "src": "3884:15:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_userDefinedValueType$_GasData_$14593",
                    "typeString": "GasData"
                  },
                  "typeName": {
                    "id": 9697,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 9696,
                      "name": "GasData",
                      "nameLocations": [
                        "3884:7:38"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 14593,
                      "src": "3884:7:38"
                    },
                    "referencedDeclaration": 14593,
                    "src": "3884:7:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_userDefinedValueType$_GasData_$14593",
                      "typeString": "GasData"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9700,
                  "mutability": "mutable",
                  "name": "dataMaturity",
                  "nameLocation": "3909:12:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9702,
                  "src": "3901:20:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9699,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3901:7:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3883:39:38"
            },
            "scope": 9719,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 9712,
            "nodeType": "FunctionDefinition",
            "src": "4276:108:38",
            "nodes": [],
            "documentation": {
              "id": 9703,
              "nodeType": "StructuredDocumentation",
              "src": "3929:342:38",
              "text": " Returns status of Destination contract as far as snapshot/agent roots are concerned\n @return snapRootTime     Timestamp when latest snapshot root was accepted\n @return agentRootTime    Timestamp when latest agent root was accepted\n @return notaryIndex      Index of Notary who signed the latest agent root"
            },
            "functionSelector": "40989152",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "destStatus",
            "nameLocation": "4285:10:38",
            "parameters": {
              "id": 9704,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4295:2:38"
            },
            "returnParameters": {
              "id": 9711,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9706,
                  "mutability": "mutable",
                  "name": "snapRootTime",
                  "nameLocation": "4328:12:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9712,
                  "src": "4321:19:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint40",
                    "typeString": "uint40"
                  },
                  "typeName": {
                    "id": 9705,
                    "name": "uint40",
                    "nodeType": "ElementaryTypeName",
                    "src": "4321:6:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint40",
                      "typeString": "uint40"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9708,
                  "mutability": "mutable",
                  "name": "agentRootTime",
                  "nameLocation": "4349:13:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9712,
                  "src": "4342:20:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint40",
                    "typeString": "uint40"
                  },
                  "typeName": {
                    "id": 9707,
                    "name": "uint40",
                    "nodeType": "ElementaryTypeName",
                    "src": "4342:6:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint40",
                      "typeString": "uint40"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 9710,
                  "mutability": "mutable",
                  "name": "notaryIndex",
                  "nameLocation": "4371:11:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 9712,
                  "src": "4364:18:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 9709,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4364:6:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4320:63:38"
            },
            "scope": 9719,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 9718,
            "nodeType": "FunctionDefinition",
            "src": "4504:57:38",
            "nodes": [],
            "documentation": {
              "id": 9713,
              "nodeType": "StructuredDocumentation",
              "src": "4390:109:38",
              "text": " Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over."
            },
            "functionSelector": "55252dd1",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "nextAgentRoot",
            "nameLocation": "4513:13:38",
            "parameters": {
              "id": 9714,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4526:2:38"
            },
            "returnParameters": {
              "id": 9717,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9716,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 9718,
                  "src": "4552:7:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 9715,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4552:7:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4551:9:38"
            },
            "scope": 9719,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "InterfaceDestination",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          9719
        ],
        "name": "InterfaceDestination",
        "nameLocation": "129:20:38",
        "scope": 9720,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 38
}