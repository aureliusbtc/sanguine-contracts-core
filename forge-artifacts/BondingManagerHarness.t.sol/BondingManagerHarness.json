{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AgentCantBeAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AgentNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AgentNotActiveNorUnstaking",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AgentNotFraudulent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AgentNotUnstaking",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotInbox",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotSummit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeAlreadyResolved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeNotOpened",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisputeNotStuck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuardInDispute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectAgentDomain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectVersionLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LeafNotProven",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MerkleTreeFull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustBeSynapseDomain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotaryInDispute",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlashAgentOptimisticPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SynapseDomainForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TreeHeightTooLow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "disputeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "guardIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "notaryIndex",
          "type": "uint32"
        }
      ],
      "name": "DisputeOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "disputeIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "slashedIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "rivalIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fraudProver",
          "type": "address"
        }
      ],
      "name": "DisputeResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        }
      ],
      "name": "RootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum AgentFlag",
          "name": "flag",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "StatusUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "addAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "agentLeaf",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "agentRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "agentStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum AgentFlag",
              "name": "flag",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            }
          ],
          "internalType": "struct AgentStatus",
          "name": "status",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allLeafs",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "leafs",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "completeSlashing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "completeUnstaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "disputeStatus",
      "outputs": [
        {
          "internalType": "enum DisputeFlag",
          "name": "flag",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "rival",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fraudProver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "disputePtr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        }
      ],
      "name": "getActiveAgents",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "agents",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum AgentFlag",
              "name": "flag",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            }
          ],
          "internalType": "struct AgentStatus",
          "name": "status",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getDispute",
      "outputs": [
        {
          "internalType": "address",
          "name": "guard",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "notary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "slashedAgent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fraudProver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "reportPayload",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "reportSignature",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDisputesAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "indexFrom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getLeafs",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "leafs",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "getProof",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "origin_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destination_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inbox_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "summit_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "initiateUnstaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leafsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "allowFailure",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiCallable.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct MultiCallable.Result[]",
          "name": "callResults",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "guardIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "notaryIndex",
          "type": "uint32"
        }
      ],
      "name": "openDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "origin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "remoteMockFunc",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "msgOrigin",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "proofMaturity",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "prover",
          "type": "address"
        }
      ],
      "name": "remoteSlashAgent",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "slashedAgent",
          "type": "address"
        }
      ],
      "name": "resolveStuckDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "sensitiveMockFunc",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        }
      ],
      "name": "sensitiveMockFuncOver32Bytes",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "sensitiveMockFuncVoid",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "prover",
          "type": "address"
        }
      ],
      "name": "slashAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "prover",
          "type": "address"
        }
      ],
      "name": "slashAgentExposed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "summit",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "versionString",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "origin_",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTips",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60e06040523480156200001157600080fd5b50604051620033b2380380620033b283398101604081905262000034916200009f565b60408051808201909152600580825264302e302e3360d81b6020830152608052819081816200006381620000ce565b60a0525063ffffffff90811660c0528216600a1490506200009757604051632b3a807f60e01b815260040160405180910390fd5b5050620000f6565b600060208284031215620000b257600080fd5b815163ffffffff81168114620000c757600080fd5b9392505050565b80516020808301519190811015620000f0576000198160200360031b1b821691505b50919050565b60805160a05160c0516132856200012d6000396000818161043b01526115eb015260006103b80152600061039501526132856000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c8063715018a611610130578063b269681d116100b8578063e3a96cbd1161007c578063e3a96cbd1461057b578063f2fde38b146105a0578063f8c8765e146105b3578063fb0e722b146105c6578063fbc5265e146105d957600080fd5b8063b269681d1461050f578063c1c0f4f614610522578063c99dcb9e14610542578063c9f1a03f14610555578063cc8755011461056857600080fd5b8063938b5f32116100ff578063938b5f32146104975780639d228a51146104aa5780639fbcb9cb146104d6578063a149352c146104e9578063a2155c34146104fc57600080fd5b8063715018a61461041b57806389791e17146104235780638d3638f4146104365780638da5cb5b1461047257600080fd5b806333d1b2e8116101b35780633eea79d1116101825780633eea79d1146103645780634c3e1c1f1461037757806354fd4d501461038a57806360fc8466146103e857806369978b0d1461040857600080fd5b806333d1b2e81461031e5780633463d1b11461033157806336cba43c146103545780633aaeccc61461035c57600080fd5b8063237a85a5116101fa578063237a85a5146102af5780632853a0e6146102c257806328f3fac9146102d55780632de5aaf7146102f557806333c3a8f31461031657600080fd5b80630e6bfcd51461022c578063127a2c9d1461026457806312db2ef614610285578063130c56731461029a575b600080fd5b61023f61023a3660046127b2565b6105ec565b604080516001600160e01b031990931683526020830191909152015b60405180910390f35b61027761027236600461281e565b61062f565b60405190815260200161025b565b61028d61067e565b60405161025b9190612852565b6102ad6102a83660046128ef565b610695565b005b6102ad6102bd3660046128ef565b61076d565b6102ad6102d03660046129ba565b610944565b6102e86102e33660046129ff565b61097f565b60405161025b9190612a70565b610308610303366004612a7e565b610a0a565b60405161025b929190612a97565b60cc54610277565b61028d61032c366004612ab4565b610a51565b61034461033f3660046129ff565b610b2c565b60405161025b9493929190612ad6565b60cd54610277565b609b54610277565b61028d6103723660046129ff565b610c68565b6102ad6103853660046128ef565b610cc7565b6040805180820182527f000000000000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006020820152905161025b9190612b5d565b6103fb6103f6366004612b70565b610d6a565b60405161025b9190612be5565b6102ad6104163660046129ba565b61096f565b6102ad610ebc565b6102ad610431366004612c5b565b610ee8565b61045d7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161025b565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161025b565b60975461047f906001600160a01b031681565b6104bd6104b8366004612c90565b6110b3565b6040516001600160e01b0319909116815260200161025b565b60c95461047f906001600160a01b031681565b6104bd6104f7366004612cf2565b611122565b6102ad61050a366004612d27565b611160565b60985461047f906001600160a01b031681565b610535610530366004612d60565b611455565b60405161025b9190612d7d565b6102776105503660046129ff565b611582565b6102ad6105633660046127b2565b611593565b6102ad610576366004612dbe565b6115be565b61058e610589366004612a7e565b61173e565b60405161025b96959493929190612dec565b6102ad6105ae3660046129ff565b6118b8565b6102ad6105c1366004612e47565b611953565b60995461047f906001600160a01b031681565b6102ad6105e73660046128ef565b611a31565b60985460009081906001600160a01b0316331461061c57604051636efcc49f60e01b815260040160405180910390fd5b50630e6bfcd560e01b9491935090915050565b6098546000906001600160a01b0316331461065d57604051636efcc49f60e01b815260040160405180910390fd5b8161066b5761474d60f01b91505b5063127a2c9d60e01b81185b9392505050565b6060610690600060cc80549050610a51565b905090565b6033546001600160a01b031633146106c85760405162461bcd60e51b81526004016106bf90612e9b565b60405180910390fd5b60006106d38361097f565b90506106de81611aa6565b8363ffffffff16816020015163ffffffff161461070e57604051630b09697760e11b815260040160405180910390fd5b600061071c60018686611ad9565b9050610766818460405180606001604052806002600581111561074157610741612a1a565b81526020018963ffffffff168152602001866040015163ffffffff1681525087611b0f565b5050505050565b6033546001600160a01b031633146107975760405162461bcd60e51b81526004016106bf90612e9b565b60091963ffffffff8416016107bf5760405163079597d560e51b815260040160405180910390fd5b60006107ca83611c58565b905060008080835160058111156107e3576107e3612a1a565b0361088f5760cc5463ffffffff1161080e576040516377ae67b360e11b815260040160405180910390fd5b60cc805460018082019092557f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe810180546001600160a01b0389166001600160a01b0319918216811790925563ffffffff8a16600090815260cb602090815260408220805496870181558252902090930180549093161790915591506108f8565b6003835160058111156108a4576108a4612a1a565b1480156108c057508563ffffffff16836020015163ffffffff16145b156108df57826040015191506108d860038787611ad9565b90506108f8565b6040516386511bd960e01b815260040160405180910390fd5b61093c818560405180606001604052806001600581111561091b5761091b612a1a565b81526020018a63ffffffff1681526020018663ffffffff1681525088611b0f565b505050505050565b6099546001600160a01b0316331461096f5760405163dbc2fa8560e01b815260040160405180910390fd5b61097a838383611ced565b505050565b60408051606081018252600080825260208201819052918101919091526109a582611c58565b90506002609a60006109b685611d8f565b815260208101919091526040016000205460ff1660028111156109db576109db612a1a565b1480156109fb57506005815160058111156109f8576109f8612a1a565b14155b15610a0557600481525b919050565b60408051606081018252600080825260208201819052918101829052610a2f83611db9565b91506001600160a01b03821615610a4c57610a498261097f565b90505b915091565b60cc54606090808410610a7757604051631390f2a160e01b815260040160405180910390fd5b80610a828486612ee6565b1115610a9557610a928482612ef9565b92505b8267ffffffffffffffff811115610aae57610aae6128a8565b604051908082528060200260200182016040528015610ad7578160200160208202803683370190505b50915060005b83811015610b2457610af7610af28287612ee6565b611df4565b838281518110610b0957610b09612f0c565b6020908102919091010152610b1d81612f22565b9050610add565b505092915050565b6000806000806000610b3d86611d8f565b6000818152609a602052604080822081516060810190925280549394509192909190829060ff166002811115610b7557610b75612a1a565b6002811115610b8657610b86612a1a565b8152905461010081046001600160581b03908116602080850191909152600160601b9092046001600160a01b03166040938401528351928401519184015192995090965016935090508215610c5f576000609b610be4600186612ef9565b81548110610bf457610bf4612f0c565b600091825260209182902060408051606081018252929091015463ffffffff8082168085526401000000008304821695850195909552600160401b90910416908201529150610c5b908414610c4a578151610c50565b81602001515b63ffffffff16611db9565b9550505b50509193509193565b60606000610c7461067e565b90506000610c8184611c58565b905060008082516005811115610c9957610c99612a1a565b14610cae57816040015163ffffffff16610cb2565b60cc545b9050610cbe8382611e2c565b95945050505050565b6033546001600160a01b03163314610cf15760405162461bcd60e51b81526004016106bf90612e9b565b6000610cfc8361097f565b9050610d0781611f9b565b8363ffffffff16816020015163ffffffff1614610d3757604051630b09697760e11b815260040160405180910390fd5b6000610d4560028686611ad9565b9050610766818460405180606001604052806003600581111561074157610741612a1a565b6060818067ffffffffffffffff811115610d8657610d866128a8565b604051908082528060200260200182016040528015610dcc57816020015b604080518082019091526000815260606020820152815260200190600190039081610da45790505b5091503660005b82811015610eb357858582818110610ded57610ded612f0c565b9050602002810190610dff9190612f3b565b91506000848281518110610e1557610e15612f0c565b60200260200101519050306001600160a01b0316838060200190610e399190612f5b565b604051610e47929190612fa9565b600060405180830381855af49150503d8060008114610e82576040519150601f19603f3d011682016040523d82523d6000602084013e610e87565b606091505b5060208301521515808252833517610eaa576309ad446560e31b60005260046000fd5b50600101610dd3565b50505092915050565b6033546001600160a01b03163314610ee65760405162461bcd60e51b81526004016106bf90612e9b565b565b6033546001600160a01b03163314610f125760405162461bcd60e51b81526004016106bf90612e9b565b6000609a6000610f2184611d8f565b8152602081019190915260409081016000208151606081019092528054829060ff166002811115610f5457610f54612a1a565b6002811115610f6557610f65612a1a565b8152905461010081046001600160581b03166020830152600160601b90046001600160a01b03166040909101529050600081516002811115610fa957610fa9612a1a565b03610fc7576040516359d38fd160e11b815260040160405180910390fd5b600281516002811115610fdc57610fdc612a1a565b03610ffa5760405163f10068b560e01b815260040160405180910390fd5b6098546040805163204c48a960e11b815290516000926001600160a01b03169163409891529160048083019260609291908290030181865afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110689190612fce565b505090508064ffffffffff166138406110819190612ee6565b4210156110a1576040516301bf715b60e61b815260040160405180910390fd5b6110ad84846000611ced565b50505050565b6098546000906001600160a01b031633146110e157604051636efcc49f60e01b815260040160405180910390fd5b6201518085101561110557604051630a8928dd60e41b815260040160405180910390fd5b611110848484611ced565b50639d228a5160e01b95945050505050565b6098546000906001600160a01b0316331461115057604051636efcc49f60e01b815260040160405180910390fd5b506328524d4b60e21b9392505050565b6099546001600160a01b0316331461118b5760405163dbc2fa8560e01b815260040160405180910390fd5b63ffffffff82166000908152609a602052604081205460ff1660028111156111b5576111b5612a1a565b146111d35760405163367526d360e21b815260040160405180910390fd5b63ffffffff81166000908152609a602052604081205460ff1660028111156111fd576111fd612a1a565b1461121b57604051636893014360e01b815260040160405180910390fd5b604080516060808201835263ffffffff8086168352848116602084019081526000848601818152609b8054600181810183559382905296517fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc3499097018054945192518616600160401b0263ffffffff60401b199387166401000000000267ffffffffffffffff1990961698909616979097179390931716929092179093559154835191820190935290819081526001600160581b0383166020808301919091526000604092830181905263ffffffff87168152609a9091522081518154829060ff1916600183600281111561131257611312612a1a565b0217905550602082015181546040938401516001600160a01b0316600160601b026001600160601b036001600160581b03909316610100029290921660ff9091161717905580516060810190915280600181526001600160581b0383166020808301919091526000604092830181905263ffffffff86168152609a9091522081518154829060ff191660018360028111156113af576113af612a1a565b0217905550602082015181546040909301516001600160a01b0316600160601b026001600160601b036001600160581b03909216610100029190911660ff909316929092179190911790557fd0672fae056abe2bf0637742527d49add67fdb68192a6c6f6bf86eac19fe0530611426600183612ef9565b6040805191825263ffffffff808716602084015285169082015260600160405180910390a161097a8383611fce565b63ffffffff8116600090815260cb60205260409020546060908067ffffffffffffffff811115611487576114876128a8565b6040519080825280602002602001820160405280156114b0578160200160208202803683370190505b5091506000805b8281101561156f5763ffffffff8516600090815260cb602052604081208054839081106114e6576114e6612f0c565b6000918252602090912001546001600160a01b0316905060016115088261097f565b51600581111561151a5761151a612a1a565b0361155e5780858461152b81612f22565b95508151811061153d5761153d612f0c565b60200260200101906001600160a01b031690816001600160a01b0316815250505b5061156881612f22565b90506114b7565b5081811461157b578083525b5050919050565b600061158d826120a1565b92915050565b6098546001600160a01b0316331461097a57604051636efcc49f60e01b815260040160405180910390fd5b60c9546001600160a01b031633146115e9576040516364e24e7360e11b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168263ffffffff160361168757609754604051634e04e7a760e01b81526001600160a01b0385811660048301526024820184905290911690634e04e7a790604401600060405180830381600087803b15801561166a57600080fd5b505af115801561167e573d6000803e3d6000fd5b50505050505050565b609754604080516001600160a01b038681166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b03166303f40e2760e31b179052915163a1c702a760e01b8152919092169163a1c702a7916116fc918691620151809190600401613015565b60408051808303816000875af115801561171a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610766919061303e565b600080600080606080609b80549050871061176c57604051631390f2a160e01b815260040160405180910390fd5b6000609b888154811061178157611781612f0c565b600091825260209182902060408051606081018252929091015463ffffffff8082168085526401000000008304821695850195909552600160401b909104169082015291506117cf90611db9565b96506117e4816020015163ffffffff16611db9565b604082015190965063ffffffff16156118385761180a816040015163ffffffff16611db9565b60408281015163ffffffff166000908152609a6020522054909550600160601b90046001600160a01b031693505b60995460405163c495912b60e01b8152600481018a90526001600160a01b039091169063c495912b90602401600060405180830381865afa158015611881573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118a991908101906130d0565b97999698509496939592505050565b6033546001600160a01b031633146118e25760405162461bcd60e51b81526004016106bf90612e9b565b6001600160a01b0381166119475760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106bf565b611950816120e2565b50565b600061195f6001612134565b90508015611977576000805461ff0019166101001790555b6119828585856121bc565b60c980546001600160a01b0319166001600160a01b0384161790556119a5612222565b60cc80546001810182556000919091527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe0180546001600160a01b03191690558015610766576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6000611a3c8361097f565b9050611a4781612251565b8363ffffffff16816020015163ffffffff1614611a7757604051630b09697760e11b815260040160405180910390fd5b6000611a82846120a1565b90506107668184604051806060016040528060058081111561074157610741612a1a565b600181516005811115611abb57611abb612a1a565b1461195057604051632437e77160e11b815260040160405180910390fd5b6000838383604051602001611af093929190613134565b6040516020818303038152906040528051906020012090509392505050565b6000611b248360000151846020015184611ad9565b90506000611b4c846040015163ffffffff1687878560cd61228490949392919063ffffffff16565b6001600160a01b038416600090815260ca60205260409020855181549293508692829060ff19166001836005811115611b8757611b87612a1a565b0217905550602082810151825460409485015168ffffffffffffffff001990911661010063ffffffff9384160268ffffffff0000000000191617650100000000009183169190910217909255860151865192516001600160a01b0387169391909216917f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e91611c1591613181565b60405180910390a36040518181527f2cbc14f49c068133583f7cb530018af451c87c1cf1327cf2a4ff4698c4730aa49060200160405180910390a1505050505050565b60408051606081018252600080825260208201819052918101919091526001600160a01b038216600090815260ca6020526040908190208151606081019092528054829060ff166005811115611cb057611cb0612a1a565b6005811115611cc157611cc1612a1a565b8152905463ffffffff610100820481166020840152650100000000009091041660409091015292915050565b6000611cf883611c58565b9050611d03816122cf565b8363ffffffff16816020015163ffffffff1614611d3357604051630b09697760e11b815260040160405180910390fd5b826001600160a01b03168463ffffffff167f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e6004604051611d749190613181565b60405180910390a3611d8a816040015183612323565b6110ad565b6001600160a01b0316600090815260ca602052604090205465010000000000900463ffffffff1690565b60cc54600090821015610a055760cc8281548110611dd957611dd9612f0c565b6000918252602090912001546001600160a01b031692915050565b60008115610a055761158d60cc8381548110611e1257611e12612f0c565b6000918252602090912001546001600160a01b03166120a1565b60606000611e5284518410611e4b57611e46846001612ee6565b6125b8565b84516125b8565b90508067ffffffffffffffff811115611e6d57611e6d6128a8565b604051908082528060200260200182016040528015611e96578160200160208202803683370190505b50845190925060005b82811015610eb357818560011810611eb8576000611ed6565b858560011881518110611ecd57611ecd612f0c565b60200260200101515b848281518110611ee857611ee8612f0c565b60200260200101818152505060005b82811015611f885760008160010190506000888381518110611f1b57611f1b612f0c565b602002602001015190506000858310611f35576000611f50565b898381518110611f4757611f47612f0c565b60200260200101515b9050611f5c82826125d1565b8a600186901c81518110611f7257611f72612f0c565b6020908102919091010152505050600201611ef7565b50600194851c94918201821c9101611e9f565b600281516005811115611fb057611fb0612a1a565b146119505760405163398debe560e21b815260040160405180910390fd5b609854604051632885570d60e21b815263ffffffff8085166004830152831660248201526001600160a01b039091169063a2155c3490604401600060405180830381600087803b15801561202157600080fd5b505af1158015612035573d6000803e3d6000fd5b505060c954604051632885570d60e21b815263ffffffff8087166004830152851660248201526001600160a01b03909116925063a2155c3491506044015b600060405180830381600087803b15801561208d57600080fd5b505af115801561093c573d6000803e3d6000fd5b6000806120ad83611c58565b90506000815160058111156120c4576120c4612a1a565b146120dc576106778160000151826020015185611ad9565b50919050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff161561217b578160ff1660011480156121575750303b155b6121735760405162461bcd60e51b81526004016106bf9061318f565b506000919050565b60005460ff8084169116106121a25760405162461bcd60e51b81526004016106bf9061318f565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166121e35760405162461bcd60e51b81526004016106bf906131dd565b609780546001600160a01b039485166001600160a01b031991821617909155609880549385169382169390931790925560998054919093169116179055565b600054610100900460ff166122495760405162461bcd60e51b81526004016106bf906131dd565b610ee6612619565b60048151600581111561226657612266612a1a565b1461195057604051630a06903760e01b815260040160405180910390fd5b84546000906122968686866020612649565b146122b457604051630c5805f160e11b815260040160405180910390fd5b6122c18583856020612649565b958690555093949350505050565b6001815160058111156122e4576122e4612a1a565b14158015612305575060028151600581111561230257612302612a1a565b14155b156119505760405163ec3d0d8560e01b815260040160405180910390fd5b63ffffffff82166000908152609a60205260408082208151606081019092528054829060ff16600281111561235a5761235a612a1a565b600281111561236b5761236b612a1a565b8152905461010081046001600160581b03166020830152600160601b90046001600160a01b031660409091015290506002815160028111156123af576123af612a1a565b036123cd5760405163f10068b560e01b815260040160405180910390fd5b60028082526001600160a01b03831660408084019190915263ffffffff85166000908152609a60205220825181548493839160ff191690600190849081111561241857612418612a1a565b021790555060208281015182546040909401516001600160a01b0316600160601b026001600160601b036001600160581b03928316610100021660ff909516949094179390931790915582015160009116156125ae576000600183602001516124819190613228565b6001600160581b031690506000609b82815481106124a1576124a1612f0c565b600091825260209182902060408051606081018252919092015463ffffffff80821683526401000000008204811694830194909452600160401b900490921690820152609b80549192508791849081106124fd576124fd612f0c565b600091825260209182902001805463ffffffff60401b1916600160401b63ffffffff9485160217905582015187821691161461253d578060200151612540565b80515b63ffffffff8181166000818152609a60209081526040808320929092558151878152938b16908401528201526001600160a01b03871660608201529093507fb4cad5624e1d1c6c622ec70516ee582fe3f6519440c5b47e5165141edc9c54cf9060800160405180910390a150505b6110ad84826126d8565b600060015b828110156120dc576001918201911b6125bd565b6000821580156125df575081155b156125ec5750600061158d565b50604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600054610100900460ff166126405760405162461bcd60e51b81526004016106bf906131dd565b610ee6336120e2565b81516000908281111561266f5760405163c5360feb60e01b815260040160405180910390fd5b84915060005b818110156126ac576126a28386838151811061269357612693612f0c565b60200260200101518984612781565b9250600101612675565b50805b838110156126ce576126c48360008984612781565b92506001016126af565b5050949350505050565b609854604051630c22d24360e31b815263ffffffff8085166004830152831660248201526001600160a01b0390911690636116921890604401600060405180830381600087803b15801561272b57600080fd5b505af115801561273f573d6000803e3d6000fd5b505060c954604051630c22d24360e31b815263ffffffff8087166004830152851660248201526001600160a01b03909116925063611692189150604401612073565b6000600183831c1681036127a05761279985856125d1565b90506127aa565b61279984866125d1565b949350505050565b6000806000606084860312156127c757600080fd5b833561ffff811681146127d957600080fd5b925060208401356001600160e01b0319811681146127f657600080fd5b929592945050506040919091013590565b80356001600160a01b0381168114610a0557600080fd5b60008060006060848603121561283357600080fd5b61283c84612807565b9250602084013560ff811681146127f657600080fd5b6020808252825182820181905260009190848201906040850190845b8181101561288a5783518352928401929184019160010161286e565b50909695505050505050565b63ffffffff8116811461195057600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156128e7576128e76128a8565b604052919050565b60008060006060848603121561290457600080fd5b833561290f81612896565b9250602061291e858201612807565b9250604085013567ffffffffffffffff8082111561293b57600080fd5b818701915087601f83011261294f57600080fd5b813581811115612961576129616128a8565b8060051b91506129728483016128be565b818152918301840191848101908a84111561298c57600080fd5b938501935b838510156129aa57843582529385019390850190612991565b8096505050505050509250925092565b6000806000606084860312156129cf57600080fd5b83356129da81612896565b92506129e860208501612807565b91506129f660408501612807565b90509250925092565b600060208284031215612a1157600080fd5b61067782612807565b634e487b7160e01b600052602160045260246000fd5b60068110612a4057612a40612a1a565b9052565b612a4f828251612a30565b60208181015163ffffffff9081169184019190915260409182015116910152565b6060810161158d8284612a44565b600060208284031215612a9057600080fd5b5035919050565b6001600160a01b0383168152608081016106776020830184612a44565b60008060408385031215612ac757600080fd5b50508035926020909101359150565b6080810160038610612aea57612aea612a1a565b9481526001600160a01b0393841660208201529190921660408201526060015290565b60005b83811015612b28578181015183820152602001612b10565b50506000910152565b60008151808452612b49816020860160208601612b0d565b601f01601f19169290920160200192915050565b6020815260006106776020830184612b31565b60008060208385031215612b8357600080fd5b823567ffffffffffffffff80821115612b9b57600080fd5b818501915085601f830112612baf57600080fd5b813581811115612bbe57600080fd5b8660208260051b8501011115612bd357600080fd5b60209290920196919550909350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612c4d57888303603f190185528151805115158452870151878401879052612c3a87850182612b31565b9588019593505090860190600101612c0c565b509098975050505050505050565b60008060408385031215612c6e57600080fd5b8235612c7981612896565b9150612c8760208401612807565b90509250929050565b600080600080600060a08688031215612ca857600080fd5b8535612cb381612896565b9450602086013593506040860135612cca81612896565b9250612cd860608701612807565b9150612ce660808701612807565b90509295509295909350565b600080600060608486031215612d0757600080fd5b8335612d1281612896565b95602085013595506040909401359392505050565b60008060408385031215612d3a57600080fd5b8235612d4581612896565b91506020830135612d5581612896565b809150509250929050565b600060208284031215612d7257600080fd5b813561067781612896565b6020808252825182820181905260009190848201906040850190845b8181101561288a5783516001600160a01b031683529284019291840191600101612d99565b600080600060608486031215612dd357600080fd5b612ddc84612807565b925060208401356127f681612896565b6001600160a01b038781168252868116602083015285811660408301528416606082015260c060808201819052600090612e2890830185612b31565b82810360a0840152612e3a8185612b31565b9998505050505050505050565b60008060008060808587031215612e5d57600080fd5b612e6685612807565b9350612e7460208601612807565b9250612e8260408601612807565b9150612e9060608601612807565b905092959194509250565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561158d5761158d612ed0565b8181038181111561158d5761158d612ed0565b634e487b7160e01b600052603260045260246000fd5b600060018201612f3457612f34612ed0565b5060010190565b60008235603e19833603018112612f5157600080fd5b9190910192915050565b6000808335601e19843603018112612f7257600080fd5b83018035915067ffffffffffffffff821115612f8d57600080fd5b602001915036819003821315612fa257600080fd5b9250929050565b8183823760009101908152919050565b805164ffffffffff81168114610a0557600080fd5b600080600060608486031215612fe357600080fd5b612fec84612fb9565b9250612ffa60208501612fb9565b9150604084015161300a81612896565b809150509250925092565b600063ffffffff808616835280851660208401525060606040830152610cbe6060830184612b31565b6000806040838503121561305157600080fd5b825161305c81612896565b6020939093015192949293505050565b600082601f83011261307d57600080fd5b815167ffffffffffffffff811115613097576130976128a8565b6130aa601f8201601f19166020016128be565b8181528460208386010111156130bf57600080fd5b6127aa826020830160208701612b0d565b600080604083850312156130e357600080fd5b825167ffffffffffffffff808211156130fb57600080fd5b6131078683870161306c565b9350602085015191508082111561311d57600080fd5b5061312a8582860161306c565b9150509250929050565b60006006851061314657613146612a1a565b5060f89390931b835260e09190911b6001600160e01b031916600183015260601b6bffffffffffffffffffffffff1916600582015260190190565b6020810161158d8284612a30565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160581b0382811682821603908082111561324857613248612ed0565b509291505056fea2646970667358221220f477d2008bd16013b229d584fc0e66ae92a6014d014bb7b3b46f3fc6106e93d364736f6c63430008110033",
    "sourceMap": "237:130:130:-:0;;;313:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1839:120:5;;;;;;;;;;;;;-1:-1:-1;;;1839:120:5;;;;1080:32:7;;355:6:130;;;1839:120:5;1346:24:7;1360:8;1346:24;:::i;:::-;1338:32;;-1:-1:-1;1926:26:5::1;::::0;;::::1;;::::0;3926:24:65;::::1;3861:2:45;3926:24:65;::::0;-1:-1:-1;3922:58:65::1;;3959:21;;-1:-1:-1::0;;;3959:21:65::1;;;;;;;;;;;3922:58;3854:133:::0;313:52:130;237:130;;14:280:200;83:6;136:2;124:9;115:7;111:23;107:32;104:52;;;152:1;149;142:12;104:52;184:9;178:16;234:10;227:5;223:22;216:5;213:33;203:61;;260:1;257;250:12;203:61;283:5;14:280;-1:-1:-1;;;14:280:200:o;299:297::-;417:12;;464:4;453:16;;;447:23;;417:12;482:16;;479:111;;;576:1;572:6;562;556:4;552:17;549:1;545:25;541:38;534:5;530:50;521:59;;479:111;;299:297;;;:::o;:::-;237:130:130;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c8063715018a611610130578063b269681d116100b8578063e3a96cbd1161007c578063e3a96cbd1461057b578063f2fde38b146105a0578063f8c8765e146105b3578063fb0e722b146105c6578063fbc5265e146105d957600080fd5b8063b269681d1461050f578063c1c0f4f614610522578063c99dcb9e14610542578063c9f1a03f14610555578063cc8755011461056857600080fd5b8063938b5f32116100ff578063938b5f32146104975780639d228a51146104aa5780639fbcb9cb146104d6578063a149352c146104e9578063a2155c34146104fc57600080fd5b8063715018a61461041b57806389791e17146104235780638d3638f4146104365780638da5cb5b1461047257600080fd5b806333d1b2e8116101b35780633eea79d1116101825780633eea79d1146103645780634c3e1c1f1461037757806354fd4d501461038a57806360fc8466146103e857806369978b0d1461040857600080fd5b806333d1b2e81461031e5780633463d1b11461033157806336cba43c146103545780633aaeccc61461035c57600080fd5b8063237a85a5116101fa578063237a85a5146102af5780632853a0e6146102c257806328f3fac9146102d55780632de5aaf7146102f557806333c3a8f31461031657600080fd5b80630e6bfcd51461022c578063127a2c9d1461026457806312db2ef614610285578063130c56731461029a575b600080fd5b61023f61023a3660046127b2565b6105ec565b604080516001600160e01b031990931683526020830191909152015b60405180910390f35b61027761027236600461281e565b61062f565b60405190815260200161025b565b61028d61067e565b60405161025b9190612852565b6102ad6102a83660046128ef565b610695565b005b6102ad6102bd3660046128ef565b61076d565b6102ad6102d03660046129ba565b610944565b6102e86102e33660046129ff565b61097f565b60405161025b9190612a70565b610308610303366004612a7e565b610a0a565b60405161025b929190612a97565b60cc54610277565b61028d61032c366004612ab4565b610a51565b61034461033f3660046129ff565b610b2c565b60405161025b9493929190612ad6565b60cd54610277565b609b54610277565b61028d6103723660046129ff565b610c68565b6102ad6103853660046128ef565b610cc7565b6040805180820182527f000000000000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006020820152905161025b9190612b5d565b6103fb6103f6366004612b70565b610d6a565b60405161025b9190612be5565b6102ad6104163660046129ba565b61096f565b6102ad610ebc565b6102ad610431366004612c5b565b610ee8565b61045d7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161025b565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161025b565b60975461047f906001600160a01b031681565b6104bd6104b8366004612c90565b6110b3565b6040516001600160e01b0319909116815260200161025b565b60c95461047f906001600160a01b031681565b6104bd6104f7366004612cf2565b611122565b6102ad61050a366004612d27565b611160565b60985461047f906001600160a01b031681565b610535610530366004612d60565b611455565b60405161025b9190612d7d565b6102776105503660046129ff565b611582565b6102ad6105633660046127b2565b611593565b6102ad610576366004612dbe565b6115be565b61058e610589366004612a7e565b61173e565b60405161025b96959493929190612dec565b6102ad6105ae3660046129ff565b6118b8565b6102ad6105c1366004612e47565b611953565b60995461047f906001600160a01b031681565b6102ad6105e73660046128ef565b611a31565b60985460009081906001600160a01b0316331461061c57604051636efcc49f60e01b815260040160405180910390fd5b50630e6bfcd560e01b9491935090915050565b6098546000906001600160a01b0316331461065d57604051636efcc49f60e01b815260040160405180910390fd5b8161066b5761474d60f01b91505b5063127a2c9d60e01b81185b9392505050565b6060610690600060cc80549050610a51565b905090565b6033546001600160a01b031633146106c85760405162461bcd60e51b81526004016106bf90612e9b565b60405180910390fd5b60006106d38361097f565b90506106de81611aa6565b8363ffffffff16816020015163ffffffff161461070e57604051630b09697760e11b815260040160405180910390fd5b600061071c60018686611ad9565b9050610766818460405180606001604052806002600581111561074157610741612a1a565b81526020018963ffffffff168152602001866040015163ffffffff1681525087611b0f565b5050505050565b6033546001600160a01b031633146107975760405162461bcd60e51b81526004016106bf90612e9b565b60091963ffffffff8416016107bf5760405163079597d560e51b815260040160405180910390fd5b60006107ca83611c58565b905060008080835160058111156107e3576107e3612a1a565b0361088f5760cc5463ffffffff1161080e576040516377ae67b360e11b815260040160405180910390fd5b60cc805460018082019092557f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe810180546001600160a01b0389166001600160a01b0319918216811790925563ffffffff8a16600090815260cb602090815260408220805496870181558252902090930180549093161790915591506108f8565b6003835160058111156108a4576108a4612a1a565b1480156108c057508563ffffffff16836020015163ffffffff16145b156108df57826040015191506108d860038787611ad9565b90506108f8565b6040516386511bd960e01b815260040160405180910390fd5b61093c818560405180606001604052806001600581111561091b5761091b612a1a565b81526020018a63ffffffff1681526020018663ffffffff1681525088611b0f565b505050505050565b6099546001600160a01b0316331461096f5760405163dbc2fa8560e01b815260040160405180910390fd5b61097a838383611ced565b505050565b60408051606081018252600080825260208201819052918101919091526109a582611c58565b90506002609a60006109b685611d8f565b815260208101919091526040016000205460ff1660028111156109db576109db612a1a565b1480156109fb57506005815160058111156109f8576109f8612a1a565b14155b15610a0557600481525b919050565b60408051606081018252600080825260208201819052918101829052610a2f83611db9565b91506001600160a01b03821615610a4c57610a498261097f565b90505b915091565b60cc54606090808410610a7757604051631390f2a160e01b815260040160405180910390fd5b80610a828486612ee6565b1115610a9557610a928482612ef9565b92505b8267ffffffffffffffff811115610aae57610aae6128a8565b604051908082528060200260200182016040528015610ad7578160200160208202803683370190505b50915060005b83811015610b2457610af7610af28287612ee6565b611df4565b838281518110610b0957610b09612f0c565b6020908102919091010152610b1d81612f22565b9050610add565b505092915050565b6000806000806000610b3d86611d8f565b6000818152609a602052604080822081516060810190925280549394509192909190829060ff166002811115610b7557610b75612a1a565b6002811115610b8657610b86612a1a565b8152905461010081046001600160581b03908116602080850191909152600160601b9092046001600160a01b03166040938401528351928401519184015192995090965016935090508215610c5f576000609b610be4600186612ef9565b81548110610bf457610bf4612f0c565b600091825260209182902060408051606081018252929091015463ffffffff8082168085526401000000008304821695850195909552600160401b90910416908201529150610c5b908414610c4a578151610c50565b81602001515b63ffffffff16611db9565b9550505b50509193509193565b60606000610c7461067e565b90506000610c8184611c58565b905060008082516005811115610c9957610c99612a1a565b14610cae57816040015163ffffffff16610cb2565b60cc545b9050610cbe8382611e2c565b95945050505050565b6033546001600160a01b03163314610cf15760405162461bcd60e51b81526004016106bf90612e9b565b6000610cfc8361097f565b9050610d0781611f9b565b8363ffffffff16816020015163ffffffff1614610d3757604051630b09697760e11b815260040160405180910390fd5b6000610d4560028686611ad9565b9050610766818460405180606001604052806003600581111561074157610741612a1a565b6060818067ffffffffffffffff811115610d8657610d866128a8565b604051908082528060200260200182016040528015610dcc57816020015b604080518082019091526000815260606020820152815260200190600190039081610da45790505b5091503660005b82811015610eb357858582818110610ded57610ded612f0c565b9050602002810190610dff9190612f3b565b91506000848281518110610e1557610e15612f0c565b60200260200101519050306001600160a01b0316838060200190610e399190612f5b565b604051610e47929190612fa9565b600060405180830381855af49150503d8060008114610e82576040519150601f19603f3d011682016040523d82523d6000602084013e610e87565b606091505b5060208301521515808252833517610eaa576309ad446560e31b60005260046000fd5b50600101610dd3565b50505092915050565b6033546001600160a01b03163314610ee65760405162461bcd60e51b81526004016106bf90612e9b565b565b6033546001600160a01b03163314610f125760405162461bcd60e51b81526004016106bf90612e9b565b6000609a6000610f2184611d8f565b8152602081019190915260409081016000208151606081019092528054829060ff166002811115610f5457610f54612a1a565b6002811115610f6557610f65612a1a565b8152905461010081046001600160581b03166020830152600160601b90046001600160a01b03166040909101529050600081516002811115610fa957610fa9612a1a565b03610fc7576040516359d38fd160e11b815260040160405180910390fd5b600281516002811115610fdc57610fdc612a1a565b03610ffa5760405163f10068b560e01b815260040160405180910390fd5b6098546040805163204c48a960e11b815290516000926001600160a01b03169163409891529160048083019260609291908290030181865afa158015611044573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110689190612fce565b505090508064ffffffffff166138406110819190612ee6565b4210156110a1576040516301bf715b60e61b815260040160405180910390fd5b6110ad84846000611ced565b50505050565b6098546000906001600160a01b031633146110e157604051636efcc49f60e01b815260040160405180910390fd5b6201518085101561110557604051630a8928dd60e41b815260040160405180910390fd5b611110848484611ced565b50639d228a5160e01b95945050505050565b6098546000906001600160a01b0316331461115057604051636efcc49f60e01b815260040160405180910390fd5b506328524d4b60e21b9392505050565b6099546001600160a01b0316331461118b5760405163dbc2fa8560e01b815260040160405180910390fd5b63ffffffff82166000908152609a602052604081205460ff1660028111156111b5576111b5612a1a565b146111d35760405163367526d360e21b815260040160405180910390fd5b63ffffffff81166000908152609a602052604081205460ff1660028111156111fd576111fd612a1a565b1461121b57604051636893014360e01b815260040160405180910390fd5b604080516060808201835263ffffffff8086168352848116602084019081526000848601818152609b8054600181810183559382905296517fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc3499097018054945192518616600160401b0263ffffffff60401b199387166401000000000267ffffffffffffffff1990961698909616979097179390931716929092179093559154835191820190935290819081526001600160581b0383166020808301919091526000604092830181905263ffffffff87168152609a9091522081518154829060ff1916600183600281111561131257611312612a1a565b0217905550602082015181546040938401516001600160a01b0316600160601b026001600160601b036001600160581b03909316610100029290921660ff9091161717905580516060810190915280600181526001600160581b0383166020808301919091526000604092830181905263ffffffff86168152609a9091522081518154829060ff191660018360028111156113af576113af612a1a565b0217905550602082015181546040909301516001600160a01b0316600160601b026001600160601b036001600160581b03909216610100029190911660ff909316929092179190911790557fd0672fae056abe2bf0637742527d49add67fdb68192a6c6f6bf86eac19fe0530611426600183612ef9565b6040805191825263ffffffff808716602084015285169082015260600160405180910390a161097a8383611fce565b63ffffffff8116600090815260cb60205260409020546060908067ffffffffffffffff811115611487576114876128a8565b6040519080825280602002602001820160405280156114b0578160200160208202803683370190505b5091506000805b8281101561156f5763ffffffff8516600090815260cb602052604081208054839081106114e6576114e6612f0c565b6000918252602090912001546001600160a01b0316905060016115088261097f565b51600581111561151a5761151a612a1a565b0361155e5780858461152b81612f22565b95508151811061153d5761153d612f0c565b60200260200101906001600160a01b031690816001600160a01b0316815250505b5061156881612f22565b90506114b7565b5081811461157b578083525b5050919050565b600061158d826120a1565b92915050565b6098546001600160a01b0316331461097a57604051636efcc49f60e01b815260040160405180910390fd5b60c9546001600160a01b031633146115e9576040516364e24e7360e11b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168263ffffffff160361168757609754604051634e04e7a760e01b81526001600160a01b0385811660048301526024820184905290911690634e04e7a790604401600060405180830381600087803b15801561166a57600080fd5b505af115801561167e573d6000803e3d6000fd5b50505050505050565b609754604080516001600160a01b038681166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b03166303f40e2760e31b179052915163a1c702a760e01b8152919092169163a1c702a7916116fc918691620151809190600401613015565b60408051808303816000875af115801561171a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610766919061303e565b600080600080606080609b80549050871061176c57604051631390f2a160e01b815260040160405180910390fd5b6000609b888154811061178157611781612f0c565b600091825260209182902060408051606081018252929091015463ffffffff8082168085526401000000008304821695850195909552600160401b909104169082015291506117cf90611db9565b96506117e4816020015163ffffffff16611db9565b604082015190965063ffffffff16156118385761180a816040015163ffffffff16611db9565b60408281015163ffffffff166000908152609a6020522054909550600160601b90046001600160a01b031693505b60995460405163c495912b60e01b8152600481018a90526001600160a01b039091169063c495912b90602401600060405180830381865afa158015611881573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118a991908101906130d0565b97999698509496939592505050565b6033546001600160a01b031633146118e25760405162461bcd60e51b81526004016106bf90612e9b565b6001600160a01b0381166119475760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106bf565b611950816120e2565b50565b600061195f6001612134565b90508015611977576000805461ff0019166101001790555b6119828585856121bc565b60c980546001600160a01b0319166001600160a01b0384161790556119a5612222565b60cc80546001810182556000919091527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe0180546001600160a01b03191690558015610766576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6000611a3c8361097f565b9050611a4781612251565b8363ffffffff16816020015163ffffffff1614611a7757604051630b09697760e11b815260040160405180910390fd5b6000611a82846120a1565b90506107668184604051806060016040528060058081111561074157610741612a1a565b600181516005811115611abb57611abb612a1a565b1461195057604051632437e77160e11b815260040160405180910390fd5b6000838383604051602001611af093929190613134565b6040516020818303038152906040528051906020012090509392505050565b6000611b248360000151846020015184611ad9565b90506000611b4c846040015163ffffffff1687878560cd61228490949392919063ffffffff16565b6001600160a01b038416600090815260ca60205260409020855181549293508692829060ff19166001836005811115611b8757611b87612a1a565b0217905550602082810151825460409485015168ffffffffffffffff001990911661010063ffffffff9384160268ffffffff0000000000191617650100000000009183169190910217909255860151865192516001600160a01b0387169391909216917f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e91611c1591613181565b60405180910390a36040518181527f2cbc14f49c068133583f7cb530018af451c87c1cf1327cf2a4ff4698c4730aa49060200160405180910390a1505050505050565b60408051606081018252600080825260208201819052918101919091526001600160a01b038216600090815260ca6020526040908190208151606081019092528054829060ff166005811115611cb057611cb0612a1a565b6005811115611cc157611cc1612a1a565b8152905463ffffffff610100820481166020840152650100000000009091041660409091015292915050565b6000611cf883611c58565b9050611d03816122cf565b8363ffffffff16816020015163ffffffff1614611d3357604051630b09697760e11b815260040160405180910390fd5b826001600160a01b03168463ffffffff167f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e6004604051611d749190613181565b60405180910390a3611d8a816040015183612323565b6110ad565b6001600160a01b0316600090815260ca602052604090205465010000000000900463ffffffff1690565b60cc54600090821015610a055760cc8281548110611dd957611dd9612f0c565b6000918252602090912001546001600160a01b031692915050565b60008115610a055761158d60cc8381548110611e1257611e12612f0c565b6000918252602090912001546001600160a01b03166120a1565b60606000611e5284518410611e4b57611e46846001612ee6565b6125b8565b84516125b8565b90508067ffffffffffffffff811115611e6d57611e6d6128a8565b604051908082528060200260200182016040528015611e96578160200160208202803683370190505b50845190925060005b82811015610eb357818560011810611eb8576000611ed6565b858560011881518110611ecd57611ecd612f0c565b60200260200101515b848281518110611ee857611ee8612f0c565b60200260200101818152505060005b82811015611f885760008160010190506000888381518110611f1b57611f1b612f0c565b602002602001015190506000858310611f35576000611f50565b898381518110611f4757611f47612f0c565b60200260200101515b9050611f5c82826125d1565b8a600186901c81518110611f7257611f72612f0c565b6020908102919091010152505050600201611ef7565b50600194851c94918201821c9101611e9f565b600281516005811115611fb057611fb0612a1a565b146119505760405163398debe560e21b815260040160405180910390fd5b609854604051632885570d60e21b815263ffffffff8085166004830152831660248201526001600160a01b039091169063a2155c3490604401600060405180830381600087803b15801561202157600080fd5b505af1158015612035573d6000803e3d6000fd5b505060c954604051632885570d60e21b815263ffffffff8087166004830152851660248201526001600160a01b03909116925063a2155c3491506044015b600060405180830381600087803b15801561208d57600080fd5b505af115801561093c573d6000803e3d6000fd5b6000806120ad83611c58565b90506000815160058111156120c4576120c4612a1a565b146120dc576106778160000151826020015185611ad9565b50919050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff161561217b578160ff1660011480156121575750303b155b6121735760405162461bcd60e51b81526004016106bf9061318f565b506000919050565b60005460ff8084169116106121a25760405162461bcd60e51b81526004016106bf9061318f565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166121e35760405162461bcd60e51b81526004016106bf906131dd565b609780546001600160a01b039485166001600160a01b031991821617909155609880549385169382169390931790925560998054919093169116179055565b600054610100900460ff166122495760405162461bcd60e51b81526004016106bf906131dd565b610ee6612619565b60048151600581111561226657612266612a1a565b1461195057604051630a06903760e01b815260040160405180910390fd5b84546000906122968686866020612649565b146122b457604051630c5805f160e11b815260040160405180910390fd5b6122c18583856020612649565b958690555093949350505050565b6001815160058111156122e4576122e4612a1a565b14158015612305575060028151600581111561230257612302612a1a565b14155b156119505760405163ec3d0d8560e01b815260040160405180910390fd5b63ffffffff82166000908152609a60205260408082208151606081019092528054829060ff16600281111561235a5761235a612a1a565b600281111561236b5761236b612a1a565b8152905461010081046001600160581b03166020830152600160601b90046001600160a01b031660409091015290506002815160028111156123af576123af612a1a565b036123cd5760405163f10068b560e01b815260040160405180910390fd5b60028082526001600160a01b03831660408084019190915263ffffffff85166000908152609a60205220825181548493839160ff191690600190849081111561241857612418612a1a565b021790555060208281015182546040909401516001600160a01b0316600160601b026001600160601b036001600160581b03928316610100021660ff909516949094179390931790915582015160009116156125ae576000600183602001516124819190613228565b6001600160581b031690506000609b82815481106124a1576124a1612f0c565b600091825260209182902060408051606081018252919092015463ffffffff80821683526401000000008204811694830194909452600160401b900490921690820152609b80549192508791849081106124fd576124fd612f0c565b600091825260209182902001805463ffffffff60401b1916600160401b63ffffffff9485160217905582015187821691161461253d578060200151612540565b80515b63ffffffff8181166000818152609a60209081526040808320929092558151878152938b16908401528201526001600160a01b03871660608201529093507fb4cad5624e1d1c6c622ec70516ee582fe3f6519440c5b47e5165141edc9c54cf9060800160405180910390a150505b6110ad84826126d8565b600060015b828110156120dc576001918201911b6125bd565b6000821580156125df575081155b156125ec5750600061158d565b50604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600054610100900460ff166126405760405162461bcd60e51b81526004016106bf906131dd565b610ee6336120e2565b81516000908281111561266f5760405163c5360feb60e01b815260040160405180910390fd5b84915060005b818110156126ac576126a28386838151811061269357612693612f0c565b60200260200101518984612781565b9250600101612675565b50805b838110156126ce576126c48360008984612781565b92506001016126af565b5050949350505050565b609854604051630c22d24360e31b815263ffffffff8085166004830152831660248201526001600160a01b0390911690636116921890604401600060405180830381600087803b15801561272b57600080fd5b505af115801561273f573d6000803e3d6000fd5b505060c954604051630c22d24360e31b815263ffffffff8087166004830152851660248201526001600160a01b03909116925063611692189150604401612073565b6000600183831c1681036127a05761279985856125d1565b90506127aa565b61279984866125d1565b949350505050565b6000806000606084860312156127c757600080fd5b833561ffff811681146127d957600080fd5b925060208401356001600160e01b0319811681146127f657600080fd5b929592945050506040919091013590565b80356001600160a01b0381168114610a0557600080fd5b60008060006060848603121561283357600080fd5b61283c84612807565b9250602084013560ff811681146127f657600080fd5b6020808252825182820181905260009190848201906040850190845b8181101561288a5783518352928401929184019160010161286e565b50909695505050505050565b63ffffffff8116811461195057600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156128e7576128e76128a8565b604052919050565b60008060006060848603121561290457600080fd5b833561290f81612896565b9250602061291e858201612807565b9250604085013567ffffffffffffffff8082111561293b57600080fd5b818701915087601f83011261294f57600080fd5b813581811115612961576129616128a8565b8060051b91506129728483016128be565b818152918301840191848101908a84111561298c57600080fd5b938501935b838510156129aa57843582529385019390850190612991565b8096505050505050509250925092565b6000806000606084860312156129cf57600080fd5b83356129da81612896565b92506129e860208501612807565b91506129f660408501612807565b90509250925092565b600060208284031215612a1157600080fd5b61067782612807565b634e487b7160e01b600052602160045260246000fd5b60068110612a4057612a40612a1a565b9052565b612a4f828251612a30565b60208181015163ffffffff9081169184019190915260409182015116910152565b6060810161158d8284612a44565b600060208284031215612a9057600080fd5b5035919050565b6001600160a01b0383168152608081016106776020830184612a44565b60008060408385031215612ac757600080fd5b50508035926020909101359150565b6080810160038610612aea57612aea612a1a565b9481526001600160a01b0393841660208201529190921660408201526060015290565b60005b83811015612b28578181015183820152602001612b10565b50506000910152565b60008151808452612b49816020860160208601612b0d565b601f01601f19169290920160200192915050565b6020815260006106776020830184612b31565b60008060208385031215612b8357600080fd5b823567ffffffffffffffff80821115612b9b57600080fd5b818501915085601f830112612baf57600080fd5b813581811115612bbe57600080fd5b8660208260051b8501011115612bd357600080fd5b60209290920196919550909350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015612c4d57888303603f190185528151805115158452870151878401879052612c3a87850182612b31565b9588019593505090860190600101612c0c565b509098975050505050505050565b60008060408385031215612c6e57600080fd5b8235612c7981612896565b9150612c8760208401612807565b90509250929050565b600080600080600060a08688031215612ca857600080fd5b8535612cb381612896565b9450602086013593506040860135612cca81612896565b9250612cd860608701612807565b9150612ce660808701612807565b90509295509295909350565b600080600060608486031215612d0757600080fd5b8335612d1281612896565b95602085013595506040909401359392505050565b60008060408385031215612d3a57600080fd5b8235612d4581612896565b91506020830135612d5581612896565b809150509250929050565b600060208284031215612d7257600080fd5b813561067781612896565b6020808252825182820181905260009190848201906040850190845b8181101561288a5783516001600160a01b031683529284019291840191600101612d99565b600080600060608486031215612dd357600080fd5b612ddc84612807565b925060208401356127f681612896565b6001600160a01b038781168252868116602083015285811660408301528416606082015260c060808201819052600090612e2890830185612b31565b82810360a0840152612e3a8185612b31565b9998505050505050505050565b60008060008060808587031215612e5d57600080fd5b612e6685612807565b9350612e7460208601612807565b9250612e8260408601612807565b9150612e9060608601612807565b905092959194509250565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082018082111561158d5761158d612ed0565b8181038181111561158d5761158d612ed0565b634e487b7160e01b600052603260045260246000fd5b600060018201612f3457612f34612ed0565b5060010190565b60008235603e19833603018112612f5157600080fd5b9190910192915050565b6000808335601e19843603018112612f7257600080fd5b83018035915067ffffffffffffffff821115612f8d57600080fd5b602001915036819003821315612fa257600080fd5b9250929050565b8183823760009101908152919050565b805164ffffffffff81168114610a0557600080fd5b600080600060608486031215612fe357600080fd5b612fec84612fb9565b9250612ffa60208501612fb9565b9150604084015161300a81612896565b809150509250925092565b600063ffffffff808616835280851660208401525060606040830152610cbe6060830184612b31565b6000806040838503121561305157600080fd5b825161305c81612896565b6020939093015192949293505050565b600082601f83011261307d57600080fd5b815167ffffffffffffffff811115613097576130976128a8565b6130aa601f8201601f19166020016128be565b8181528460208386010111156130bf57600080fd5b6127aa826020830160208701612b0d565b600080604083850312156130e357600080fd5b825167ffffffffffffffff808211156130fb57600080fd5b6131078683870161306c565b9350602085015191508082111561311d57600080fd5b5061312a8582860161306c565b9150509250929050565b60006006851061314657613146612a1a565b5060f89390931b835260e09190911b6001600160e01b031916600183015260601b6bffffffffffffffffffffffff1916600582015260190190565b6020810161158d8284612a30565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160581b0382811682821603908082111561324857613248612ed0565b509291505056fea2646970667358221220f477d2008bd16013b229d584fc0e66ae92a6014d014bb7b3b46f3fc6106e93d364736f6c63430008110033",
    "sourceMap": "237:130:130:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1785:325:129;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;;731:33:200;;;713:52;;796:2;781:18;;774:34;;;;686:18;1785:325:129;;;;;;;;916:345;;;;;;:::i;:::-;;:::i;:::-;;;1559:25:200;;;1547:2;1532:18;916:345:129;1413:177:200;14479:116:65;;;:::i;:::-;;;;;;;:::i;6817:988::-;;;;;;:::i;:::-;;:::i;:::-;;4853:1914;;;;;;:::i;:::-;;:::i;6105:136:64:-;;;;;;:::i;:::-;;:::i;6856:417::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;6615:201::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;13823:100:65:-;13902:7;:14;13823:100;;14645:463;;;;;;:::i;:::-;;:::i;8293:633:64:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;12730:101:65:-;12809:10;:15;12730:101;;7313::64;7391:9;:16;7313:101;;13973:456:65;;;;;;:::i;:::-;;:::i;7855:1077::-;;;;;;:::i;:::-;;:::i;1383:401:7:-;1554:28;;;;;;;;1567:7;1554:28;;1576:5;1554:28;;;;1383:401;;;;1554:28;1383:401;:::i;542:1352:6:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;314:133:129:-;;;;;;:::i;:::-;;:::i;2184:57:5:-;;;:::i;3920:751:64:-;;;;;;:::i;:::-;;:::i;1356:35:5:-;;;;;;;;9829:10:200;9817:23;;;9799:42;;9787:2;9772:18;1356:35:5;9655:192:200;1276:85:87;1348:6;;-1:-1:-1;;;;;1348:6:87;1276:85;;;-1:-1:-1;;;;;10016:32:200;;;9998:51;;9986:2;9971:18;1276:85:87;9852:203:200;2454:21:64;;;;;-1:-1:-1;;;;;2454:21:64;;;10290:794:65;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;;10829:33:200;;;10811:52;;10799:2;10784:18;10290:794:65;10667:202:200;3047:21:65;;;;;-1:-1:-1;;;;;3047:21:65;;;2116:203:129;;;;;;:::i;:::-;;:::i;5035:1030:64:-;;;;;;:::i;:::-;;:::i;2482:26::-;;;;;-1:-1:-1;;;;;2482:26:64;;;12881:732:65;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;13663:110::-;;;;;;:::i;:::-;;:::i;1432:182:129:-;;;;;;:::i;:::-;;:::i;11458:898:65:-;;;;;;:::i;:::-;;:::i;7454:799:64:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;:::i;2158:198:87:-;;;;;;:::i;:::-;;:::i;3993:427:65:-;;;;;;:::i;:::-;;:::i;2515:20:64:-;;;;;-1:-1:-1;;;;;2515:20:64;;;9298:942:65;;;;;;:::i;:::-;;:::i;1785:325:129:-;1921:11;;1876:6;;;;-1:-1:-1;;;;;1921:11:129;1907:10;:25;1903:60;;1941:22;;-1:-1:-1;;;1941:22:129;;;;;;;;;;;1903:60;-1:-1:-1;;;;2054:42:129;2098:4;;-1:-1:-1;1785:325:129;;-1:-1:-1;;1785:325:129:o;916:345::-;1033:11;;996:7;;-1:-1:-1;;;;;1033:11:129;1019:10;:25;1015:60;;1053:22;;-1:-1:-1;;;1053:22:129;;;;;;;;;;;1015:60;1089:4;1085:35;;-1:-1:-1;;;1109:11:129;;1085:35;-1:-1:-1;;;;1216:38:129;;916:345;;;;;;:::o;14479:116:65:-;14520:22;14561:27;14570:1;14573:7;:14;;;;14561:8;:27::i;:::-;14554:34;;14479:116;:::o;6817:988::-;1348:6:87;;-1:-1:-1;;;;;1348:6:87;929:10:91;1488:23:87;1480:68;;;;-1:-1:-1;;;1480:68:87;;;;;;;:::i;:::-;;;;;;;;;6986:25:65::1;7014:18;7026:5;7014:11;:18::i;:::-;6986:46;;7123:21;:6;:19;:21::i;:::-;7175:6;7158:23;;:6;:13;;;:23;;;7154:58;;7190:22;;-1:-1:-1::0;;;7190:22:65::1;;;;;;;;;;;7154:58;7563:16;7582:43;7593:16;7611:6;7619:5;7582:10;:43::i;:::-;7563:62;;7707:91;7719:8;7729:5;7736:54;;;;;;;;7748:19;7736:54;;;;;;;;:::i;:::-;;;;;7769:6;7736:54;;;;;;7777:6;:12;;;7736:54;;;;::::0;7792:5:::1;7707:11;:91::i;:::-;6917:888;;6817:988:::0;;;:::o;4853:1914::-;1348:6:87;;-1:-1:-1;;;;;1348:6:87;929:10:91;1488:23:87;1480:68;;;;-1:-1:-1;;;1480:68:87;;;;;;;:::i;:::-;-1:-1:-1;;4958:24:65::1;::::0;::::1;::::0;4954:61:::1;;4991:24;;-1:-1:-1::0;;;4991:24:65::1;;;;;;;;;;;4954:61;5098:25;5126;5145:5;5126:18;:25::i;:::-;5098:53:::0;-1:-1:-1;5197:12:65::1;::::0;;5324:11;;:32:::1;::::0;::::1;;;;;;:::i;:::-;::::0;5320:1278:::1;;5540:7;:14:::0;5558:16:::1;-1:-1:-1::0;5536:63:65::1;;5583:16;;-1:-1:-1::0;;;5583:16:65::1;;;;;;;;;;;5536:63;5628:7;:14:::0;;5746:19:::1;::::0;;::::1;::::0;;;;;::::1;::::0;;-1:-1:-1;;;;;5746:19:65;::::1;-1:-1:-1::0;;;;;;5746:19:65;;::::1;::::0;::::1;::::0;;;5779:21:::1;::::0;::::1;-1:-1:-1::0;5779:21:65;;;:13:::1;5746:19;5779:21:::0;;;;;;:33;;;;::::1;::::0;;;;;;;;::::1;::::0;;;;::::1;;::::0;;;5628:14;-1:-1:-1;5320:1278:65::1;;;5848:17;5833:11:::0;;:32:::1;::::0;::::1;;;;;;:::i;:::-;;:59;;;;;5886:6;5869:23;;:6;:13;;;:23;;;5833:59;5829:769;;;6057:6;:12;;;6049:20;;6417:44;6428:17;6447:6;6455:5;6417:10;:44::i;:::-;6406:55;;5829:769;;;6569:18;;-1:-1:-1::0;;;6569:18:65::1;;;;;;;;;;;5829:769;6679:81;6691:8;6701:5;6708:44;;;;;;;;6720:16;6708:44;;;;;;;;:::i;:::-;;;;;6738:6;6708:44;;;;;;6746:5;6708:44;;;;::::0;6754:5:::1;6679:11;:81::i;:::-;4944:1823;;;4853:1914:::0;;;:::o;6105:136:64:-;2882:5;;-1:-1:-1;;;;;2882:5:64;2868:10;:19;2864:48;;2896:16;;-1:-1:-1;;;2896:16:64;;;;;;;;;;;2864:48;6200:34:::1;6212:6;6220:5;6227:6;6200:11;:34::i;:::-;6105:136:::0;;;:::o;6856:417::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;6959:25:64;6978:5;6959:18;:25::i;:::-;6950:34;-1:-1:-1;7151:19:64;7111:13;:31;7125:16;7135:5;7125:9;:16::i;:::-;7111:31;;;;;;;;;;;-1:-1:-1;7111:31:64;:36;;;:59;;;;;;;;:::i;:::-;;:95;;;;-1:-1:-1;7189:17:64;7174:11;;:32;;;;;;;;:::i;:::-;;;7111:95;7107:160;;;7236:20;7222:34;;7107:160;6856:417;;;:::o;6615:201::-;-1:-1:-1;;;;;;;;6671:13:64;-1:-1:-1;;;;;;;;;;;;;;;6731:16:64;6741:5;6731:9;:16::i;:::-;6723:24;-1:-1:-1;;;;;;6761:19:64;;;6757:52;;6791:18;6803:5;6791:11;:18::i;:::-;6782:27;;6757:52;6615:201;;;:::o;14645:463:65:-;14775:7;:14;14719:22;;14803:24;;;14799:54;;14836:17;;-1:-1:-1;;;14836:17:65;;;;;;;;;;;14799:54;14888:11;14867:18;14879:6;14867:9;:18;:::i;:::-;:32;14863:95;;;14924:23;14938:9;14924:11;:23;:::i;:::-;14915:32;;14863:95;14989:6;14975:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14975:21:65;;14967:29;;15011:9;15006:96;15030:6;15026:1;:10;15006:96;;;15068:23;15077:13;15089:1;15077:9;:13;:::i;:::-;15068:8;:23::i;:::-;15057:5;15063:1;15057:8;;;;;;;;:::i;:::-;;;;;;;;;;:34;15038:3;;;:::i;:::-;;;15006:96;;;;14743:365;14645:463;;;;:::o;8293:633:64:-;8378:16;8396:13;8411:19;8432:18;8466;8487:16;8497:5;8487:9;:16::i;:::-;8513:32;8548:25;;;:13;:25;;;;;;8513:60;;;;;;;;;;8466:37;;-1:-1:-1;8513:32:64;;:60;;8548:25;8513:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;8513:60:64;;;;;;;;;;;-1:-1:-1;;;8513:60:64;;;-1:-1:-1;;;;;8513:60:64;;;;;;8590:17;;8631:24;;;;8678:23;;;;8590:17;;-1:-1:-1;8631:24:64;;-1:-1:-1;8665:36:64;;-1:-1:-1;8590:17:64;-1:-1:-1;8715:14:64;;8711:209;;8745:28;8776:9;8786:14;8799:1;8786:10;:14;:::i;:::-;8776:25;;;;;;;;:::i;:::-;;;;;;;;;;8745:56;;;;;;;;8776:25;;;;8745:56;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8745:56:64;;;;;;;;;-1:-1:-1;8823:86:64;;8833:32;;:75;;8890:18;;8833:75;;;8868:7;:19;;;8833:75;8823:86;;:9;:86::i;:::-;8815:94;;8731:189;8711:209;8456:470;;8293:633;;;;;:::o;13973:456:65:-;14029:22;14063;14088:10;:8;:10::i;:::-;14063:35;;14168:25;14196;14215:5;14196:18;:25::i;:::-;14168:53;-1:-1:-1;14286:13:65;;14302:11;;:32;;;;;;;;:::i;:::-;;:64;;14354:6;:12;;;14302:64;;;;;14337:7;:14;14302:64;14286:80;;14383:39;14409:5;14416;14383:25;:39::i;:::-;14376:46;13973:456;-1:-1:-1;;;;;13973:456:65:o;7855:1077::-;1348:6:87;;-1:-1:-1;;;;;1348:6:87;929:10:91;1488:23:87;1480:68;;;;-1:-1:-1;;;1480:68:87;;;;;;;:::i;:::-;8024:25:65::1;8052:18;8064:5;8052:11;:18::i;:::-;8024:46;;8247:24;:6;:22;:24::i;:::-;8302:6;8285:23;;:6;:13;;;:23;;;8281:58;;8317:22;;-1:-1:-1::0;;;8317:22:65::1;;;;;;;;;;;8281:58;8689:16;8708:46;8719:19;8740:6;8748:5;8708:10;:46::i;:::-;8689:65;;8836:89;8848:8;8858:5;8865:52;;;;;;;;8877:17;8865:52;;;;;;;;:::i;542:1352:6:-:0;602:27;658:5;;694:20;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;694:20:6;;;;;;;;;;;;;;;;680:34;;724:19;758:9;753:1135;777:6;773:1;:10;753:1135;;;808:5;;814:1;808:8;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;800:16;;830:20;853:11;865:1;853:14;;;;;;;;:::i;:::-;;;;;;;830:37;;1210:4;-1:-1:-1;;;;;1202:26:6;1229:5;:14;;;;;;;;:::i;:::-;1202:42;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1181:17:6;;;1164:80;;;;;;1517:19;;1514:38;1504:301;;-1:-1:-1;;;1675:4:6;1668:80;1782:4;1776;1769:18;1504:301;-1:-1:-1;1860:3:6;;753:1135;;;;631:1263;;542:1352;;;;:::o;2184:57:5:-;1348:6:87;;-1:-1:-1;;;;;1348:6:87;929:10:91;1488:23:87;1480:68;;;;-1:-1:-1;;;1480:68:87;;;;;;;:::i;:::-;2184:57:5:o;3920:751:64:-;1348:6:87;;-1:-1:-1;;;;;1348:6:87;929:10:91;1488:23:87;1480:68;;;;-1:-1:-1;;;1480:68:87;;;;;;;:::i;:::-;4015:34:64::1;4052:13;:38;4066:23;4076:12;4066:9;:23::i;:::-;4052:38:::0;;::::1;::::0;::::1;::::0;;;;;;;;-1:-1:-1;4052:38:64;4015:75;;::::1;::::0;::::1;::::0;;;;;;;::::1;;;::::0;::::1;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;::::0;;;;::::1;::::0;::::1;-1:-1:-1::0;;;;;4015:75:64::1;;::::0;::::1;::::0;-1:-1:-1;;;4015:75:64;::::1;-1:-1:-1::0;;;;;4015:75:64::1;::::0;;;;;;-1:-1:-1;;4104:19:64;;:39:::1;::::0;::::1;;;;;;:::i;:::-;::::0;4100:70:::1;;4152:18;;-1:-1:-1::0;;;4152:18:64::1;;;;;;;;;;;4100:70;4207:19;4184::::0;;:42:::1;::::0;::::1;;;;;;:::i;:::-;::::0;4180:79:::1;;4235:24;;-1:-1:-1::0;;;4235:24:64::1;;;;;;;;;;;4180:79;4396:11;::::0;4375:46:::1;::::0;;-1:-1:-1;;;4375:46:64;;;;4350:19:::1;::::0;-1:-1:-1;;;;;4396:11:64::1;::::0;4375:44:::1;::::0;:46:::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;4396:11;4375:46:::1;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4349:72;;;;4474:12;4453:33;;3567:7:45;4453:33:64;;;;:::i;:::-;4435:15;:51;4431:81;;;4495:17;;-1:-1:-1::0;;;4495:17:64::1;;;;;;;;;;;4431:81;4594:70;4615:6;4630:12;4660:1;4594:11;:70::i;:::-;4005:666;;3920:751:::0;;:::o;10290:794:65:-;10542:11;;10437:17;;-1:-1:-1;;;;;10542:11:65;10528:10;:25;10524:60;;10562:22;;-1:-1:-1;;;10562:22:65;;;;;;;;;;;10524:60;3406:6:45;10716:41:65;;10712:82;;;10766:28;;-1:-1:-1;;;10766:28:65;;;;;;;;;;;10712:82;10928:34;10940:6;10948:5;10955:6;10928:11;:34::i;:::-;-1:-1:-1;;;;10290:794:65;;;;;;;:::o;2116:203:129:-;2225:11;;2189:6;;-1:-1:-1;;;;;2225:11:129;2211:10;:25;2207:60;;2245:22;;-1:-1:-1;;;2245:22:129;;;;;;;;;;;2207:60;-1:-1:-1;;;;2116:203:129;;;;;:::o;5035:1030:64:-;2882:5;;-1:-1:-1;;;;;2882:5:64;2868:10;:19;2864:48;;2896:16;;-1:-1:-1;;;2896:16:64;;;;;;;;;;;2864:48;5186:25:::1;::::0;::::1;5220:16;5186:25:::0;;;:13:::1;:25;::::0;;;;:30;::::1;;:50;::::0;::::1;;;;;;:::i;:::-;;5182:79;;5245:16;;-1:-1:-1::0;;;5245:16:64::1;;;;;;;;;;;5182:79;5275:26;::::0;::::1;5310:16;5275:26:::0;;;:13:::1;:26;::::0;;;;:31;::::1;;:51;::::0;::::1;;;;;;:::i;:::-;;5271:81;;5335:17;;-1:-1:-1::0;;;5335:17:64::1;;;;;;;;;;;5271:81;5377:41;::::0;;::::1;::::0;;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;::::1;;::::0;::::1;::::0;;;-1:-1:-1;5377:41:64;;;;;;5362:9:::1;:57:::0;;::::1;::::0;;::::1;::::0;;;;;;;;;;;::::1;::::0;;;;;;;::::1;-1:-1:-1::0;;;5362:57:64::1;-1:-1:-1::0;;;;5362:57:64;;::::1;::::0;::::1;-1:-1:-1::0;;5362:57:64;;;;;;::::1;::::0;;;;;;;::::1;;::::0;;;::::1;::::0;;;5559:16;;5613:65;;;;::::1;::::0;;;;;;;;-1:-1:-1;;;;;5613:65:64;::::1;;::::0;;::::1;::::0;;;;-1:-1:-1;5613:65:64;;;;;;;5585:25:::1;::::0;::::1;::::0;;:13:::1;:25:::0;;;;:93;;;;:25;;-1:-1:-1;;5585:93:64::1;::::0;;::::1;::::0;::::1;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;5585:93:64::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;-1:-1:-1;;;;;5585:93:64::1;-1:-1:-1::0;;;5585:93:64::1;-1:-1:-1::0;;;;;;;;;;5585:93:64;;::::1;;;::::0;;;;;;;;;::::1;::::0;;5717:65;;::::1;::::0;::::1;::::0;;;;5585:93:::1;5717:65:::0;;-1:-1:-1;;;;;5717:65:64;::::1;;::::0;;::::1;::::0;;;;-1:-1:-1;5717:65:64;;;;;;;5688:26:::1;::::0;::::1;::::0;;:13:::1;:26:::0;;;;:94;;;;:26;;-1:-1:-1;;5688:94:64::1;::::0;;::::1;::::0;::::1;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;5688:94:64::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;-1:-1:-1;;;;;5688:94:64::1;-1:-1:-1::0;;;5688:94:64::1;-1:-1:-1::0;;;;;;;;;;5688:94:64;;::::1;;;::::0;;;;;;;;;;;;;;;::::1;::::0;;5908:95:::1;5937:14;5688:94;5937:10:::0;:14:::1;:::i;:::-;5908:95;::::0;;17062:25:200;;;17106:10;17152:15;;;17147:2;17132:18;;17125:43;17204:15;;17184:18;;;17177:43;17050:2;17035:18;5908:95:64::1;;;;;;;6013:45;6034:10;6046:11;6013:20;:45::i;12881:732:65:-:0;12996:21;;;12979:14;12996:21;;;:13;:21;;;;;:28;12944:23;;12996:28;13043:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13043:21:65;;13034:30;;13074:20;13113:9;13108:227;13132:6;13128:1;:10;13108:227;;;13175:21;;;13159:13;13175:21;;;:13;:21;;;;;:24;;13197:1;;13175:24;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;13175:24:65;;-1:-1:-1;13175:24:65;13217:18;13229:5;13217:11;:18::i;:::-;:23;:43;;;;;;;;:::i;:::-;;13213:112;;13305:5;13280:6;13287:14;;;;:::i;:::-;;;13280:22;;;;;;;;:::i;:::-;;;;;;:30;-1:-1:-1;;;;;13280:30:65;;;-1:-1:-1;;;;;13280:30:65;;;;;13213:112;-1:-1:-1;13140:3:65;;;:::i;:::-;;;13108:227;;;;13364:6;13348:12;:22;13344:263;;13570:12;13562:6;13555:28;13344:263;12969:644;;12881:732;;;:::o;13663:110::-;13720:12;13751:15;13760:5;13751:8;:15::i;:::-;13744:22;13663:110;-1:-1:-1;;13663:110:65:o;1432:182:129:-;1530:11;;-1:-1:-1;;;;;1530:11:129;1516:10;:25;1512:60;;1550:22;;-1:-1:-1;;;1550:22:129;;;;;;;;;;;11458:898:65;11609:6;;-1:-1:-1;;;;;11609:6:65;11595:10;:20;11591:50;;11624:17;;-1:-1:-1;;;11624:17:65;;;;;;;;;;;11591:50;11666:11;11655:22;;:7;:22;;;11651:699;;11767:6;;11743:64;;-1:-1:-1;;;11743:64:65;;-1:-1:-1;;;;;17423:32:200;;;11743:64:65;;;17405:51:200;17472:18;;;17465:34;;;11767:6:65;;;;11743:45;;17378:18:200;;11743:64:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6105:136:64;;;:::o;11651:699:65:-;12079:6;;12232:92;;;-1:-1:-1;;;;;17423:32:200;;;12232:92:65;;;17405:51:200;17472:18;;;;17465:34;;;12232:92:65;;;;;;;;;;17378:18:200;;;;12232:92:65;;;;;;;-1:-1:-1;;;;;12232:92:65;-1:-1:-1;;;12232:92:65;;;12063:276;;-1:-1:-1;;;12063:276:65;;12079:6;;;;;12063:42;;:276;;12137:7;;3406:6:45;;12232:92:65;12063:276;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7454:799:64:-;7549:13;7576:14;7604:20;7638:19;7671:26;7711:28;7777:9;:16;;;;7768:5;:25;7764:55;;7802:17;;-1:-1:-1;;;7802:17:64;;;;;;;;;;;7764:55;7829:28;7860:9;7870:5;7860:16;;;;;;;;:::i;:::-;;;;;;;;;;7829:47;;;;;;;;7860:16;;;;7829:47;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;7829:47:64;;;;;;;;;-1:-1:-1;7894:29:64;;:9;:29::i;:::-;7886:37;;7942:30;7952:7;:19;;;7942:30;;:9;:30::i;:::-;7986:20;;;;7933:39;;-1:-1:-1;7986:24:64;;;7982:176;;8041:31;8051:7;:20;;;8041:31;;:9;:31::i;:::-;8114:20;;;;;8100:35;;;;;;:13;:35;;;:47;8026:46;;-1:-1:-1;;;;8100:47:64;;-1:-1:-1;;;;;8100:47:64;;-1:-1:-1;7982:176:64;8218:5;;8202:44;;-1:-1:-1;;;8202:44:64;;;;;1559:25:200;;;-1:-1:-1;;;;;8218:5:64;;;;8202:37;;1532:18:200;;8202:44:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8202:44:64;;;;;;;;;;;;:::i;:::-;7454:799;;;;-1:-1:-1;7454:799:64;;;;;-1:-1:-1;;;7454:799:64:o;2158:198:87:-;1348:6;;-1:-1:-1;;;;;1348:6:87;929:10:91;1488:23:87;1480:68;;;;-1:-1:-1;;;1480:68:87;;;;;;;:::i;:::-;-1:-1:-1;;;;;2246:22:87;::::1;2238:73;;;::::0;-1:-1:-1;;;2238:73:87;;19512:2:200;2238:73:87::1;::::0;::::1;19494:21:200::0;19551:2;19531:18;;;19524:30;19590:34;19570:18;;;19563:62;-1:-1:-1;;;19641:18:200;;;19634:36;19687:19;;2238:73:87::1;19310:402:200::0;2238:73:87::1;2321:28;2340:8;2321:18;:28::i;:::-;2158:198:::0;:::o;3993:427:65:-;3111:19:88;3133:25;3156:1;3133:22;:25::i;:::-;3111:47;;3172:14;3168:65;;;3202:13;:20;;-1:-1:-1;;3202:20:88;;;;;3168:65;4116:50:65::1;4136:7;4145:12;4159:6;4116:19;:50::i;:::-;4176:6;:16:::0;;-1:-1:-1;;;;;;4176:16:65::1;-1:-1:-1::0;;;;;4176:16:65;::::1;;::::0;;4202::::1;:14;:16::i;:::-;4389:7;:24:::0;;::::1;::::0;::::1;::::0;;4410:1:::1;4389:24:::0;;;;;::::1;::::0;;-1:-1:-1;;;;;;4389:24:65::1;::::0;;3253:99:88;;;;3303:5;3287:21;;-1:-1:-1;;3287:21:88;;;3327:14;;-1:-1:-1;19869:36:200;;3327:14:88;;19857:2:200;19842:18;3327:14:88;;;;;;;3101:257;3993:427:65;;;;:::o;9298:942::-;9456:25;9484:18;9496:5;9484:11;:18::i;:::-;9456:46;;9588:25;:6;:23;:25::i;:::-;9644:6;9627:23;;:6;:13;;;:23;;;9623:58;;9659:22;;-1:-1:-1;;;9659:22:65;;;;;;;;;;;9623:58;10028:16;10047:15;10056:5;10047:8;:15::i;:::-;10028:34;;10144:89;10156:8;10166:5;10173:52;;;;;;;;10185:17;10173:52;;;;;;;;:::i;3392:164:47:-;3484:16;3469:11;;:31;;;;;;;;:::i;:::-;;3465:85;;3523:16;;-1:-1:-1;;;3523:16:47;;;;;;;;;;;12447:170:64;12536:7;12589:4;12595:6;12603:5;12572:37;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;12562:48;;;;;;12555:55;;12447:170;;;;;:::o;15581:584:65:-;15785:16;15804:51;15815:9;:14;;;15831:9;:16;;;15849:5;15804:10;:51::i;:::-;15785:70;;15937:15;15955:61;15973:9;:15;;;15955:61;;15990:8;16000:5;16007:8;15955:10;:17;;:61;;;;;;;:::i;:::-;-1:-1:-1;;;;;16026:16:65;;;;;;:9;:16;;;;;:28;;;;15937:79;;-1:-1:-1;16045:9:65;;16026:16;;-1:-1:-1;;16026:28:65;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;16026:28:65;;;;;;;;;;;;-1:-1:-1;;16026:28:65;;;;;;;;;-1:-1:-1;;16026:28:65;;;;;;;;;;;;;;16099:16;;;16083:14;;16069:54;;-1:-1:-1;;;;;16069:54:65;;;;;;;;;;;;;:::i;:::-;;;;;;;;16138:20;;1559:25:200;;;16138:20:65;;1547:2:200;1532:18;16138:20:65;;;;;;;15710:455;;15581:584;;;;:::o;17178:135::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17290:16:65;;;;;;:9;:16;;;;;;;17283:23;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;17178:135;-1:-1:-1;;17178:135:65:o;10109:775:64:-;10270:25;10298;10317:5;10298:18;:25::i;:::-;10270:53;;10333:30;:6;:28;:30::i;:::-;10394:6;10377:23;;:6;:13;;;:23;;;10373:58;;10409:22;;-1:-1:-1;;;10409:22:64;;;;;;;;;;;10373:58;10602:5;-1:-1:-1;;;;;10558:50:64;10594:6;10558:50;;;10572:20;10558:50;;;;;;:::i;:::-;;;;;;;;10684:37;10700:6;:12;;;10714:6;10684:15;:37::i;:::-;10836:41;6105:136;17700:127:65;-1:-1:-1;;;;;17798:16:65;17766:13;17798:16;;;:9;:16;;;;;:22;;;;;;;17700:127::o;17414:172::-;17517:7;:14;17480:13;;17509:22;;17505:75;;;17555:7;17563:5;17555:14;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;17555:14:65;;17414:172;-1:-1:-1;;17414:172:65:o;18368:204::-;18424:12;18452:10;;18448:72;;18485:24;18494:7;18502:5;18494:14;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;18494:14:65;18485:8;:24::i;7370:2253:57:-;7457:22;7660:14;7677:62;7695:6;:13;7687:5;:21;:51;;7728:9;:5;7736:1;7728:9;:::i;:::-;7677;:62::i;7687:51::-;7711:6;:13;7677:9;:62::i;:::-;7660:79;;7771:6;7757:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7757:21:57;-1:-1:-1;7810:13:57;;7749:29;;-1:-1:-1;7788:19:57;8088:1519;8112:6;8108:1;:10;8088:1519;;;8254:11;8242:5;8250:1;8242:9;:23;8241:58;;8297:1;8241:58;;;8269:6;8276:5;8284:1;8276:9;8269:17;;;;;;;;:::i;:::-;;;;;;;8241:58;8230:5;8236:1;8230:8;;;;;;;;:::i;:::-;;;;;;:69;;;;;8801:17;8796:618;8836:11;8824:9;:23;8796:618;;;8887:18;8908:9;8920:1;8908:13;8887:34;;8943:17;8963:6;8970:9;8963:17;;;;;;;;:::i;:::-;;;;;;;8943:37;;9056:18;9090:11;9077:10;:24;:58;;9133:1;9077:58;;;9104:6;9111:10;9104:18;;;;;;;;:::i;:::-;;;;;;;9077:58;9056:79;;9363:32;9373:9;9384:10;9363:9;:32::i;:::-;9338:6;9358:1;9345:9;:14;;9338:22;;;;;;;;:::i;:::-;;;;;;;;;;:57;-1:-1:-1;;;8862:1:57;8849:14;8796:618;;;-1:-1:-1;9519:1:57;9581:11;;;;9499:15;;;9498:22;;;8120:3;8088:1519;;3609:173:47;3704:19;3689:11;;:34;;;;;;;;:::i;:::-;;3685:91;;3746:19;;-1:-1:-1;;;3746:19:47;;;;;;;;;;;16246:235:65;16357:11;;16343:63;;-1:-1:-1;;;16343:63:65;;20786:10:200;20823:15;;;16343:63:65;;;20805:34:200;20875:15;;20855:18;;;20848:43;-1:-1:-1;;;;;16357:11:65;;;;16343:38;;20749:18:200;;16343:63:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;16430:6:65;;16416:58;;-1:-1:-1;;;16416:58:65;;20786:10:200;20823:15;;;16416:58:65;;;20805:34:200;20875:15;;20855:18;;;20848:43;-1:-1:-1;;;;;16430:6:65;;;;-1:-1:-1;16416:33:65;;-1:-1:-1;20749:18:200;;16416:58:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17916:371;17972:12;18054:25;18082;18101:5;18082:18;:25::i;:::-;18054:53;-1:-1:-1;18136:17:65;18121:11;;:32;;;;;;;;:::i;:::-;;18117:115;;18176:45;18187:6;:11;;;18200:6;:13;;;18215:5;18176:10;:45::i;18117:115::-;17986:301;17916:371;;;:::o;2510:187:87:-;2602:6;;;-1:-1:-1;;;;;2618:17:87;;;-1:-1:-1;;;;;;2618:17:87;;;;;;;2650:40;;2602:6;;;2618:17;2602:6;;2650:40;;2583:16;;2650:40;2573:124;2510:187;:::o;5287:808:88:-;5351:4;5684:13;;;;;;;5680:409;;;5738:7;:12;;5749:1;5738:12;:61;;;;-1:-1:-1;5793:4:88;1476:19:90;:23;5738:61:88;5713:166;;;;-1:-1:-1;;;5713:166:88;;;;;;;:::i;:::-;-1:-1:-1;5900:5:88;;5287:808;-1:-1:-1;5287:808:88:o;5680:409::-;5944:12;;:22;;;;:12;;:22;5936:81;;;;-1:-1:-1;;;5936:81:88;;;;;;;:::i;:::-;-1:-1:-1;6031:12:88;:22;;-1:-1:-1;;6031:22:88;;;;;;;;;;;;-1:-1:-1;;5287:808:88:o;3311:203:64:-;4698:13:88;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:88;;;;;;;:::i;:::-;3431:6:64::1;:16:::0;;-1:-1:-1;;;;;3431:16:64;;::::1;-1:-1:-1::0;;;;;;3431:16:64;;::::1;;::::0;;;3457:11:::1;:26:::0;;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;3493:5:::1;:14:::0;;;;;::::1;::::0;::::1;;::::0;;3311:203::o;988:95:87:-;4698:13:88;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:88;;;;;;;:::i;:::-;1050:26:87::1;:24;:26::i;4122:176:47:-:0;4218:20;4203:11;;:35;;;;;;;;:::i;:::-;;4199:93;;4261:20;;-1:-1:-1;;;4261:20:47;;;;;;;;;;;10766:650:58;11116:9;;10948:15;;11048:64;11069:5;11076:8;11086:6;428:2:45;11048:20:58;:64::i;:::-;:77;11044:130;;11148:15;;-1:-1:-1;;;11148:15:58;;;;;;;;;;;11044:130;11286:64;11307:5;11314:8;11324:6;428:2:45;11286:20:58;:64::i;:::-;11390:19;;;;-1:-1:-1;11276:74:58;;10766:650;-1:-1:-1;;;;10766:650:58:o;3845:223:47:-;3946:16;3931:11;;:31;;;;;;;;:::i;:::-;;;:69;;;;-1:-1:-1;3981:19:47;3966:11;;:34;;;;;;;;:::i;:::-;;;3931:69;3927:135;;;4023:28;;-1:-1:-1;;;4023:28:47;;;;;;;;;;;10982:1078:64;11098:27;;;11063:32;11098:27;;;:13;:27;;;;;;11063:62;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;11063:62:64;;;;;-1:-1:-1;;;11063:62:64;;-1:-1:-1;;;;;11063:62:64;;;;;;;-1:-1:-1;11160:19:64;11139:17;;:40;;;;;;;;:::i;:::-;;11135:77;;11188:24;;-1:-1:-1;;;11188:24:64;;;;;;;;;;;11135:77;11242:19;11222:39;;;-1:-1:-1;;;;;11271:33:64;;:24;;;;:33;;;;11314:27;;;-1:-1:-1;11314:27:64;;;:13;:27;;;:42;;;;11222:12;;11314:27;;-1:-1:-1;;11314:42:64;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;11314:42:64;;;;;;;;;;;;-1:-1:-1;;;;;11314:42:64;-1:-1:-1;;;11314:42:64;-1:-1:-1;;;;;;;;;;11314:42:64;;;;;;;;;;;;;;;;;;;;;11471:23;;;11314:42;;11471:28;;11467:529;;11515:20;11564:1;11538:12;:23;;;:27;;;;:::i;:::-;-1:-1:-1;;;;;11515:50:64;;;11579:28;11610:9;11620:12;11610:23;;;;;;;;:::i;:::-;;;;;;;;;;11579:54;;;;;;;;11610:23;;;;11579:54;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;11579:54:64;;;;;;;;;11647:9;:23;;11579:54;;-1:-1:-1;11686:12:64;;11657;;11647:23;;;;;;:::i;:::-;;;;;;;;;;;:51;;-1:-1:-1;;;;11647:51:64;-1:-1:-1;;;11647:51:64;;;;;;;;11779:19;;;:35;;;;;;:78;;11838:7;:19;;;11779:78;;;11817:18;;11779:78;11878:25;;;;;;;;:13;:25;;;;;;;;11871:32;;;;11922:63;;22150:25:200;;;22240:15;;;22220:18;;;22213:43;22272:18;;22265:43;-1:-1:-1;;;;;22344:32:200;;22339:2;22324:18;;22317:60;11878:25:64;;-1:-1:-1;11922:63:64;;22137:3:200;22122:19;11922:63:64;;;;;;;11501:495;;11467:529;12005:48;12028:12;12042:10;12005:22;:48::i;9708:241:57:-;9765:14;9808:1;9819:124;9835:5;9826:6;:14;9819:124;;;9884:8;;;;;9920:12;9819:124;;3115:287;3196:14;3226:23;;:51;;;;-1:-1:-1;3253:24:57;;3226:51;3222:174;;;-1:-1:-1;3300:1:57;3293:8;;3222:174;-1:-1:-1;3349:35:57;;;;;;;22545:19:200;;;;22580:12;;;22573:28;;;;3349:35:57;;;;;;;;;22617:12:200;;;;3349:35:57;;3339:46;;;;;;3115:287::o;1089:111:87:-;4698:13:88;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:88;;;;;;;:::i;:::-;1161:32:87::1;929:10:91::0;1161:18:87::1;:32::i;843:900:57:-:0;1083:12;;978:13;;1109:17;;;1105:48;;;1135:18;;-1:-1:-1;;;1135:18:57;;;;;;;;;;;1105:48;1171:4;1163:12;;1340:9;1335:189;1359:8;1355:1;:12;1335:189;;;1473:36;1483:5;1490;1496:1;1490:8;;;;;;;;:::i;:::-;;;;;;;1500:5;1507:1;1473:9;:36::i;:::-;1465:44;-1:-1:-1;1369:3:57;;1335:189;;;-1:-1:-1;1621:8:57;1604:123;1635:6;1631:1;:10;1604:123;;;1674:38;1684:5;1699:1;1703:5;1710:1;1674:9;:38::i;:::-;1666:46;-1:-1:-1;1643:3:57;;1604:123;;;;997:746;843:900;;;;;;:::o;16564:246:65:-;16678:11;;16664:67;;-1:-1:-1;;;16664:67:65;;20786:10:200;20823:15;;;16664:67:65;;;20805:34:200;20875:15;;20855:18;;;20848:43;-1:-1:-1;;;;;16678:11:65;;;;16664:41;;20749:18:200;;16664:67:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;16755:6:65;;16741:62;;-1:-1:-1;;;16741:62:65;;20786:10:200;20823:15;;;16741:62:65;;;20805:34:200;20875:15;;20855:18;;;20848:43;-1:-1:-1;;;;;16755:6:65;;;;-1:-1:-1;16741:36:65;;-1:-1:-1;20749:18:200;;16741:62:65;20606:291:200;2125:526:57;2261:14;2466:1;2439:23;;;2438:29;:34;;2434:211;;2521:24;2531:4;2537:7;2521:9;:24::i;:::-;2514:31;;;;2434:211;2610:24;2620:7;2629:4;2610:9;:24::i;2434:211::-;2125:526;;;;;;:::o;14:522:200:-;89:6;97;105;158:2;146:9;137:7;133:23;129:32;126:52;;;174:1;171;164:12;126:52;213:9;200:23;263:6;256:5;252:18;245:5;242:29;232:57;;285:1;282;275:12;232:57;308:5;-1:-1:-1;365:2:200;350:18;;337:32;-1:-1:-1;;;;;;400:34:200;;388:47;;378:75;;449:1;446;439:12;378:75;14:522;;472:7;;-1:-1:-1;;;526:2:200;511:18;;;;498:32;;14:522::o;819:173::-;887:20;;-1:-1:-1;;;;;936:31:200;;926:42;;916:70;;982:1;979;972:12;997:411;1072:6;1080;1088;1141:2;1129:9;1120:7;1116:23;1112:32;1109:52;;;1157:1;1154;1147:12;1109:52;1180:29;1199:9;1180:29;:::i;:::-;1170:39;;1259:2;1248:9;1244:18;1231:32;1303:4;1296:5;1292:16;1285:5;1282:27;1272:55;;1323:1;1320;1313:12;1595:632;1766:2;1818:21;;;1888:13;;1791:18;;;1910:22;;;1737:4;;1766:2;1989:15;;;;1963:2;1948:18;;;1737:4;2032:169;2046:6;2043:1;2040:13;2032:169;;;2107:13;;2095:26;;2176:15;;;;2141:12;;;;2068:1;2061:9;2032:169;;;-1:-1:-1;2218:3:200;;1595:632;-1:-1:-1;;;;;;1595:632:200:o;2232:121::-;2317:10;2310:5;2306:22;2299:5;2296:33;2286:61;;2343:1;2340;2333:12;2358:127;2419:10;2414:3;2410:20;2407:1;2400:31;2450:4;2447:1;2440:15;2474:4;2471:1;2464:15;2490:275;2561:2;2555:9;2626:2;2607:13;;-1:-1:-1;;2603:27:200;2591:40;;2661:18;2646:34;;2682:22;;;2643:62;2640:88;;;2708:18;;:::i;:::-;2744:2;2737:22;2490:275;;-1:-1:-1;2490:275:200:o;2770:1153::-;2871:6;2879;2887;2940:2;2928:9;2919:7;2915:23;2911:32;2908:52;;;2956:1;2953;2946:12;2908:52;2995:9;2982:23;3014:30;3038:5;3014:30;:::i;:::-;3063:5;-1:-1:-1;3087:2:200;3108:38;3127:18;;;3108:38;:::i;:::-;3098:48;;3197:2;3186:9;3182:18;3169:32;3220:18;3261:2;3253:6;3250:14;3247:34;;;3277:1;3274;3267:12;3247:34;3315:6;3304:9;3300:22;3290:32;;3360:7;3353:4;3349:2;3345:13;3341:27;3331:55;;3382:1;3379;3372:12;3331:55;3418:2;3405:16;3440:2;3436;3433:10;3430:36;;;3446:18;;:::i;:::-;3492:2;3489:1;3485:10;3475:20;;3515:28;3539:2;3535;3531:11;3515:28;:::i;:::-;3577:15;;;3647:11;;;3643:20;;;3608:12;;;;3675:19;;;3672:39;;;3707:1;3704;3697:12;3672:39;3731:11;;;;3751:142;3767:6;3762:3;3759:15;3751:142;;;3833:17;;3821:30;;3784:12;;;;3871;;;;3751:142;;;3912:5;3902:15;;;;;;;;2770:1153;;;;;:::o;3928:393::-;4004:6;4012;4020;4073:2;4061:9;4052:7;4048:23;4044:32;4041:52;;;4089:1;4086;4079:12;4041:52;4128:9;4115:23;4147:30;4171:5;4147:30;:::i;:::-;4196:5;-1:-1:-1;4220:38:200;4254:2;4239:18;;4220:38;:::i;:::-;4210:48;;4277:38;4311:2;4300:9;4296:18;4277:38;:::i;:::-;4267:48;;3928:393;;;;;:::o;4326:186::-;4385:6;4438:2;4426:9;4417:7;4413:23;4409:32;4406:52;;;4454:1;4451;4444:12;4406:52;4477:29;4496:9;4477:29;:::i;4517:127::-;4578:10;4573:3;4569:20;4566:1;4559:31;4609:4;4606:1;4599:15;4633:4;4630:1;4623:15;4649:140;4730:1;4723:5;4720:12;4710:46;;4736:18;;:::i;:::-;4765;;4649:140::o;4794:315::-;4859:44;4899:3;4891:5;4885:12;4859:44;:::i;:::-;4949:4;4938:16;;;4932:23;4974:10;5016:21;;;5000:14;;;4993:45;;;;5091:4;5080:16;;;5074:23;5070:32;5054:14;;5047:56;4794:315::o;5114:260::-;5308:2;5293:18;;5320:48;5297:9;5350:6;5320:48;:::i;5379:180::-;5438:6;5491:2;5479:9;5470:7;5466:23;5462:32;5459:52;;;5507:1;5504;5497:12;5459:52;-1:-1:-1;5530:23:200;;5379:180;-1:-1:-1;5379:180:200:o;5564:358::-;-1:-1:-1;;;;;5817:32:200;;5799:51;;5786:3;5771:19;;5859:57;5912:2;5897:18;;5889:6;5859:57;:::i;6109:248::-;6177:6;6185;6238:2;6226:9;6217:7;6213:23;6209:32;6206:52;;;6254:1;6251;6244:12;6206:52;-1:-1:-1;;6277:23:200;;;6347:2;6332:18;;;6319:32;;-1:-1:-1;6109:248:200:o;6362:518::-;6595:3;6580:19;;6629:1;6618:13;;6608:47;;6635:18;;:::i;:::-;6664:25;;;-1:-1:-1;;;;;6763:15:200;;;6758:2;6743:18;;6736:43;6815:15;;;;6810:2;6795:18;;6788:43;6862:2;6847:18;6840:34;6362:518;:::o;6885:250::-;6970:1;6980:113;6994:6;6991:1;6988:13;6980:113;;;7070:11;;;7064:18;7051:11;;;7044:39;7016:2;7009:10;6980:113;;;-1:-1:-1;;7127:1:200;7109:16;;7102:27;6885:250::o;7140:271::-;7182:3;7220:5;7214:12;7247:6;7242:3;7235:19;7263:76;7332:6;7325:4;7320:3;7316:14;7309:4;7302:5;7298:16;7263:76;:::i;:::-;7393:2;7372:15;-1:-1:-1;;7368:29:200;7359:39;;;;7400:4;7355:50;;7140:271;-1:-1:-1;;7140:271:200:o;7416:220::-;7565:2;7554:9;7547:21;7528:4;7585:45;7626:2;7615:9;7611:18;7603:6;7585:45;:::i;7641:639::-;7751:6;7759;7812:2;7800:9;7791:7;7787:23;7783:32;7780:52;;;7828:1;7825;7818:12;7780:52;7868:9;7855:23;7897:18;7938:2;7930:6;7927:14;7924:34;;;7954:1;7951;7944:12;7924:34;7992:6;7981:9;7977:22;7967:32;;8037:7;8030:4;8026:2;8022:13;8018:27;8008:55;;8059:1;8056;8049:12;8008:55;8099:2;8086:16;8125:2;8117:6;8114:14;8111:34;;;8141:1;8138;8131:12;8111:34;8194:7;8189:2;8179:6;8176:1;8172:14;8168:2;8164:23;8160:32;8157:45;8154:65;;;8215:1;8212;8205:12;8154:65;8246:2;8238:11;;;;;8268:6;;-1:-1:-1;7641:639:200;;-1:-1:-1;;;;7641:639:200:o;8285:1041::-;8475:4;8504:2;8544;8533:9;8529:18;8574:2;8563:9;8556:21;8597:6;8632;8626:13;8663:6;8655;8648:22;8689:2;8679:12;;8722:2;8711:9;8707:18;8700:25;;8784:2;8774:6;8771:1;8767:14;8756:9;8752:30;8748:39;8822:2;8814:6;8810:15;8843:1;8853:444;8867:6;8864:1;8861:13;8853:444;;;8932:22;;;-1:-1:-1;;8928:36:200;8916:49;;8988:13;;9043:9;;9036:17;9029:25;9014:41;;9094:11;;9088:18;9126:15;;;9119:27;;;9169:48;9201:15;;;9088:18;9169:48;:::i;:::-;9275:12;;;;9159:58;-1:-1:-1;;9240:15:200;;;;8889:1;8882:9;8853:444;;;-1:-1:-1;9314:6:200;;8285:1041;-1:-1:-1;;;;;;;;8285:1041:200:o;9331:319::-;9398:6;9406;9459:2;9447:9;9438:7;9434:23;9430:32;9427:52;;;9475:1;9472;9465:12;9427:52;9514:9;9501:23;9533:30;9557:5;9533:30;:::i;:::-;9582:5;-1:-1:-1;9606:38:200;9640:2;9625:18;;9606:38;:::i;:::-;9596:48;;9331:319;;;;;:::o;10060:602::-;10153:6;10161;10169;10177;10185;10238:3;10226:9;10217:7;10213:23;10209:33;10206:53;;;10255:1;10252;10245:12;10206:53;10294:9;10281:23;10313:30;10337:5;10313:30;:::i;:::-;10362:5;-1:-1:-1;10414:2:200;10399:18;;10386:32;;-1:-1:-1;10470:2:200;10455:18;;10442:32;10483;10442;10483;:::i;:::-;10534:7;-1:-1:-1;10560:38:200;10594:2;10579:18;;10560:38;:::i;:::-;10550:48;;10617:39;10651:3;10640:9;10636:19;10617:39;:::i;:::-;10607:49;;10060:602;;;;;;;;:::o;10874:381::-;10950:6;10958;10966;11019:2;11007:9;10998:7;10994:23;10990:32;10987:52;;;11035:1;11032;11025:12;10987:52;11074:9;11061:23;11093:30;11117:5;11093:30;:::i;:::-;11142:5;11194:2;11179:18;;11166:32;;-1:-1:-1;11245:2:200;11230:18;;;11217:32;;10874:381;-1:-1:-1;;;10874:381:200:o;11260:384::-;11326:6;11334;11387:2;11375:9;11366:7;11362:23;11358:32;11355:52;;;11403:1;11400;11393:12;11355:52;11442:9;11429:23;11461:30;11485:5;11461:30;:::i;:::-;11510:5;-1:-1:-1;11567:2:200;11552:18;;11539:32;11580;11539;11580;:::i;:::-;11631:7;11621:17;;;11260:384;;;;;:::o;11649:245::-;11707:6;11760:2;11748:9;11739:7;11735:23;11731:32;11728:52;;;11776:1;11773;11766:12;11728:52;11815:9;11802:23;11834:30;11858:5;11834:30;:::i;11899:658::-;12070:2;12122:21;;;12192:13;;12095:18;;;12214:22;;;12041:4;;12070:2;12293:15;;;;12267:2;12252:18;;;12041:4;12336:195;12350:6;12347:1;12344:13;12336:195;;;12415:13;;-1:-1:-1;;;;;12411:39:200;12399:52;;12506:15;;;;12471:12;;;;12447:1;12365:9;12336:195;;12562:387;12638:6;12646;12654;12707:2;12695:9;12686:7;12682:23;12678:32;12675:52;;;12723:1;12720;12713:12;12675:52;12746:29;12765:9;12746:29;:::i;:::-;12736:39;;12825:2;12814:9;12810:18;12797:32;12838:30;12862:5;12838:30;:::i;12954:741::-;-1:-1:-1;;;;;13297:15:200;;;13279:34;;13349:15;;;13344:2;13329:18;;13322:43;13401:15;;;13396:2;13381:18;;13374:43;13453:15;;13448:2;13433:18;;13426:43;13506:3;13500;13485:19;;13478:32;;;13222:4;;13533:46;;13559:19;;13551:6;13533:46;:::i;:::-;13628:9;13620:6;13616:22;13610:3;13599:9;13595:19;13588:51;13656:33;13682:6;13674;13656:33;:::i;:::-;13648:41;12954:741;-1:-1:-1;;;;;;;;;12954:741:200:o;13700:409::-;13786:6;13794;13802;13810;13863:3;13851:9;13842:7;13838:23;13834:33;13831:53;;;13880:1;13877;13870:12;13831:53;13903:29;13922:9;13903:29;:::i;:::-;13893:39;;13951:38;13985:2;13974:9;13970:18;13951:38;:::i;:::-;13941:48;;14008:38;14042:2;14031:9;14027:18;14008:38;:::i;:::-;13998:48;;14065:38;14099:2;14088:9;14084:18;14065:38;:::i;:::-;14055:48;;13700:409;;;;;;;:::o;14114:356::-;14316:2;14298:21;;;14335:18;;;14328:30;14394:34;14389:2;14374:18;;14367:62;14461:2;14446:18;;14114:356::o;14475:127::-;14536:10;14531:3;14527:20;14524:1;14517:31;14567:4;14564:1;14557:15;14591:4;14588:1;14581:15;14607:125;14672:9;;;14693:10;;;14690:36;;;14706:18;;:::i;14737:128::-;14804:9;;;14825:11;;;14822:37;;;14839:18;;:::i;14870:127::-;14931:10;14926:3;14922:20;14919:1;14912:31;14962:4;14959:1;14952:15;14986:4;14983:1;14976:15;15002:135;15041:3;15062:17;;;15059:43;;15082:18;;:::i;:::-;-1:-1:-1;15129:1:200;15118:13;;15002:135::o;15142:321::-;15232:4;15290:11;15277:25;15384:2;15380:7;15369:8;15353:14;15349:29;15345:43;15325:18;15321:68;15311:96;;15403:1;15400;15393:12;15311:96;15424:33;;;;;15142:321;-1:-1:-1;;15142:321:200:o;15468:521::-;15545:4;15551:6;15611:11;15598:25;15705:2;15701:7;15690:8;15674:14;15670:29;15666:43;15646:18;15642:68;15632:96;;15724:1;15721;15714:12;15632:96;15751:33;;15803:20;;;-1:-1:-1;15846:18:200;15835:30;;15832:50;;;15878:1;15875;15868:12;15832:50;15911:4;15899:17;;-1:-1:-1;15942:14:200;15938:27;;;15928:38;;15925:58;;;15979:1;15976;15969:12;15925:58;15468:521;;;;;:::o;15994:271::-;16177:6;16169;16164:3;16151:33;16133:3;16203:16;;16228:13;;;16203:16;15994:271;-1:-1:-1;15994:271:200:o;16270:169::-;16348:13;;16401:12;16390:24;;16380:35;;16370:63;;16429:1;16426;16419:12;16444:415;16529:6;16537;16545;16598:2;16586:9;16577:7;16573:23;16569:32;16566:52;;;16614:1;16611;16604:12;16566:52;16637:39;16666:9;16637:39;:::i;:::-;16627:49;;16695:48;16739:2;16728:9;16724:18;16695:48;:::i;:::-;16685:58;;16786:2;16775:9;16771:18;16765:25;16799:30;16823:5;16799:30;:::i;:::-;16848:5;16838:15;;;16444:415;;;;;:::o;17510:403::-;17672:4;17701:10;17750:2;17742:6;17738:15;17727:9;17720:34;17802:2;17794:6;17790:15;17785:2;17774:9;17770:18;17763:43;;17842:2;17837;17826:9;17822:18;17815:30;17862:45;17903:2;17892:9;17888:18;17880:6;17862:45;:::i;17918:310::-;17996:6;18004;18057:2;18045:9;18036:7;18032:23;18028:32;18025:52;;;18073:1;18070;18063:12;18025:52;18105:9;18099:16;18124:30;18148:5;18124:30;:::i;:::-;18218:2;18203:18;;;;18197:25;18173:5;;18197:25;;-1:-1:-1;;;17918:310:200:o;18233:509::-;18286:5;18339:3;18332:4;18324:6;18320:17;18316:27;18306:55;;18357:1;18354;18347:12;18306:55;18386:6;18380:13;18412:18;18408:2;18405:26;18402:52;;;18434:18;;:::i;:::-;18478:55;18521:2;18502:13;;-1:-1:-1;;18498:27:200;18527:4;18494:38;18478:55;:::i;:::-;18558:2;18549:7;18542:19;18604:3;18597:4;18592:2;18584:6;18580:15;18576:26;18573:35;18570:55;;;18621:1;18618;18611:12;18570:55;18634:77;18708:2;18701:4;18692:7;18688:18;18681:4;18673:6;18669:17;18634:77;:::i;18747:558::-;18844:6;18852;18905:2;18893:9;18884:7;18880:23;18876:32;18873:52;;;18921:1;18918;18911:12;18873:52;18954:9;18948:16;18983:18;19024:2;19016:6;19013:14;19010:34;;;19040:1;19037;19030:12;19010:34;19063:60;19115:7;19106:6;19095:9;19091:22;19063:60;:::i;:::-;19053:70;;19169:2;19158:9;19154:18;19148:25;19132:41;;19198:2;19188:8;19185:16;19182:36;;;19214:1;19211;19204:12;19182:36;;19237:62;19291:7;19280:8;19269:9;19265:24;19237:62;:::i;:::-;19227:72;;;18747:558;;;;;:::o;19916:471::-;20094:3;20133:1;20125:6;20122:13;20112:47;;20139:18;;:::i;:::-;-1:-1:-1;20184:3:200;20180:16;;;;20168:29;;20252:3;20230:16;;;;-1:-1:-1;;;;;;20226:43:200;20222:1;20213:11;;20206:64;20307:2;20303:15;-1:-1:-1;;20299:53:200;20295:1;20286:11;;20279:74;20378:2;20369:12;;19916:471::o;20392:209::-;20539:2;20524:18;;20551:44;20528:9;20577:6;20551:44;:::i;20902:410::-;21104:2;21086:21;;;21143:2;21123:18;;;21116:30;21182:34;21177:2;21162:18;;21155:62;-1:-1:-1;;;21248:2:200;21233:18;;21226:44;21302:3;21287:19;;20902:410::o;21317:407::-;21519:2;21501:21;;;21558:2;21538:18;;;21531:30;21597:34;21592:2;21577:18;;21570:62;-1:-1:-1;;;21663:2:200;21648:18;;21641:41;21714:3;21699:19;;21317:407::o;21729:189::-;-1:-1:-1;;;;;21854:10:200;;;21842;;;21838:27;;21877:12;;;21874:38;;;21892:18;;:::i;:::-;21874:38;21729:189;;;;:::o",
    "linkReferences": {},
    "immutableReferences": {
      "2822": [
        {
          "start": 1083,
          "length": 32
        },
        {
          "start": 5611,
          "length": 32
        }
      ],
      "2954": [
        {
          "start": 917,
          "length": 32
        }
      ],
      "2957": [
        {
          "start": 952,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "addAgent(uint32,address,bytes32[])": "237a85a5",
    "agentLeaf(address)": "c99dcb9e",
    "agentRoot()": "36cba43c",
    "agentStatus(address)": "28f3fac9",
    "allLeafs()": "12db2ef6",
    "completeSlashing(uint32,address,bytes32[])": "fbc5265e",
    "completeUnstaking(uint32,address,bytes32[])": "4c3e1c1f",
    "destination()": "b269681d",
    "disputeStatus(address)": "3463d1b1",
    "getActiveAgents(uint32)": "c1c0f4f6",
    "getAgent(uint256)": "2de5aaf7",
    "getDispute(uint256)": "e3a96cbd",
    "getDisputesAmount()": "3aaeccc6",
    "getLeafs(uint256,uint256)": "33d1b2e8",
    "getProof(address)": "3eea79d1",
    "inbox()": "fb0e722b",
    "initialize(address,address,address,address)": "f8c8765e",
    "initiateUnstaking(uint32,address,bytes32[])": "130c5673",
    "leafsAmount()": "33c3a8f3",
    "localDomain()": "8d3638f4",
    "multicall((bool,bytes)[])": "60fc8466",
    "openDispute(uint32,uint32)": "a2155c34",
    "origin()": "938b5f32",
    "owner()": "8da5cb5b",
    "remoteMockFunc(uint32,uint256,bytes32)": "a149352c",
    "remoteSlashAgent(uint32,uint256,uint32,address,address)": "9d228a51",
    "renounceOwnership()": "715018a6",
    "resolveStuckDispute(uint32,address)": "89791e17",
    "sensitiveMockFunc(address,uint8,bytes32)": "127a2c9d",
    "sensitiveMockFuncOver32Bytes(uint16,bytes4,bytes32)": "0e6bfcd5",
    "sensitiveMockFuncVoid(uint16,bytes4,bytes32)": "c9f1a03f",
    "slashAgent(uint32,address,address)": "2853a0e6",
    "slashAgentExposed(uint32,address,address)": "69978b0d",
    "summit()": "9fbcb9cb",
    "transferOwnership(address)": "f2fde38b",
    "version()": "54fd4d50",
    "withdrawTips(address,uint32,uint256)": "cc875501"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AgentCantBeAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentNotActiveNorUnstaking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentNotFraudulent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentNotUnstaking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotInbox\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotSummit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeAlreadyResolved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeNotOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeNotStuck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardInDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectAgentDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectVersionLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeafNotProven\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleTreeFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeSynapseDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotaryInDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlashAgentOptimisticPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SynapseDomainForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TreeHeightTooLow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"DisputeOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"slashedIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rivalIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"RootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"addAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"completeSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"completeUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"disputeStatus\",\"outputs\":[{\"internalType\":\"enum DisputeFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rival\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"disputePtr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"getActiveAgents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"agents\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDispute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"reportPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"reportSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"getProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbox_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"summit_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"initiateUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leafsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Result[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"remoteMockFunc\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"msgOrigin\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"proofMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"remoteSlashAgent\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"}],\"name\":\"resolveStuckDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"sensitiveMockFunc\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"sensitiveMockFuncOver32Bytes\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sensitiveMockFuncVoid\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"slashAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"slashAgentExposed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"versionString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"origin_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAgent(uint32,address,bytes32[])\":{\"details\":\"Inactive: `proof` should be the proof of inclusion of an empty leaf having index following the last added agent in the tree.Resting: `proof` should be the proof of inclusion of the agent leaf with Resting flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent will be active\",\"proof\":\"Merkle proof of the Inactive/Resting status for the agent\"}},\"agentLeaf(address)\":{\"details\":\"Will return an empty leaf, if agent is not added to the tree yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"leaf\":\"    Agent leaf in the Agent Merkle Tree\"}},\"agentStatus(address)\":{\"details\":\"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"status\":\"Status for the given agent: (flag, domain, index).\"}},\"allLeafs()\":{\"details\":\"This might consume a lot of gas, do not use this on-chain.\"},\"completeSlashing(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Active/Unstaking flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent was active\",\"proof\":\"Merkle proof of the active/unstaking status for the agent\"}},\"completeUnstaking(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Unstaking flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent was active\",\"proof\":\"Merkle proof of the unstaking status for the agent\"}},\"disputeStatus(address)\":{\"details\":\"Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"disputePtr\":\"  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\",\"flag\":\"        Flag describing the current Dispute status for the agent: None/Pending/Slashed\",\"fraudProver\":\" Address who provided fraud proof to resolve the Dispute\",\"rival\":\"       Address of the rival agent in the Dispute\"}},\"getActiveAgents(uint32)\":{\"params\":{\"agents\":\"List of active agents for the domain\",\"domain\":\"Domain to get agents from (ZERO for Guards)\"}},\"getAgent(uint256)\":{\"details\":\"Will return empty values if agent with given index doesn't exist.\",\"params\":{\"index\":\"Agent index in the Agent Merkle Tree\"},\"returns\":{\"agent\":\"   Agent address\",\"status\":\"  Status for the given agent: (flag, domain, index)\"}},\"getDispute(uint256)\":{\"details\":\"Will revert if dispute with given index hasn't been opened yet.\",\"params\":{\"index\":\"Dispute index\"},\"returns\":{\"fraudProver\":\"     Address who provided fraud proof to resolve the Dispute\",\"guard\":\"           Address of the Guard in the Dispute\",\"notary\":\"          Address of the Notary in the Dispute\",\"reportPayload\":\"   Raw payload with report data that led to the Dispute\",\"reportSignature\":\" Guard signature for the report payload\",\"slashedAgent\":\"    Address of the Agent who was slashed when Dispute was resolved\"}},\"getDisputesAmount()\":{\"details\":\"This includes the Disputes that have been resolved already.\"},\"getLeafs(uint256,uint256)\":{\"details\":\"This might consume a lot of gas, do not use this on-chain.Will return less than `amount` entries, if indexFrom + amount > leafsAmount\"},\"getProof(address)\":{\"details\":\"Will return a proof for an empty leaf, if agent is not added to the tree yet. This proof could be used by ANY next new agent that calls {addAgent}.This WILL consume a lot of gas, do not use this on-chain.The alternative way to create a proof is to fetch the full list of leafs using either {allLeafs} or {getLeafs}, and create a merkle proof from that.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"proof\":\"   Merkle proof for the agent\"}},\"initiateUnstaking(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Active flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent is active\",\"proof\":\"Merkle proof of the Active status for the agent\"}},\"leafsAmount()\":{\"details\":\"This includes active, unstaking, resting and slashed agents. This also includes an empty leaf as the very first entry.\"},\"openDispute(uint32,uint32)\":{\"params\":{\"guardIndex\":\"Index of the Guard in the Agent Merkle Tree\",\"notaryIndex\":\"Index of the Notary in the Agent Merkle Tree\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remoteSlashAgent(uint32,uint256,uint32,address,address)\":{\"details\":\"This initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status. Note: as an extra security check this function returns its own selector, so that Destination could verify that a \\\"remote\\\" function was called when executing a manager message.\",\"params\":{\"agent\":\"Address of the slashed Agent\",\"domain\":\"Domain where the slashed agent was active\",\"prover\":\"Address that initially provided fraud proof to remote AgentManager\"},\"returns\":{\"magicValue\":\"  Selector of this function\"}},\"renounceOwnership()\":{\"details\":\"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op\"},\"resolveStuckDispute(uint32,address)\":{\"params\":{\"slashedAgent\":\"Agent that is being slashed\"}},\"slashAgent(uint32,address,address)\":{\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent is active\",\"prover\":\"Address that initially provided fraud proof\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawTips(address,uint32,uint256)\":{\"details\":\"Could only be called by the Summit contract.\",\"params\":{\"amount\":\"Tips value to withdraw\",\"origin\":\"Domain where tips need to be withdrawn\",\"recipient\":\"Address to withdraw tips to\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DisputeOpened(uint256,uint32,uint32)\":{\"notice\":\"Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits their report for the Notary-signed statement to `StatementInbox`.\"},\"DisputeResolved(uint256,uint32,uint32,address)\":{\"notice\":\"Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed. Note: this won't be emitted, if an Agent was slashed without being in Dispute.\"},\"RootUpdated(bytes32)\":{\"notice\":\"Emitted whenever the root of the Agent Merkle Tree is updated.\"},\"StatusUpdated(uint8,uint32,address)\":{\"notice\":\"Emitted whenever a status of the agent is updated.\"}},\"kind\":\"user\",\"methods\":{\"addAgent(uint32,address,bytes32[])\":{\"notice\":\"Adds a new agent for the domain. This is either a fresh address (Inactive), or an agent who used to be active on the same domain before (Resting).\"},\"agentLeaf(address)\":{\"notice\":\"Returns a leaf representing the current status of agent in the Agent Merkle Tree.\"},\"agentRoot()\":{\"notice\":\"Returns the latest known root of the Agent Merkle Tree.\"},\"agentStatus(address)\":{\"notice\":\"Returns (flag, domain, index) for a given agent. See Structures.sol for details.\"},\"allLeafs()\":{\"notice\":\"Returns a full list of leafs from the Agent Merkle Tree.\"},\"completeSlashing(uint32,address,bytes32[])\":{\"notice\":\"Completes the slashing of the agent bond. Agent signature is no longer considered valid under the updated Agent Merkle Root.\"},\"completeUnstaking(uint32,address,bytes32[])\":{\"notice\":\"Completes the unstaking of the agent bond. Agent signature is no longer considered valid on any of the chains.\"},\"disputeStatus(address)\":{\"notice\":\"Returns the current Dispute status of a given agent. See Structures.sol for details.\"},\"getActiveAgents(uint32)\":{\"notice\":\"Returns all active agents for a given domain.\"},\"getAgent(uint256)\":{\"notice\":\"Returns agent address and their current status for a given agent index.\"},\"getDispute(uint256)\":{\"notice\":\"Returns information about the dispute with the given index.\"},\"getDisputesAmount()\":{\"notice\":\"Returns the number of opened Disputes.\"},\"getLeafs(uint256,uint256)\":{\"notice\":\"Returns a list of leafs from the Agent Merkle Tree with indexes [indexFrom .. indexFrom + amount).\"},\"getProof(address)\":{\"notice\":\"Returns a proof of inclusion of the agent in the Agent Merkle Tree.\"},\"initiateUnstaking(uint32,address,bytes32[])\":{\"notice\":\"Initiates the unstaking of the agent bond. Agent signature is immediately no longer considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager updates their agent merkle root on these chains.\"},\"leafsAmount()\":{\"notice\":\"Returns a total amount of leafs representing known agents.\"},\"localDomain()\":{\"notice\":\"Domain of the local chain, set once upon contract creation\"},\"multicall((bool,bytes)[])\":{\"notice\":\"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\"},\"openDispute(uint32,uint32)\":{\"notice\":\"Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. > Will revert if any of these is true: > - Caller is not Inbox. > - Guard or Notary is already in Dispute.\"},\"remoteSlashAgent(uint32,uint256,uint32,address,address)\":{\"notice\":\"Remote AgentManager should call this function to indicate that the agent has been proven to commit fraud on the origin chain.\"},\"resolveStuckDispute(uint32,address)\":{\"notice\":\"Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. > Will revert if any of these is true: > - Caller is not contract owner. > - Domain doesn't match the saved agent domain. > - `slashedAgent` is not in Dispute. > - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\"},\"sensitiveMockFunc(address,uint8,bytes32)\":{\"notice\":\"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\"},\"sensitiveMockFuncOver32Bytes(uint16,bytes4,bytes32)\":{\"notice\":\"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\"},\"sensitiveMockFuncVoid(uint16,bytes4,bytes32)\":{\"notice\":\"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\"},\"slashAgent(uint32,address,address)\":{\"notice\":\"Allows Inbox to slash an agent, if their fraud was proven. > Will revert if any of these is true: > - Caller is not Inbox. > - Domain doesn't match the saved agent domain.\"},\"slashAgentExposed(uint32,address,address)\":{\"notice\":\"Exposes _slashAgent for testing.\"},\"withdrawTips(address,uint32,uint256)\":{\"notice\":\"Withdraws locked base message tips from requested domain Origin to the recipient. Issues a call to a local Origin contract, or sends a manager message to the remote chain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/harnesses/manager/BondingManagerHarness.t.sol\":\"BondingManagerHarness\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"contracts/base/MessagingBase.sol\":{\"keccak256\":\"0x01a7e9d9a5547e90d2efc4478485c7fc308a870d596a47d2b59383eaf2a02dd1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2a5ab808e51515e2a8d2efccb3f9d89054c2fc7e9cb5f44514b734a097d8c114\",\"dweb:/ipfs/QmUJ1E1MXy1H2Nb8xCGA7hpsTMNF3CXNoU11qGyd5M8498\"]},\"contracts/base/MultiCallable.sol\":{\"keccak256\":\"0x9645f1629cdf8db803c40725f6b0ee165df64bfc142db4613efd385a88f13699\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc99799fdd946c11c893b89dad922822c866d14bdecded86913948a146f71053\",\"dweb:/ipfs/QmZGRZuhU2w6pAStcaQ5NyzyeUn69nJCJd9a9NnjuBVLsn\"]},\"contracts/base/Version.sol\":{\"keccak256\":\"0x63131bbdb149a0c83685da246afc0faa71d1009a20154b1f39650cef4369fe84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21f001efca9d0550162dd1154f5b1d977c85a703e6df883103638ae0fe65af9b\",\"dweb:/ipfs/QmX3BfuJ3yKxWFXphq6RcKcGrja1v5xJQ1fFCwRQvGV8u8\"]},\"contracts/events/AgentManagerEvents.sol\":{\"keccak256\":\"0xa56624a0db82d304bfba608d1b4d58f9c3d6165d6f7bfb2f7b90d91f232b646a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://32f9e512ad758b98cb3a99611a2cac035ec9e8b0e4f031c88ea8dd46bb2a7dbe\",\"dweb:/ipfs/QmbZXsV3jcBgbsAc8FRGTkMrWDVHPk19p2GoKkxmHov9ei\"]},\"contracts/interfaces/IAgentManager.sol\":{\"keccak256\":\"0xc6fded8bc39cdb24e2bc038ba9b0ae168ad42fb15ed9d5883b89940b4e970a10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://898f25a9d1f375ab7e5dc7cd791263934b50d3b0a44dc29a4c914578a1b06339\",\"dweb:/ipfs/QmXi3CVhvWpGxVvmw4n7UvEoX2bD2ZD2rg4oZhYETYWJ3a\"]},\"contracts/interfaces/IAgentSecured.sol\":{\"keccak256\":\"0x9a7efecf8fe37cc8245e3b0e3f5d6d6ee056cdd97ccb5631ff6347bdfc9fc889\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7877d223162a76d3fe75490069719b3a4f14cd66fc42bfa915f2813390b7d2aa\",\"dweb:/ipfs/QmZhE1rnffA9bbtkNAwVk6iitMPk14gHbK56mdeHQEPhxj\"]},\"contracts/interfaces/IStatementInbox.sol\":{\"keccak256\":\"0x99c93edd056d33d33ce57ae7d6d17328b88e94fe971c4e9d23d2fceaa9f1e41c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76a2cf74f7a24ab3c669efab5372dff18a29463504b09a0d3dde4b4184a2eff3\",\"dweb:/ipfs/Qmb1sy2izNESmgS8FVkFHMXpWc2UM3unQeKMghFYCHNfn4\"]},\"contracts/interfaces/InterfaceBondingManager.sol\":{\"keccak256\":\"0x0c94cb27bd86eb1f0a48bf9ae15f747f4d0cc9c3e210a7eb75f255d44ccb3ec6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3ca990b2704379039a58af30ef2e4f8db6165d8634cb77bcf2c34a1f3c09eb42\",\"dweb:/ipfs/Qmb5aNdpJrqry3o87KWwYf23kT691xf7GujzmQFy2S3sop\"]},\"contracts/interfaces/InterfaceDestination.sol\":{\"keccak256\":\"0x708371d239580f8e6dc44e790fd32f47e074cbfb8ae9e75609adbc0de303678c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5061c85c3779304f5c3919d2b1bc6620d1029a4ead7186c3f3f5b409a9bd855\",\"dweb:/ipfs/QmW4Hrz2NGMCRV2Rqv22G4xArsR4jUZtNr1garSR8AZud6\"]},\"contracts/interfaces/InterfaceLightManager.sol\":{\"keccak256\":\"0xfd56fe81fd6776faae469d615e66d71387512fac1997157a1dd3f80ada8e7dac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e1ef5b8bbdc189ce2148cc74f61f6eb9ca8bdcbf53ac84948ec72953ed4433d2\",\"dweb:/ipfs/Qmbe1Qm94avKV2mw1Yj33SZ698ykCA8vEpZhqjL9o4oqev\"]},\"contracts/interfaces/InterfaceOrigin.sol\":{\"keccak256\":\"0xe2c7feb15991348e274a413ee7e24c4cc4e2225c851924955ad2f025c8b5c42f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://314cdd9daf29e9d6ed288e02be302487cce6c0ca89805e5e8f6d78fb150c6ea6\",\"dweb:/ipfs/QmP6vY22Cpf45a3eDR6hPBnDDqCPcu4cRXJhH7W41ohkD6\"]},\"contracts/libs/Constants.sol\":{\"keccak256\":\"0x00f447e219d27f9a864847f8038c4bac16f59e2fb37c5c0de1b554d48d41ba48\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8c3b8452f969900c9ffbfae74dd73d076d9eace7e2448015b6c46ca8dd4d4402\",\"dweb:/ipfs/QmXGya3YqdmTXNdzTs1ZLMXJZnfJb49Sw5soXhjHbq8qnk\"]},\"contracts/libs/Errors.sol\":{\"keccak256\":\"0xe9a2059a2ad04e5a8ce5a6fcd091541dcd1b745edb1ce36fd97b188fe8a24011\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://36c91869720c13e9f207ef4a96147c1bcdc75574fb84eacfd8a5a4efe4e5210b\",\"dweb:/ipfs/QmRuYYPnsuES87cQTAag63gdVf22pL7UjF9pvzBt87iGyB\"]},\"contracts/libs/Structures.sol\":{\"keccak256\":\"0x3eaa63f5d9aac514328111e8fdd037dc6fdb18af7541a8287deeacd2e44f7137\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://633619910c74a0685ef2993a2e7cc44088929121a15c8a9fc26c9bbadffbda71\",\"dweb:/ipfs/QmZceJv6UntiMWW4JZHbmytLsqXshbuav8yoiritksvqqy\"]},\"contracts/libs/merkle/MerkleMath.sol\":{\"keccak256\":\"0xbd13c07bdc40b80f56c7d75e3f31b6c4a85a78d444b760604a5b71083d14925c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3162b491e4e216c0f2d143ce3baab4cf9e2a8b1b42466256a5d5b1f8b0385507\",\"dweb:/ipfs/QmYnDSZyxiGHfmB8Fx46zh1LZe3aCdVaKzpaQuD9piTc7u\"]},\"contracts/libs/merkle/MerkleTree.sol\":{\"keccak256\":\"0xdc0a58835c6296f70fca199455adf94059f2ef709e4e3af05c3fa97e74b81fb0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://62e769893052a89a57db12445481dd56ffdd758aa1795d94b17c3357ce799de1\",\"dweb:/ipfs/QmNnfsHhN5UvQHQSW1G6FUQZZBJEZVrAsBYGdQ5GkPbU1c\"]},\"contracts/libs/stack/GasData.sol\":{\"keccak256\":\"0x2007fd4b97cf33bfe4aa7dc6ac887af87b4010ec9834636b4dd5685582ac26cb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b54ca8b659d63ef7138c5b3b243190ca19b1e893b7b49dee1f8790d55b9e691\",\"dweb:/ipfs/Qmc2FGb16uosZ5kvyEK2onpWVPvWeE9X72xNWeJw8CbweD\"]},\"contracts/libs/stack/Number.sol\":{\"keccak256\":\"0xe4e0d66268eb69304cda001a3e03242e9f4af8680830c92b3d6ebe83e96acb96\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f70c28a10a2d34849614ff51c74f8c6107093b4d01eb865b2ab0d4efe9294cfd\",\"dweb:/ipfs/QmQbXCnHfPJjdNCK1UuQ2ShNan6H7j5s9DLS4HygQ5wfP5\"]},\"contracts/manager/AgentManager.sol\":{\"keccak256\":\"0x6b6bb9d62e624a5efa1d3bfbf0571a117ee48bbbb3868ebb6f8ff58071f6d475\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ac93ed3f2c169c0297dd70f37e72595799738b4879131be12292dea8f5625663\",\"dweb:/ipfs/QmNwi7wXMaxg4kg4RxsUrxhz4jLocT7XrVyvQ2dfEAHqJi\"]},\"contracts/manager/BondingManager.sol\":{\"keccak256\":\"0x83dd80c895a8c0ce0cae3d4c6ada58d9c0956e80c959d8a9fb23692a4ab9826b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33843db398ea33e0cb75a8e43a9c9e68be5284dea7cbc71698252fba30cd0234\",\"dweb:/ipfs/QmXiY7s4mQHTtV5B8bbf1s7TobQ22aPxf9NXVKjbL9dBcW\"]},\"node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7\",\"dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh\"]},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"test/harnesses/manager/AgentManagerHarness.t.sol\":{\"keccak256\":\"0x6ad504f142be190f4b3fa158162445fb56d29443022041f2c17eb485be4f886b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://365788b0d405bacced74fda6f4ab0335e48496a3ced3ae4a4b6487983c5723d3\",\"dweb:/ipfs/QmQuogm7HhTZzkGPzHtMshocskqdga4T11FAVx6dVmueru\"]},\"test/harnesses/manager/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x22694e0b72ad3ce20bb8280b9906e0d41b2b9a6ebb0a2ed7d96cd0beadeb0210\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98721c934e60a1b4ae0567868330636b7caad0191939526d21fb4c7f06674bd3\",\"dweb:/ipfs/QmRjWtbHxQgBWCHG3CjZqpBEFbd9MgCBff6qmwT6xYdjBL\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AgentCantBeAdded"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AgentNotActive"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AgentNotActiveNorUnstaking"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AgentNotFraudulent"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "AgentNotUnstaking"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CallerNotDestination"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CallerNotInbox"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CallerNotSummit"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DisputeAlreadyResolved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DisputeNotOpened"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "DisputeNotStuck"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "GuardInDispute"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "IncorrectAgentDomain"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "IncorrectVersionLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "IndexOutOfRange"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "LeafNotProven"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MerkleTreeFull"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MustBeSynapseDomain"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NotaryInDispute"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "SlashAgentOptimisticPeriod"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "SynapseDomainForbidden"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TreeHeightTooLow"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "disputeIndex",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint32",
              "name": "guardIndex",
              "type": "uint32",
              "indexed": false
            },
            {
              "internalType": "uint32",
              "name": "notaryIndex",
              "type": "uint32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DisputeOpened",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "disputeIndex",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint32",
              "name": "slashedIndex",
              "type": "uint32",
              "indexed": false
            },
            {
              "internalType": "uint32",
              "name": "rivalIndex",
              "type": "uint32",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "fraudProver",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DisputeResolved",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "newRoot",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RootUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "enum AgentFlag",
              "name": "flag",
              "type": "uint8",
              "indexed": false
            },
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "agent",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "StatusUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addAgent"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "agentLeaf",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "leaf",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "agentRoot",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "agentStatus",
          "outputs": [
            {
              "internalType": "struct AgentStatus",
              "name": "status",
              "type": "tuple",
              "components": [
                {
                  "internalType": "enum AgentFlag",
                  "name": "flag",
                  "type": "uint8"
                },
                {
                  "internalType": "uint32",
                  "name": "domain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "index",
                  "type": "uint32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "allLeafs",
          "outputs": [
            {
              "internalType": "bytes32[]",
              "name": "leafs",
              "type": "bytes32[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "completeSlashing"
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "completeUnstaking"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "destination",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "disputeStatus",
          "outputs": [
            {
              "internalType": "enum DisputeFlag",
              "name": "flag",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "rival",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "fraudProver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "disputePtr",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getActiveAgents",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "agents",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAgent",
          "outputs": [
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "struct AgentStatus",
              "name": "status",
              "type": "tuple",
              "components": [
                {
                  "internalType": "enum AgentFlag",
                  "name": "flag",
                  "type": "uint8"
                },
                {
                  "internalType": "uint32",
                  "name": "domain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "index",
                  "type": "uint32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getDispute",
          "outputs": [
            {
              "internalType": "address",
              "name": "guard",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "notary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "slashedAgent",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "fraudProver",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "reportPayload",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "reportSignature",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDisputesAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "indexFrom",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getLeafs",
          "outputs": [
            {
              "internalType": "bytes32[]",
              "name": "leafs",
              "type": "bytes32[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getProof",
          "outputs": [
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "inbox",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "origin_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "destination_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inbox_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "summit_",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initiateUnstaking"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "leafsAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "localDomain",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct MultiCallable.Call[]",
              "name": "calls",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bool",
                  "name": "allowFailure",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "struct MultiCallable.Result[]",
              "name": "callResults",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "bool",
                  "name": "success",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "returnData",
                  "type": "bytes"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "guardIndex",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "notaryIndex",
              "type": "uint32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "openDispute"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "origin",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "remoteMockFunc",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "msgOrigin",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "proofMaturity",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "prover",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "remoteSlashAgent",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "magicValue",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "slashedAgent",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "resolveStuckDispute"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "data",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "sensitiveMockFunc",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            },
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "data",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "sensitiveMockFuncOver32Bytes",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            },
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "sensitiveMockFuncVoid"
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "prover",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "slashAgent"
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "domain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "agent",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "prover",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "slashAgentExposed"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "summit",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "version",
          "outputs": [
            {
              "internalType": "string",
              "name": "versionString",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "origin_",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawTips"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addAgent(uint32,address,bytes32[])": {
            "details": "Inactive: `proof` should be the proof of inclusion of an empty leaf having index following the last added agent in the tree.Resting: `proof` should be the proof of inclusion of the agent leaf with Resting flag having index previously assigned to the agent.",
            "params": {
              "agent": "Address of the Agent",
              "domain": "Domain where the Agent will be active",
              "proof": "Merkle proof of the Inactive/Resting status for the agent"
            }
          },
          "agentLeaf(address)": {
            "details": "Will return an empty leaf, if agent is not added to the tree yet.",
            "params": {
              "agent": "Agent address"
            },
            "returns": {
              "leaf": "    Agent leaf in the Agent Merkle Tree"
            }
          },
          "agentStatus(address)": {
            "details": "Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.",
            "params": {
              "agent": "Agent address"
            },
            "returns": {
              "status": "Status for the given agent: (flag, domain, index)."
            }
          },
          "allLeafs()": {
            "details": "This might consume a lot of gas, do not use this on-chain."
          },
          "completeSlashing(uint32,address,bytes32[])": {
            "details": "`proof` should be the proof of inclusion of the agent leaf with Active/Unstaking flag having index previously assigned to the agent.",
            "params": {
              "agent": "Address of the Agent",
              "domain": "Domain where the Agent was active",
              "proof": "Merkle proof of the active/unstaking status for the agent"
            }
          },
          "completeUnstaking(uint32,address,bytes32[])": {
            "details": "`proof` should be the proof of inclusion of the agent leaf with Unstaking flag having index previously assigned to the agent.",
            "params": {
              "agent": "Address of the Agent",
              "domain": "Domain where the Agent was active",
              "proof": "Merkle proof of the unstaking status for the agent"
            }
          },
          "disputeStatus(address)": {
            "details": "Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.",
            "params": {
              "agent": "Agent address"
            },
            "returns": {
              "disputePtr": "  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.",
              "flag": "        Flag describing the current Dispute status for the agent: None/Pending/Slashed",
              "fraudProver": " Address who provided fraud proof to resolve the Dispute",
              "rival": "       Address of the rival agent in the Dispute"
            }
          },
          "getActiveAgents(uint32)": {
            "params": {
              "agents": "List of active agents for the domain",
              "domain": "Domain to get agents from (ZERO for Guards)"
            }
          },
          "getAgent(uint256)": {
            "details": "Will return empty values if agent with given index doesn't exist.",
            "params": {
              "index": "Agent index in the Agent Merkle Tree"
            },
            "returns": {
              "agent": "   Agent address",
              "status": "  Status for the given agent: (flag, domain, index)"
            }
          },
          "getDispute(uint256)": {
            "details": "Will revert if dispute with given index hasn't been opened yet.",
            "params": {
              "index": "Dispute index"
            },
            "returns": {
              "fraudProver": "     Address who provided fraud proof to resolve the Dispute",
              "guard": "           Address of the Guard in the Dispute",
              "notary": "          Address of the Notary in the Dispute",
              "reportPayload": "   Raw payload with report data that led to the Dispute",
              "reportSignature": " Guard signature for the report payload",
              "slashedAgent": "    Address of the Agent who was slashed when Dispute was resolved"
            }
          },
          "getDisputesAmount()": {
            "details": "This includes the Disputes that have been resolved already."
          },
          "getLeafs(uint256,uint256)": {
            "details": "This might consume a lot of gas, do not use this on-chain.Will return less than `amount` entries, if indexFrom + amount > leafsAmount"
          },
          "getProof(address)": {
            "details": "Will return a proof for an empty leaf, if agent is not added to the tree yet. This proof could be used by ANY next new agent that calls {addAgent}.This WILL consume a lot of gas, do not use this on-chain.The alternative way to create a proof is to fetch the full list of leafs using either {allLeafs} or {getLeafs}, and create a merkle proof from that.",
            "params": {
              "agent": "Agent address"
            },
            "returns": {
              "proof": "   Merkle proof for the agent"
            }
          },
          "initiateUnstaking(uint32,address,bytes32[])": {
            "details": "`proof` should be the proof of inclusion of the agent leaf with Active flag having index previously assigned to the agent.",
            "params": {
              "agent": "Address of the Agent",
              "domain": "Domain where the Agent is active",
              "proof": "Merkle proof of the Active status for the agent"
            }
          },
          "leafsAmount()": {
            "details": "This includes active, unstaking, resting and slashed agents. This also includes an empty leaf as the very first entry."
          },
          "openDispute(uint32,uint32)": {
            "params": {
              "guardIndex": "Index of the Guard in the Agent Merkle Tree",
              "notaryIndex": "Index of the Notary in the Agent Merkle Tree"
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "remoteSlashAgent(uint32,uint256,uint32,address,address)": {
            "details": "This initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status. Note: as an extra security check this function returns its own selector, so that Destination could verify that a \"remote\" function was called when executing a manager message.",
            "params": {
              "agent": "Address of the slashed Agent",
              "domain": "Domain where the slashed agent was active",
              "prover": "Address that initially provided fraud proof to remote AgentManager"
            },
            "returns": {
              "magicValue": "  Selector of this function"
            }
          },
          "renounceOwnership()": {
            "details": "Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op"
          },
          "resolveStuckDispute(uint32,address)": {
            "params": {
              "slashedAgent": "Agent that is being slashed"
            }
          },
          "slashAgent(uint32,address,address)": {
            "params": {
              "agent": "Address of the Agent",
              "domain": "Domain where the Agent is active",
              "prover": "Address that initially provided fraud proof"
            }
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          },
          "withdrawTips(address,uint32,uint256)": {
            "details": "Could only be called by the Summit contract.",
            "params": {
              "amount": "Tips value to withdraw",
              "origin": "Domain where tips need to be withdrawn",
              "recipient": "Address to withdraw tips to"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addAgent(uint32,address,bytes32[])": {
            "notice": "Adds a new agent for the domain. This is either a fresh address (Inactive), or an agent who used to be active on the same domain before (Resting)."
          },
          "agentLeaf(address)": {
            "notice": "Returns a leaf representing the current status of agent in the Agent Merkle Tree."
          },
          "agentRoot()": {
            "notice": "Returns the latest known root of the Agent Merkle Tree."
          },
          "agentStatus(address)": {
            "notice": "Returns (flag, domain, index) for a given agent. See Structures.sol for details."
          },
          "allLeafs()": {
            "notice": "Returns a full list of leafs from the Agent Merkle Tree."
          },
          "completeSlashing(uint32,address,bytes32[])": {
            "notice": "Completes the slashing of the agent bond. Agent signature is no longer considered valid under the updated Agent Merkle Root."
          },
          "completeUnstaking(uint32,address,bytes32[])": {
            "notice": "Completes the unstaking of the agent bond. Agent signature is no longer considered valid on any of the chains."
          },
          "disputeStatus(address)": {
            "notice": "Returns the current Dispute status of a given agent. See Structures.sol for details."
          },
          "getActiveAgents(uint32)": {
            "notice": "Returns all active agents for a given domain."
          },
          "getAgent(uint256)": {
            "notice": "Returns agent address and their current status for a given agent index."
          },
          "getDispute(uint256)": {
            "notice": "Returns information about the dispute with the given index."
          },
          "getDisputesAmount()": {
            "notice": "Returns the number of opened Disputes."
          },
          "getLeafs(uint256,uint256)": {
            "notice": "Returns a list of leafs from the Agent Merkle Tree with indexes [indexFrom .. indexFrom + amount)."
          },
          "getProof(address)": {
            "notice": "Returns a proof of inclusion of the agent in the Agent Merkle Tree."
          },
          "initiateUnstaking(uint32,address,bytes32[])": {
            "notice": "Initiates the unstaking of the agent bond. Agent signature is immediately no longer considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager updates their agent merkle root on these chains."
          },
          "leafsAmount()": {
            "notice": "Returns a total amount of leafs representing known agents."
          },
          "localDomain()": {
            "notice": "Domain of the local chain, set once upon contract creation"
          },
          "multicall((bool,bytes)[])": {
            "notice": "Aggregates a few calls to this contract into one multicall without modifying `msg.sender`."
          },
          "openDispute(uint32,uint32)": {
            "notice": "Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. > Will revert if any of these is true: > - Caller is not Inbox. > - Guard or Notary is already in Dispute."
          },
          "remoteSlashAgent(uint32,uint256,uint32,address,address)": {
            "notice": "Remote AgentManager should call this function to indicate that the agent has been proven to commit fraud on the origin chain."
          },
          "resolveStuckDispute(uint32,address)": {
            "notice": "Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. > Will revert if any of these is true: > - Caller is not contract owner. > - Domain doesn't match the saved agent domain. > - `slashedAgent` is not in Dispute. > - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox."
          },
          "sensitiveMockFunc(address,uint8,bytes32)": {
            "notice": "Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)"
          },
          "sensitiveMockFuncOver32Bytes(uint16,bytes4,bytes32)": {
            "notice": "Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)"
          },
          "sensitiveMockFuncVoid(uint16,bytes4,bytes32)": {
            "notice": "Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)"
          },
          "slashAgent(uint32,address,address)": {
            "notice": "Allows Inbox to slash an agent, if their fraud was proven. > Will revert if any of these is true: > - Caller is not Inbox. > - Domain doesn't match the saved agent domain."
          },
          "slashAgentExposed(uint32,address,address)": {
            "notice": "Exposes _slashAgent for testing."
          },
          "withdrawTips(address,uint32,uint256)": {
            "notice": "Withdraws locked base message tips from requested domain Origin to the recipient. Issues a call to a local Origin contract, or sends a manager message to the remote chain."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=node_modules/@openzeppelin/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "hardhat/=node_modules/hardhat/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "test/harnesses/manager/BondingManagerHarness.t.sol": "BondingManagerHarness"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/MessagingBase.sol": {
        "keccak256": "0x01a7e9d9a5547e90d2efc4478485c7fc308a870d596a47d2b59383eaf2a02dd1",
        "urls": [
          "bzz-raw://2a5ab808e51515e2a8d2efccb3f9d89054c2fc7e9cb5f44514b734a097d8c114",
          "dweb:/ipfs/QmUJ1E1MXy1H2Nb8xCGA7hpsTMNF3CXNoU11qGyd5M8498"
        ],
        "license": "MIT"
      },
      "contracts/base/MultiCallable.sol": {
        "keccak256": "0x9645f1629cdf8db803c40725f6b0ee165df64bfc142db4613efd385a88f13699",
        "urls": [
          "bzz-raw://cc99799fdd946c11c893b89dad922822c866d14bdecded86913948a146f71053",
          "dweb:/ipfs/QmZGRZuhU2w6pAStcaQ5NyzyeUn69nJCJd9a9NnjuBVLsn"
        ],
        "license": "MIT"
      },
      "contracts/base/Version.sol": {
        "keccak256": "0x63131bbdb149a0c83685da246afc0faa71d1009a20154b1f39650cef4369fe84",
        "urls": [
          "bzz-raw://21f001efca9d0550162dd1154f5b1d977c85a703e6df883103638ae0fe65af9b",
          "dweb:/ipfs/QmX3BfuJ3yKxWFXphq6RcKcGrja1v5xJQ1fFCwRQvGV8u8"
        ],
        "license": "MIT"
      },
      "contracts/events/AgentManagerEvents.sol": {
        "keccak256": "0xa56624a0db82d304bfba608d1b4d58f9c3d6165d6f7bfb2f7b90d91f232b646a",
        "urls": [
          "bzz-raw://32f9e512ad758b98cb3a99611a2cac035ec9e8b0e4f031c88ea8dd46bb2a7dbe",
          "dweb:/ipfs/QmbZXsV3jcBgbsAc8FRGTkMrWDVHPk19p2GoKkxmHov9ei"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IAgentManager.sol": {
        "keccak256": "0xc6fded8bc39cdb24e2bc038ba9b0ae168ad42fb15ed9d5883b89940b4e970a10",
        "urls": [
          "bzz-raw://898f25a9d1f375ab7e5dc7cd791263934b50d3b0a44dc29a4c914578a1b06339",
          "dweb:/ipfs/QmXi3CVhvWpGxVvmw4n7UvEoX2bD2ZD2rg4oZhYETYWJ3a"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IAgentSecured.sol": {
        "keccak256": "0x9a7efecf8fe37cc8245e3b0e3f5d6d6ee056cdd97ccb5631ff6347bdfc9fc889",
        "urls": [
          "bzz-raw://7877d223162a76d3fe75490069719b3a4f14cd66fc42bfa915f2813390b7d2aa",
          "dweb:/ipfs/QmZhE1rnffA9bbtkNAwVk6iitMPk14gHbK56mdeHQEPhxj"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IStatementInbox.sol": {
        "keccak256": "0x99c93edd056d33d33ce57ae7d6d17328b88e94fe971c4e9d23d2fceaa9f1e41c",
        "urls": [
          "bzz-raw://76a2cf74f7a24ab3c669efab5372dff18a29463504b09a0d3dde4b4184a2eff3",
          "dweb:/ipfs/Qmb1sy2izNESmgS8FVkFHMXpWc2UM3unQeKMghFYCHNfn4"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/InterfaceBondingManager.sol": {
        "keccak256": "0x0c94cb27bd86eb1f0a48bf9ae15f747f4d0cc9c3e210a7eb75f255d44ccb3ec6",
        "urls": [
          "bzz-raw://3ca990b2704379039a58af30ef2e4f8db6165d8634cb77bcf2c34a1f3c09eb42",
          "dweb:/ipfs/Qmb5aNdpJrqry3o87KWwYf23kT691xf7GujzmQFy2S3sop"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/InterfaceDestination.sol": {
        "keccak256": "0x708371d239580f8e6dc44e790fd32f47e074cbfb8ae9e75609adbc0de303678c",
        "urls": [
          "bzz-raw://e5061c85c3779304f5c3919d2b1bc6620d1029a4ead7186c3f3f5b409a9bd855",
          "dweb:/ipfs/QmW4Hrz2NGMCRV2Rqv22G4xArsR4jUZtNr1garSR8AZud6"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/InterfaceLightManager.sol": {
        "keccak256": "0xfd56fe81fd6776faae469d615e66d71387512fac1997157a1dd3f80ada8e7dac",
        "urls": [
          "bzz-raw://e1ef5b8bbdc189ce2148cc74f61f6eb9ca8bdcbf53ac84948ec72953ed4433d2",
          "dweb:/ipfs/Qmbe1Qm94avKV2mw1Yj33SZ698ykCA8vEpZhqjL9o4oqev"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/InterfaceOrigin.sol": {
        "keccak256": "0xe2c7feb15991348e274a413ee7e24c4cc4e2225c851924955ad2f025c8b5c42f",
        "urls": [
          "bzz-raw://314cdd9daf29e9d6ed288e02be302487cce6c0ca89805e5e8f6d78fb150c6ea6",
          "dweb:/ipfs/QmP6vY22Cpf45a3eDR6hPBnDDqCPcu4cRXJhH7W41ohkD6"
        ],
        "license": "MIT"
      },
      "contracts/libs/Constants.sol": {
        "keccak256": "0x00f447e219d27f9a864847f8038c4bac16f59e2fb37c5c0de1b554d48d41ba48",
        "urls": [
          "bzz-raw://8c3b8452f969900c9ffbfae74dd73d076d9eace7e2448015b6c46ca8dd4d4402",
          "dweb:/ipfs/QmXGya3YqdmTXNdzTs1ZLMXJZnfJb49Sw5soXhjHbq8qnk"
        ],
        "license": "MIT"
      },
      "contracts/libs/Errors.sol": {
        "keccak256": "0xe9a2059a2ad04e5a8ce5a6fcd091541dcd1b745edb1ce36fd97b188fe8a24011",
        "urls": [
          "bzz-raw://36c91869720c13e9f207ef4a96147c1bcdc75574fb84eacfd8a5a4efe4e5210b",
          "dweb:/ipfs/QmRuYYPnsuES87cQTAag63gdVf22pL7UjF9pvzBt87iGyB"
        ],
        "license": "MIT"
      },
      "contracts/libs/Structures.sol": {
        "keccak256": "0x3eaa63f5d9aac514328111e8fdd037dc6fdb18af7541a8287deeacd2e44f7137",
        "urls": [
          "bzz-raw://633619910c74a0685ef2993a2e7cc44088929121a15c8a9fc26c9bbadffbda71",
          "dweb:/ipfs/QmZceJv6UntiMWW4JZHbmytLsqXshbuav8yoiritksvqqy"
        ],
        "license": "MIT"
      },
      "contracts/libs/merkle/MerkleMath.sol": {
        "keccak256": "0xbd13c07bdc40b80f56c7d75e3f31b6c4a85a78d444b760604a5b71083d14925c",
        "urls": [
          "bzz-raw://3162b491e4e216c0f2d143ce3baab4cf9e2a8b1b42466256a5d5b1f8b0385507",
          "dweb:/ipfs/QmYnDSZyxiGHfmB8Fx46zh1LZe3aCdVaKzpaQuD9piTc7u"
        ],
        "license": "MIT"
      },
      "contracts/libs/merkle/MerkleTree.sol": {
        "keccak256": "0xdc0a58835c6296f70fca199455adf94059f2ef709e4e3af05c3fa97e74b81fb0",
        "urls": [
          "bzz-raw://62e769893052a89a57db12445481dd56ffdd758aa1795d94b17c3357ce799de1",
          "dweb:/ipfs/QmNnfsHhN5UvQHQSW1G6FUQZZBJEZVrAsBYGdQ5GkPbU1c"
        ],
        "license": "MIT"
      },
      "contracts/libs/stack/GasData.sol": {
        "keccak256": "0x2007fd4b97cf33bfe4aa7dc6ac887af87b4010ec9834636b4dd5685582ac26cb",
        "urls": [
          "bzz-raw://8b54ca8b659d63ef7138c5b3b243190ca19b1e893b7b49dee1f8790d55b9e691",
          "dweb:/ipfs/Qmc2FGb16uosZ5kvyEK2onpWVPvWeE9X72xNWeJw8CbweD"
        ],
        "license": "MIT"
      },
      "contracts/libs/stack/Number.sol": {
        "keccak256": "0xe4e0d66268eb69304cda001a3e03242e9f4af8680830c92b3d6ebe83e96acb96",
        "urls": [
          "bzz-raw://f70c28a10a2d34849614ff51c74f8c6107093b4d01eb865b2ab0d4efe9294cfd",
          "dweb:/ipfs/QmQbXCnHfPJjdNCK1UuQ2ShNan6H7j5s9DLS4HygQ5wfP5"
        ],
        "license": "MIT"
      },
      "contracts/manager/AgentManager.sol": {
        "keccak256": "0x6b6bb9d62e624a5efa1d3bfbf0571a117ee48bbbb3868ebb6f8ff58071f6d475",
        "urls": [
          "bzz-raw://ac93ed3f2c169c0297dd70f37e72595799738b4879131be12292dea8f5625663",
          "dweb:/ipfs/QmNwi7wXMaxg4kg4RxsUrxhz4jLocT7XrVyvQ2dfEAHqJi"
        ],
        "license": "MIT"
      },
      "contracts/manager/BondingManager.sol": {
        "keccak256": "0x83dd80c895a8c0ce0cae3d4c6ada58d9c0956e80c959d8a9fb23692a4ab9826b",
        "urls": [
          "bzz-raw://33843db398ea33e0cb75a8e43a9c9e68be5284dea7cbc71698252fba30cd0234",
          "dweb:/ipfs/QmXiY7s4mQHTtV5B8bbf1s7TobQ22aPxf9NXVKjbL9dBcW"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
        "keccak256": "0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34",
        "urls": [
          "bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7",
          "dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
        "keccak256": "0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba",
        "urls": [
          "bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8",
          "dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
        "keccak256": "0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d",
        "urls": [
          "bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f",
          "dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
        "keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
        "urls": [
          "bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
          "dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
        ],
        "license": "MIT"
      },
      "test/harnesses/manager/AgentManagerHarness.t.sol": {
        "keccak256": "0x6ad504f142be190f4b3fa158162445fb56d29443022041f2c17eb485be4f886b",
        "urls": [
          "bzz-raw://365788b0d405bacced74fda6f4ab0335e48496a3ced3ae4a4b6487983c5723d3",
          "dweb:/ipfs/QmQuogm7HhTZzkGPzHtMshocskqdga4T11FAVx6dVmueru"
        ],
        "license": "MIT"
      },
      "test/harnesses/manager/BondingManagerHarness.t.sol": {
        "keccak256": "0x22694e0b72ad3ce20bb8280b9906e0d41b2b9a6ebb0a2ed7d96cd0beadeb0210",
        "urls": [
          "bzz-raw://98721c934e60a1b4ae0567868330636b7caad0191939526d21fb4c7f06674bd3",
          "dweb:/ipfs/QmRjWtbHxQgBWCHG3CjZqpBEFbd9MgCBff6qmwT6xYdjBL"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "test/harnesses/manager/BondingManagerHarness.t.sol",
    "id": 58455,
    "exportedSymbols": {
      "AgentManagerHarness": [
        58434
      ],
      "BondingManager": [
        17577
      ],
      "BondingManagerHarness": [
        58454
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:336:130",
    "nodes": [
      {
        "id": 58436,
        "nodeType": "PragmaDirective",
        "src": "32:23:130",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".17"
        ]
      },
      {
        "id": 58438,
        "nodeType": "ImportDirective",
        "src": "57:77:130",
        "nodes": [],
        "absolutePath": "contracts/manager/BondingManager.sol",
        "file": "../../../contracts/manager/BondingManager.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58455,
        "sourceUnit": 17578,
        "symbolAliases": [
          {
            "foreign": {
              "id": 58437,
              "name": "BondingManager",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 17577,
              "src": "65:14:130",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 58440,
        "nodeType": "ImportDirective",
        "src": "136:64:130",
        "nodes": [],
        "absolutePath": "test/harnesses/manager/AgentManagerHarness.t.sol",
        "file": "./AgentManagerHarness.t.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 58455,
        "sourceUnit": 58435,
        "symbolAliases": [
          {
            "foreign": {
              "id": 58439,
              "name": "AgentManagerHarness",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 58434,
              "src": "144:19:130",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 58454,
        "nodeType": "ContractDefinition",
        "src": "237:130:130",
        "nodes": [
          {
            "id": 58453,
            "nodeType": "FunctionDefinition",
            "src": "313:52:130",
            "nodes": [],
            "body": {
              "id": 58452,
              "nodeType": "Block",
              "src": "363:2:130",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 58449,
                    "name": "domain",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 58446,
                    "src": "355:6:130",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  }
                ],
                "id": 58450,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 58448,
                  "name": "BondingManager",
                  "nameLocations": [
                    "340:14:130"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 17577,
                  "src": "340:14:130"
                },
                "nodeType": "ModifierInvocation",
                "src": "340:22:130"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 58447,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 58446,
                  "mutability": "mutable",
                  "name": "domain",
                  "nameLocation": "332:6:130",
                  "nodeType": "VariableDeclaration",
                  "scope": 58453,
                  "src": "325:13:130",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 58445,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "325:6:130",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "324:15:130"
            },
            "returnParameters": {
              "id": 58451,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "363:0:130"
            },
            "scope": 58454,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 58441,
              "name": "BondingManager",
              "nameLocations": [
                "271:14:130"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 17577,
              "src": "271:14:130"
            },
            "id": 58442,
            "nodeType": "InheritanceSpecifier",
            "src": "271:14:130"
          },
          {
            "baseName": {
              "id": 58443,
              "name": "AgentManagerHarness",
              "nameLocations": [
                "287:19:130"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 58434,
              "src": "287:19:130"
            },
            "id": 58444,
            "nodeType": "InheritanceSpecifier",
            "src": "287:19:130"
          }
        ],
        "canonicalName": "BondingManagerHarness",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          58454,
          58434,
          17577,
          9644,
          16652,
          9127,
          3922,
          2851,
          46691,
          47177,
          46833,
          3004,
          2941
        ],
        "name": "BondingManagerHarness",
        "nameLocation": "246:21:130",
        "scope": 58455,
        "usedErrors": [
          10176,
          10178,
          10180,
          10184,
          10206,
          10216,
          10246,
          10248,
          10252,
          10258,
          10268,
          10270,
          10272,
          10274,
          10276,
          10280,
          10282,
          10284,
          10286,
          10288,
          10290,
          10292
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 130
}